This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-06-21T18:37:27.589Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
build.xml
src/java/auth/BlockJspHtmlFilter.java
src/java/config/PasswordUtil.java
src/java/controller/AccountController.java.old
src/java/controller/admin/AdminController.java
src/java/controller/category/CategoryController.java
src/java/controller/chapter/ChapterController.java
src/java/controller/ForgotPasswordController.java
src/java/controller/grade/GradeController.java
src/java/controller/invoice/InvoiceController.java
src/java/controller/lesson/LessonController.java
src/java/controller/LoginController.java
src/java/controller/LoginGoogleController.java
src/java/controller/LogoutController.java
src/java/controller/packagesubject/PackageSubjectController.java
src/java/controller/ParentController.java
src/java/controller/question/QuestionController.java
src/java/controller/student/StudentController.java
src/java/controller/student/TakeTestController.java
src/java/controller/studypackage/StudyPackageController.java
src/java/controller/subject/SubjectController.java
src/java/controller/test/TestController.java
src/java/dal/AccountDAO.java
src/java/dal/CategoryDAO.java
src/java/dal/ChapterDAO.java
src/java/dal/ChatQADAO.java
src/java/dal/DAOSubject.java
src/java/dal/DBContext.java
src/java/dal/GradeDAO.java
src/java/dal/ImageDAO.java
src/java/dal/InvoiceDAO.java
src/java/dal/LessonDAO.java
src/java/dal/PackageSubjectDAO.java
src/java/dal/QuestionDAO.java
src/java/dal/StudentDAO.java
src/java/dal/StudyPackageDAO.java
src/java/dal/TestDAO.java
src/java/dal/TestQuestionDAO.java
src/java/dal/TestRecordDAO.java
src/java/fillter/Authorization.java
src/java/model/Account.java
src/java/model/Category.java
src/java/model/Chapter.java
src/java/model/ChatQA.java
src/java/model/GoogleAccount.java
src/java/model/Grade.java
src/java/model/Image.java
src/java/model/Invoice.java
src/java/model/InvoiceLine.java
src/java/model/Lesson.java
src/java/model/PackageSubject.java
src/java/model/Question.java
src/java/model/QuestionOption.java
src/java/model/QuestionRecord.java
src/java/model/Student.java
src/java/model/StudyPackage.java
src/java/model/Subject.java
src/java/model/Test.java
src/java/model/TestQuestion.java
src/java/model/TestRecord.java
src/java/util/AuthUtil.java
src/java/util/RoleConstants.java
web/accountForm.jsp
web/accountList.jsp
web/admin/dashboard.jsp
web/admin/manageTests.jsp
web/Category/addCategory.jsp
web/Category/categoryList.jsp
web/Category/updateCategory.jsp
web/chapter/chapterForm.jsp
web/chapter/listChapter.jsp
web/footer.jsp
web/header.jsp
web/index.html
web/insertAccount.jsp
web/login.jsp
web/profileAccount.jsp
web/register.jsp
web/teacher/manageTests.jsp
web/Test/addTest.jsp
web/Test/manageQuestions.jsp
web/Test/testList.jsp
web/Test/updateTest.jsp
web/WEB-INF/web.xml

================================================================
Repository Files
================================================================

================
File: build.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="projectSwp" default="default" basedir=".">
    <description>Builds, tests, and runs the project projectSwp.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties 
      -post-init:                called after initialization of project properties 
      -pre-compile:              called before javac compilation 
      -post-compile:             called after javac compilation 
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building 
      -post-dist:                called after archive building 
      -post-clean:               called after cleaning build products 
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
</project>

================
File: src/java/auth/BlockJspHtmlFilter.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package auth;

import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Account;
import util.RoleConstants;

import java.io.IOException;

@WebFilter("*.jsp")
public class BlockJspHtmlFilter implements Filter {

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse res = (HttpServletResponse) response;
        String uri = req.getRequestURI();

        HttpSession session = req.getSession(false);
        Account user = (session != null) ? (Account) session.getAttribute("account") : null;

        if (uri.contains("admin/") && (user == null || !user.getRole().equals(RoleConstants.ADMIN))) {
            res.sendRedirect("/error.jsp");
            return;
        }

        if (uri.contains("teacher/") && (user == null
                || !(user.getRole().equals(RoleConstants.TEACHER) || user.getRole().equals(RoleConstants.ADMIN)))) {
            res.sendRedirect("/error.jsp");
            return;
        }

        if (uri.contains("parent/") && (user == null || !user.getRole().equals(RoleConstants.PARENT))) {
            res.sendRedirect("/error.jsp");
            return;
        }

        if (uri.contains("student/")) {
            Object studentObj = session.getAttribute("student");
            if (!(studentObj instanceof model.Student)) {
                res.sendRedirect("/error.jsp");
                return;
            }
        }

        chain.doFilter(request, response);
    }
}

================
File: src/java/config/PasswordUtil.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package config;

import at.favre.lib.crypto.bcrypt.BCrypt;

/**
 *
 * @author BuiNgocLinh
 */
public class PasswordUtil {

    public String hashPassword(String plainPassword) {
        return BCrypt.withDefaults().hashToString(10, plainPassword.toCharArray());
    }

    public boolean checkPassword(String plainPassword, String hashedPassword) {
        return BCrypt.verifyer().verify(plainPassword.toCharArray(), hashedPassword).verified;
    }
}

================
File: src/java/controller/AccountController.java.old
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import dal.AccountDAO;
import dal.ImageDAO;
import config.FileUploadUlti;
import jakarta.servlet.RequestDispatcher;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Account;
import model.Image;

/**
 *
 * @author BuiNgocLinh
 */
@MultipartConfig
@WebServlet(name = "AccountController", urlPatterns = {"/admin"})
public class AccountController extends HttpServlet {

    private AccountDAO accountDAO = new AccountDAO();
    private ImageDAO ImageDAO = new ImageDAO(accountDAO.getConnection());

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) {
            List<Account> accountList = null;
            try {
                accountList = accountDAO.findAll();
            } catch (SQLException ex) {
                Logger.getLogger(AccountController.class.getName()).log(Level.SEVERE, null, ex);
            }
            request.setAttribute("accountList", accountList);
            request.getRequestDispatcher("/admin/home.jsp").forward(request, response);
            return;
        }

        try {
            switch (action) {
                case "listAccount":
                    listAccounts(request, response);
                    break;
                case "viewProfile":
                    viewProfile(request, response);
                    break;
                case "createAccount":
                    showCreateForm(request, response);
                    break;
                case "editAccount":
                    showEditForm(request, response);
                    break;
                case "deleteAccount":
                    deleteAccount(request, response);
                    break;
                case "searchAccount":
                    searchAccount(request, response);
                    break;
                default:
                    response.sendRedirect("/index.html");
                    break;
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) {
            response.sendRedirect("admin");
            return;
        }
        try {
            switch (action) {
                case "createAccount":
                    insertAccount(request, response);
                    break;
                case "editAccount":
                    updateAccount(request, response);
                    break;
                case "changePassword":
                    changePassword(request, response);
                    break;
                default:
                    response.sendRedirect("admin");
                    break;
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }
    }

    private void listAccounts(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int page = 1;
        int recordsPerPage = 5;

        String pageParam = request.getParameter("page");
        if (pageParam != null) {
            try {
                page = Integer.parseInt(pageParam);
            } catch (NumberFormatException e) {
                page = 1;
            }
        }

        int offset = (page - 1) * recordsPerPage;

        List<Account> accountList = accountDAO.getAccountsByPage(offset, recordsPerPage);
        int totalRecords = accountDAO.countAccounts();
        int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage);

        List<Image> imageList = ImageDAO.findAll();
        request.setAttribute("accountList", accountList);
        request.setAttribute("imageList", imageList);
        request.setAttribute("currentPage", page);
        request.setAttribute("totalPages", totalPages);

        request.getRequestDispatcher("/accountList.jsp").forward(request, response);
    }

    private void viewProfile(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        List<Image> imageList = ImageDAO.findAll();
        int id = Integer.parseInt(request.getParameter("id"));
        Account accountView = accountDAO.viewProfile(id);
        request.setAttribute("imageList", imageList);
        request.setAttribute("view", accountView);
        request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
    }

    private void showCreateForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/insertAccount.jsp").forward(request, response);
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        Account account = accountDAO.findById(id);
        Image image = ImageDAO.findImageById(account.getImage_id());
        request.setAttribute("account", account);
        request.setAttribute("image", image);
        request.getRequestDispatcher("/accountForm.jsp").forward(request, response);
    }

    private void insertAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException, ServletException {
        Account account = getAccountFromRequest(request);
        String avatarName = "avatar_" + System.currentTimeMillis();

        String imgURL = FileUploadUlti.uploadAvatarImage(request, avatarName);

        if (imgURL != null) {
            Image image = new Image();
            image.setImage_data(imgURL);

            ImageDAO imageDAO = new ImageDAO(accountDAO.getConnection());
            int imageId = imageDAO.insertImage(image);
            if (imageId > 0) {
                account.setImage_id(imageId);
            }
        }
        boolean inserted = accountDAO.insert(account);
        if (inserted) {
            response.sendRedirect("admin?action=listAccount");
        } else {
            request.setAttribute("error", "Failed to insert account");
            request.getRequestDispatcher("/insertAccount.jsp").forward(request, response);
        }
    }

    private void updateAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException, ServletException {
        Account oldAccount = accountDAO.findById(Integer.parseInt(request.getParameter("id")));
        Account account = getAccountFromRequest(request);
        String avatarName = "avatar_" + System.currentTimeMillis();
        String imgURL = FileUploadUlti.uploadAvatarImage(request, avatarName);

        // Validate old password if provided (edit mode)
        String oldPassword = request.getParameter("oldPassword");
        if (oldPassword != null && !oldPassword.isEmpty()) {
            if (!accountDAO.validatePassword(oldAccount, oldPassword)) {
                request.setAttribute("passwordError", "Current password is incorrect");
                Image image = ImageDAO.findImageById(oldAccount.getImage_id());
                request.setAttribute("account", oldAccount);
                request.setAttribute("image", image);
                request.getRequestDispatcher("/accountForm.jsp").forward(request, response);
                return;
            }
        }

        if (imgURL != null) {
            Image image = new Image();
            image.setImage_data(imgURL);

            ImageDAO imageDAO = new ImageDAO(accountDAO.getConnection());
            int imageId = imageDAO.insertImage(image);
            if (imageId > 0) {
                account.setImage_id(imageId);
            } else {
                account.setImage_id(oldAccount.getImage_id());
            }
        } else {
            account.setImage_id(oldAccount.getImage_id());
        }

        // If new password is empty, keep the old password
        String newPassword = request.getParameter("password");
        if (newPassword == null || newPassword.isEmpty()) {
            account.setPassword(oldAccount.getPassword());
        }

        accountDAO.update(account);
        response.sendRedirect("admin?action=viewProfile&id=" + account.getId());
    }

    private void deleteAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
//        accountDAO.deleteAccount(id);
        response.sendRedirect("/accountList.jsp");
    }

    private void searchAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        String email = request.getParameter("email");
        List<Account> accountList;
        if (email != null && !email.trim().isEmpty()) {
            accountList = accountDAO.findByEmail(email.trim());
            if (accountList == null || accountList.isEmpty()) {
                request.setAttribute("error", "Nothing " + email.trim());
            }
        } else {
            accountList = accountDAO.findAll();
        }
        List<Image> imageList = ImageDAO.findAll();
        request.setAttribute("imageList", imageList);
        request.setAttribute("accountList", accountList);
        request.getRequestDispatcher("/accountList.jsp").forward(request, response);
    }

    private void changePassword(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException, ServletException {
        int id = Integer.parseInt(request.getParameter("id"));
        String oldPassword = request.getParameter("oldPassword");
        String newPassword = request.getParameter("newPassword");
        Account account = accountDAO.findById(id);
        if (account == null) {
            request.setAttribute("passwordError", "Account not found.");
            List<Image> imageList = ImageDAO.findAll();
            request.setAttribute("imageList", imageList);
            request.setAttribute("view", account);
            request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
            return;
        } else if (!accountDAO.validatePassword(account, oldPassword)) {
            request.setAttribute("passwordError", "Current password is incorrect.");
            List<Image> imageList = ImageDAO.findAll();
            request.setAttribute("imageList", imageList);
            request.setAttribute("view", account);
            request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
            return;
        } else if (newPassword == null || newPassword.length() < 6) {
            request.setAttribute("passwordError", "New password must be at least 6 characters.");
            List<Image> imageList = ImageDAO.findAll();
            request.setAttribute("imageList", imageList);
            request.setAttribute("view", account);
            request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
            return;
        } else {
            account.setPassword(newPassword);
            accountDAO.update(account);
            request.setAttribute("passwordSuccess", "Password changed successfully.");
            List<Image> imageList = ImageDAO.findAll();
            request.setAttribute("imageList", imageList);
            request.setAttribute("view", account);
            request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
        }
    }

    private Account getAccountFromRequest(HttpServletRequest request) {
        String idStr = request.getParameter("id");
        int id = (idStr != null && !idStr.isEmpty()) ? Integer.parseInt(idStr) : 0;
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String status = request.getParameter("status");
        String role = request.getParameter("role");
        String fullName = request.getParameter("full_name");
        Integer sex = (request.getParameter("sex") != null && !request.getParameter("sex").isEmpty())
                ? Integer.parseInt(request.getParameter("sex")) : null;
        String dobStr = request.getParameter("dob");
        LocalDate dob = (dobStr != null && !dobStr.isEmpty()) ? LocalDate.parse(dobStr) : null;
        Integer imageId = (request.getParameter("image_id") != null && !request.getParameter("image_id").isEmpty())
                ? Integer.parseInt(request.getParameter("image_id")) : null;

        Account account = new Account();
        account.setId(id);
        account.setEmail(email);
        account.setPassword(password);
        account.setStatus(status);
        account.setRole(role);
        account.setFull_name(fullName);
        account.setSex(sex);
        account.setDob(dob);
        account.setImage_id(imageId);

        return account;
    }
}

================
File: src/java/controller/admin/AdminController.java
================
package controller.admin;

import dal.*;
import config.FileUploadUlti;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.*;
import util.AuthUtil;
import util.RoleConstants;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

@MultipartConfig
@WebServlet(name = "AdminController", urlPatterns = {"/admin"})
public class AdminController extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(AdminController.class.getName());

    private AccountDAO accountDAO;
    private StudentDAO studentDAO;
    private TestDAO testDAO;
    private TestRecordDAO testRecordDAO;
    private InvoiceDAO invoiceDAO;
    private GradeDAO gradeDAO;
    private DAOSubject subjectDAO;
    private LessonDAO lessonDAO;
    private QuestionDAO questionDAO;
    private ImageDAO imageDAO;

    @Override
    public void init() throws ServletException {
        super.init();
        // Initialize DAOs
        accountDAO = new AccountDAO();
        studentDAO = new StudentDAO();
        testDAO = new TestDAO();
        testRecordDAO = new TestRecordDAO();
        invoiceDAO = new InvoiceDAO();
        gradeDAO = new GradeDAO();
        subjectDAO = new DAOSubject();
        lessonDAO = new LessonDAO();
        questionDAO = new QuestionDAO();
        imageDAO = new ImageDAO(accountDAO.getConnection());
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Check admin authorization
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN)) {
            response.sendRedirect("/error.jsp");
            return;
        }

        String action = request.getParameter("action");
        if (action == null) {
            showDashboard(request, response);
            return;
        }

        try {
            switch (action) {
                case "dashboard":
                    showDashboard(request, response);
                    break;
                case "listAccount":
                    listAccounts(request, response);
                    break;
                case "viewProfile":
                    viewProfile(request, response);
                    break;
                case "createAccount":
                    showCreateForm(request, response);
                    break;
                case "editAccount":
                    showEditForm(request, response);
                    break;
                case "deleteAccount":
                    deleteAccount(request, response);
                    break;
                case "searchAccount":
                    searchAccount(request, response);
                    break;
                case "analytics":
                    showAnalytics(request, response);
                    break;
                default:
                    showDashboard(request, response);
                    break;
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in AdminController", e);
            throw new ServletException(e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN)) {
            response.sendRedirect("/error.jsp");
            return;
        }

        String action = request.getParameter("action");
        if (action == null) {
            response.sendRedirect("admin");
            return;
        }

        try {
            switch (action) {
                case "createAccount":
                    insertAccount(request, response);
                    break;
                case "editAccount":
                    updateAccount(request, response);
                    break;
                case "changePassword":
                    changePassword(request, response);
                    break;
                default:
                    response.sendRedirect("admin");
                    break;
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in AdminController POST", e);
            throw new ServletException(e);
        }
    }

    private void showDashboard(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        try {
            // Get dashboard statistics
            Map<String, Object> dashboardData = getDashboardData();

            // Set attributes for JSP
            request.setAttribute("dashboardData", dashboardData);

            // Forward to dashboard JSP
            request.getRequestDispatcher("/admin/dashboard.jsp").forward(request, response);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error loading dashboard data", e);
            // Set empty data to prevent JSP errors
            request.setAttribute("dashboardData", getEmptyDashboardData());
            request.getRequestDispatcher("/admin/dashboard.jsp").forward(request, response);
        }
    }

    private Map<String, Object> getDashboardData() throws SQLException {
        Map<String, Object> data = new HashMap<>();

        try {
            // Basic counts
            data.put("totalUsers", accountDAO.countAccounts());
            data.put("totalStudents", studentDAO.countStudents());
            data.put("totalTests", testDAO.countTests());
            data.put("totalQuestions", questionDAO.countQuestions());
            data.put("totalLessons", lessonDAO.countLessons());
            data.put("totalSubjects", subjectDAO.countSubjects());
            data.put("totalGrades", gradeDAO.countGrades());

            // User distribution by role
            data.put("usersByRole", accountDAO.getUserCountByRole());

            // Recent activities
            data.put("recentTests", testRecordDAO.getRecentTestRecords(10));
            data.put("recentRegistrations", accountDAO.getRecentRegistrations(10));

            // Monthly statistics
            data.put("monthlyTestData", getMonthlyTestData());
            data.put("monthlyUserData", getMonthlyUserData());

            // Performance metrics
            data.put("averageTestScore", testRecordDAO.getAverageTestScore());
            data.put("testCompletionRate", testRecordDAO.getTestCompletionRate());

            // Revenue data (if applicable)
            data.put("monthlyRevenue", invoiceDAO.getMonthlyRevenue());
            data.put("totalRevenue", invoiceDAO.getTotalRevenue());

        } catch (Exception e) {
            LOGGER.log(Level.WARNING, "Error getting dashboard data", e);
            return getEmptyDashboardData();
        }

        return data;
    }

    private Map<String, Object> getEmptyDashboardData() {
        Map<String, Object> data = new HashMap<>();
        data.put("totalUsers", 0);
        data.put("totalStudents", 0);
        data.put("totalTests", 0);
        data.put("totalQuestions", 0);
        data.put("totalLessons", 0);
        data.put("totalSubjects", 0);
        data.put("totalGrades", 0);
        data.put("usersByRole", new HashMap<String, Integer>());
        data.put("recentTests", new ArrayList<>());
        data.put("recentRegistrations", new ArrayList<>());
        data.put("monthlyTestData", new ArrayList<>());
        data.put("monthlyUserData", new ArrayList<>());
        data.put("averageTestScore", 0.0);
        data.put("testCompletionRate", 0.0);
        data.put("monthlyRevenue", new ArrayList<>());
        data.put("totalRevenue", 0.0);
        return data;
    }

    private List<Map<String, Object>> getMonthlyTestData() {
        List<Map<String, Object>> monthlyData = new ArrayList<>();
        try {
            // Get test data for last 12 months
            LocalDate now = LocalDate.now();
            for (int i = 11; i >= 0; i--) {
                LocalDate month = now.minusMonths(i);
                Map<String, Object> monthData = new HashMap<>();
                monthData.put("month", month.format(DateTimeFormatter.ofPattern("MMM yyyy")));
                monthData.put("tests", testRecordDAO.getTestCountByMonth(month));
                monthData.put("completions", testRecordDAO.getCompletedTestCountByMonth(month));
                monthlyData.add(monthData);
            }
        } catch (Exception e) {
            LOGGER.log(Level.WARNING, "Error getting monthly test data", e);
        }
        return monthlyData;
    }

    private List<Map<String, Object>> getMonthlyUserData() {
        List<Map<String, Object>> monthlyData = new ArrayList<>();
        try {
            // Get user registration data for last 12 months
            LocalDate now = LocalDate.now();
            for (int i = 11; i >= 0; i--) {
                LocalDate month = now.minusMonths(i);
                Map<String, Object> monthData = new HashMap<>();
                monthData.put("month", month.format(DateTimeFormatter.ofPattern("MMM yyyy")));
                monthData.put("registrations", accountDAO.getRegistrationCountByMonth(month));
                monthlyData.add(monthData);
            }
        } catch (Exception e) {
            LOGGER.log(Level.WARNING, "Error getting monthly user data", e);
        }
        return monthlyData;
    }

    private void listAccounts(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int page = 1;
        int recordsPerPage = 5;

        String pageParam = request.getParameter("page");
        if (pageParam != null) {
            try {
                page = Integer.parseInt(pageParam);
            } catch (NumberFormatException e) {
                page = 1;
            }
        }

        int offset = (page - 1) * recordsPerPage;

        try {
            List<Account> accountList = accountDAO.getAccountsByPage(offset, recordsPerPage);
            int totalRecords = accountDAO.countAccounts();
            int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage);

            List<Image> imageList = imageDAO.findAll();
            request.setAttribute("accountList", accountList);
            request.setAttribute("imageList", imageList);
            request.setAttribute("currentPage", page);
            request.setAttribute("totalPages", totalPages);

            request.getRequestDispatcher("/accountList.jsp").forward(request, response);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error listing accounts", e);
            throw e;
        }
    }

    private void viewProfile(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        try {
            List<Image> imageList = imageDAO.findAll();
            int id = Integer.parseInt(request.getParameter("id"));
            Account accountView = accountDAO.viewProfile(id);
            request.setAttribute("imageList", imageList);
            request.setAttribute("view", accountView);
            request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error viewing profile", e);
            throw e;
        }
    }

    private void showCreateForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/insertAccount.jsp").forward(request, response);
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            Account account = accountDAO.findById(id);
            Image image = imageDAO.findImageById(account.getImage_id());
            request.setAttribute("account", account);
            request.setAttribute("image", image);
            request.getRequestDispatcher("/accountForm.jsp").forward(request, response);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error showing edit form", e);
            throw e;
        }
    }

    private void insertAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException, ServletException {
        try {
            Account account = getAccountFromRequest(request);
            String avatarName = "avatar_" + System.currentTimeMillis();

            String imgURL = FileUploadUlti.uploadAvatarImage(request, avatarName);

            if (imgURL != null) {
                Image image = new Image();
                image.setImage_data(imgURL);

                int imageId = imageDAO.insertImage(image);
                if (imageId > 0) {
                    account.setImage_id(imageId);
                }
            }
            boolean inserted = accountDAO.insert(account);
            if (inserted) {
                response.sendRedirect("admin?action=listAccount");
            } else {
                request.setAttribute("error", "Failed to insert account");
                request.getRequestDispatcher("/insertAccount.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error inserting account", e);
            throw e;
        }
    }

    private void updateAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException, ServletException {
        try {
            Account oldAccount = accountDAO.findById(Integer.parseInt(request.getParameter("id")));
            Account account = getAccountFromRequest(request);
            String avatarName = "avatar_" + System.currentTimeMillis();
            String imgURL = FileUploadUlti.uploadAvatarImage(request, avatarName);

            // Validate old password if provided (edit mode)
            String oldPassword = request.getParameter("oldPassword");
            if (oldPassword != null && !oldPassword.isEmpty()) {
                if (!accountDAO.validatePassword(oldAccount, oldPassword)) {
                    request.setAttribute("passwordError", "Current password is incorrect");
                    Image image = imageDAO.findImageById(oldAccount.getImage_id());
                    request.setAttribute("account", oldAccount);
                    request.setAttribute("image", image);
                    request.getRequestDispatcher("/accountForm.jsp").forward(request, response);
                    return;
                }
            }

            if (imgURL != null) {
                Image image = new Image();
                image.setImage_data(imgURL);

                int imageId = imageDAO.insertImage(image);
                if (imageId > 0) {
                    account.setImage_id(imageId);
                } else {
                    account.setImage_id(oldAccount.getImage_id());
                }
            } else {
                account.setImage_id(oldAccount.getImage_id());
            }

            // If new password is empty, keep the old password
            String newPassword = request.getParameter("password");
            if (newPassword == null || newPassword.isEmpty()) {
                account.setPassword(oldAccount.getPassword());
            }

            accountDAO.update(account);
            response.sendRedirect("admin?action=viewProfile&id=" + account.getId());
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error updating account", e);
            throw e;
        }
    }

    private void deleteAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
//        accountDAO.deleteAccount(id);
        response.sendRedirect("/accountList.jsp");
    }

    private void searchAccount(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        try {
            String email = request.getParameter("email");
            List<Account> accountList;
            if (email != null && !email.trim().isEmpty()) {
                accountList = accountDAO.findByEmail(email.trim());
                if (accountList == null || accountList.isEmpty()) {
                    request.setAttribute("error", "Nothing found for " + email.trim());
                }
            } else {
                accountList = accountDAO.findAll();
            }
            List<Image> imageList = imageDAO.findAll();
            request.setAttribute("imageList", imageList);
            request.setAttribute("accountList", accountList);
            request.getRequestDispatcher("/accountList.jsp").forward(request, response);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error searching account", e);
            throw e;
        }
    }

    private void changePassword(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException, ServletException {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            String oldPassword = request.getParameter("oldPassword");
            String newPassword = request.getParameter("newPassword");
            Account account = accountDAO.findById(id);

            if (account == null) {
                request.setAttribute("passwordError", "Account not found.");
                List<Image> imageList = imageDAO.findAll();
                request.setAttribute("imageList", imageList);
                request.setAttribute("view", account);
                request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
                return;
            } else if (!accountDAO.validatePassword(account, oldPassword)) {
                request.setAttribute("passwordError", "Current password is incorrect.");
                List<Image> imageList = imageDAO.findAll();
                request.setAttribute("imageList", imageList);
                request.setAttribute("view", account);
                request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
                return;
            } else if (newPassword == null || newPassword.length() < 6) {
                request.setAttribute("passwordError", "New password must be at least 6 characters.");
                List<Image> imageList = imageDAO.findAll();
                request.setAttribute("imageList", imageList);
                request.setAttribute("view", account);
                request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
                return;
            } else {
                account.setPassword(newPassword);
                accountDAO.update(account);
                request.setAttribute("passwordSuccess", "Password changed successfully.");
                List<Image> imageList = imageDAO.findAll();
                request.setAttribute("imageList", imageList);
                request.setAttribute("view", account);
                request.getRequestDispatcher("profileAccount.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error changing password", e);
            throw e;
        }
    }

    private void showAnalytics(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Placeholder for analytics page
        request.getRequestDispatcher("/admin/analytics.jsp").forward(request, response);
    }

    private Account getAccountFromRequest(HttpServletRequest request) {
        String idStr = request.getParameter("id");
        int id = (idStr != null && !idStr.isEmpty()) ? Integer.parseInt(idStr) : 0;
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String status = request.getParameter("status");
        String role = request.getParameter("role");
        String fullName = request.getParameter("full_name");
        Integer sex = (request.getParameter("sex") != null && !request.getParameter("sex").isEmpty())
                ? Integer.parseInt(request.getParameter("sex")) : null;
        String dobStr = request.getParameter("dob");
        LocalDate dob = (dobStr != null && !dobStr.isEmpty()) ? LocalDate.parse(dobStr) : null;
        Integer imageId = (request.getParameter("image_id") != null && !request.getParameter("image_id").isEmpty())
                ? Integer.parseInt(request.getParameter("image_id")) : null;

        Account account = new Account();
        account.setId(id);
        account.setEmail(email);
        account.setPassword(password);
        account.setStatus(status);
        account.setRole(role);
        account.setFull_name(fullName);
        account.setSex(sex);
        account.setDob(dob);
        account.setImage_id(imageId);

        return account;
    }
}

================
File: src/java/controller/category/CategoryController.java
================
package controller.category;

import dal.CategoryDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Category;
import util.AuthUtil;
import util.RoleConstants;

import java.io.IOException;
import java.util.List;

@WebServlet("/category")
public class CategoryController extends HttpServlet {

    private final CategoryDAO categoryDAO = new CategoryDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // CHỈ CHO ADMIN VÀ TEACHER
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER)) {
            response.sendRedirect("/error.jsp");
            return;
        }

        String action = request.getParameter("action");
        if (action == null) {
            action = "";
        }

        try {
            switch (action) {
                case "addForm":
                    // Thêm mới chỉ cho admin và teacher
                    request.getRequestDispatcher("Category/addCategory.jsp").forward(request, response);
                    return;

                case "updateForm": {
                    // Cập nhật chỉ cho admin và teacher
                    String idStr = request.getParameter("id");
                    if (idStr != null) {
                        int id = Integer.parseInt(idStr);
                        Category category = categoryDAO.getCategoryById(id);
                        if (category != null) {
                            request.setAttribute("category", category);
                            request.getRequestDispatcher("Category/updateCategory.jsp").forward(request, response);
                            return;
                        } else {
                            request.setAttribute("error", "Không tìm thấy category với ID " + id);
                        }
                    } else {
                        request.setAttribute("error", "ID không hợp lệ");
                    }
                    break;
                }

                case "delete": {
                    // Xóa cho cả admin và teacher
                    String delIdStr = request.getParameter("id");
                    if (delIdStr != null) {
                        int delId = Integer.parseInt(delIdStr);
                        boolean success = categoryDAO.deleteCategory(delId);
                        if (success) {
                            request.setAttribute("message", "Xóa category thành công");
                        } else {
                            request.setAttribute("error", "Không thể xóa category này. Category đang được sử dụng trong các bài test.");
                        }
                        response.sendRedirect("category");
                        return;
                    } else {
                        request.setAttribute("error", "ID không hợp lệ để xóa");
                    }
                    break;
                }

                default: {
                    String name = request.getParameter("name");
                    List<Category> categoryList;
                    if (name != null && !name.trim().isEmpty()) {
                        categoryList = categoryDAO.findByName(name.trim());
                        if (categoryList == null || categoryList.isEmpty()) {
                            request.setAttribute("error", "Không tìm thấy category nào với tên '" + name.trim() + "'");
                        }
                    } else {
                        categoryList = categoryDAO.getAllCategories();
                    }
                    request.setAttribute("categoryList", categoryList);
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Lỗi xử lý yêu cầu: " + e.getMessage());
        }

        request.getRequestDispatcher("Category/categoryList.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // CHỈ CHO ADMIN VÀ TEACHER
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER)) {
            response.sendRedirect("/error.jsp");
            return;
        }

        String action = request.getParameter("action");

        try {
            if ("insert".equalsIgnoreCase(action)) {
                String name = request.getParameter("name");
                int numQuestion = Integer.parseInt(request.getParameter("num_question"));
                int duration = Integer.parseInt(request.getParameter("duration"));

                Category category = new Category(0, name, numQuestion, duration);
                boolean success = categoryDAO.addCategory(category);

                if (success) {
                    request.setAttribute("message", "Thêm category thành công");
                } else {
                    request.setAttribute("error", "Không thể thêm category. Vui lòng kiểm tra lại thông tin.");
                }

            } else if ("update".equalsIgnoreCase(action)) {
                int id = Integer.parseInt(request.getParameter("id"));
                String name = request.getParameter("name");
                int numQuestion = Integer.parseInt(request.getParameter("num_question"));
                int duration = Integer.parseInt(request.getParameter("duration"));

                Category category = new Category(id, name, numQuestion, duration);
                boolean success = categoryDAO.updateCategory(category);

                if (success) {
                    request.setAttribute("message", "Cập nhật category thành công");
                } else {
                    request.setAttribute("error", "Không thể cập nhật category. Vui lòng kiểm tra lại thông tin.");
                }
            }

            List<Category> categoryList = categoryDAO.getAllCategories();
            request.setAttribute("categoryList", categoryList);

        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Lỗi xử lý dữ liệu: " + e.getMessage());
        }

        request.getRequestDispatcher("Category/categoryList.jsp").forward(request, response);
    }
}

================
File: src/java/controller/chapter/ChapterController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.chapter;

import dal.ChapterDAO;
import dal.DAOSubject;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import model.Chapter;
import model.Subject;
import util.AuthUtil;
import util.RoleConstants;
/**
 *
 * @author Na
 */
@WebServlet(name = "ChapterController", urlPatterns = {"/chapter"})
public class ChapterController extends HttpServlet {

    private ChapterDAO chapterDAO;
    private DAOSubject subjectDAO;

    @Override
    public void init() throws ServletException {
        chapterDAO = new ChapterDAO();
        subjectDAO = new DAOSubject();
    }

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // ✅ PHÂN QUYỀN: chỉ cho phép ADMIN hoặc TEACHER
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER) && !AuthUtil.hasRole(request, RoleConstants.PARENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }

        response.setContentType("text/html;charset=UTF-8");

        String service = request.getParameter("service");
        if (service == null) {
            service = "";
        }

        try {
            switch (service) {
                case "add":
                    if (request.getMethod().equalsIgnoreCase("GET")) {
                        showAddForm(request, response);
                    } else {
                        addChapter(request, response);
                    }
                    break;
                case "edit":
                    if (request.getMethod().equalsIgnoreCase("GET")) {
                        showEditForm(request, response);
                    } else {
                        editChapter(request, response);
                    }
                    break;
                case "delete":
                    deleteChapter(request, response);
                    break;
                case "search":
                    searchChapter(request, response);
                    break;
                default:
                    listChapter(request, response);
                    break;
            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "Lỗi hệ thống: " + e.getMessage());
            request.setAttribute("listChapter", List.of());
            request.setAttribute("listSubject", List.of());
            request.setAttribute("subjectMap", new HashMap<Integer, String>());
            request.getRequestDispatcher("/chapter/listChapter.jsp").forward(request, response);
        }
    }

    private void listChapter(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, Exception {
        List<Chapter> listChapter = chapterDAO.getChapter("SELECT * FROM chapter");
        List<Subject> listSubject = subjectDAO.findAll();
        Map<Integer, String> subjectMap = loadSubjectMap();

        request.setAttribute("listChapter", listChapter != null ? listChapter : List.of());
        request.setAttribute("listSubject", listSubject != null ? listSubject : List.of());
        request.setAttribute("subjectMap", subjectMap != null ? subjectMap : new HashMap<>());
        request.getRequestDispatcher("/chapter/listChapter.jsp").forward(request, response);
    }

    private void showAddForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, Exception {
        List<Subject> listSubject = subjectDAO.findAll();
        request.setAttribute("listSubject", listSubject != null ? listSubject : List.of());
        request.getRequestDispatcher("/chapter/chapterForm.jsp").forward(request, response);
    }

    private void addChapter(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, Exception {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            String name = request.getParameter("name");
            String description = request.getParameter("description");
            int subjectId = Integer.parseInt(request.getParameter("subject_id"));

            Chapter chapter = new Chapter(id, name, description, subjectId);
            int result = chapterDAO.addChapter(chapter);
            if (result > 0) {
                response.sendRedirect("chapter");
            } else {
                request.setAttribute("errorMessage", "Không thể thêm chapter!");
                showAddForm(request, response);
            }
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Định dạng ID hoặc Subject ID không hợp lệ!");
            showAddForm(request, response);
        }
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, Exception {
        int editId = Integer.parseInt(request.getParameter("editId"));
        Chapter chapter = chapterDAO.findChapterById(editId);
        List<Subject> listSubject = subjectDAO.findAll();

        request.setAttribute("chapterToEdit", chapter);
        request.setAttribute("listSubject", listSubject != null ? listSubject : List.of());
        request.getRequestDispatcher("/chapter/chapterForm.jsp").forward(request, response);
    }

    private void editChapter(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, Exception {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            String name = request.getParameter("name");
            String description = request.getParameter("description");
            int subjectId = Integer.parseInt(request.getParameter("subject_id"));

            Chapter chapter = new Chapter(id, name, description, subjectId);
            int result = chapterDAO.editChapter(chapter);
            if (result > 0) {
                response.sendRedirect("chapter");
            } else {
                request.setAttribute("errorMessage", "Không thể cập nhật chapter!");
                showEditForm(request, response);
            }
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Định dạng ID hoặc Subject ID không hợp lệ!");
            showEditForm(request, response);
        }
    }

    private void deleteChapter(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, Exception {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            int result = chapterDAO.deleteChapter(id);
            if (result > 0) {
                request.setAttribute("message", "Xóa chapter thành công!");
            } else {
                request.setAttribute("errorMessage", "Không thể xóa chapter!");
            }
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Định dạng ID không hợp lệ!");
        }
        listChapter(request, response);
    }

    private void searchChapter(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, Exception {
        String idParam = request.getParameter("id");
        String nameParam = request.getParameter("name");
        String subjectIdParam = request.getParameter("subject_id");
        List<Subject> listSubject = subjectDAO.findAll();
        Map<Integer, String> subjectMap = loadSubjectMap();
        List<Chapter> listChapter;

        if (idParam != null && !idParam.isEmpty()) {
            try {
                int id = Integer.parseInt(idParam);
                Chapter chapter = chapterDAO.findChapterById(id);
                listChapter = chapter != null ? List.of(chapter) : List.of();
            } catch (NumberFormatException e) {
                listChapter = List.of();
                request.setAttribute("message", "ID không hợp lệ!");
            }
        } else if (nameParam != null && !nameParam.isEmpty()) {
            listChapter = chapterDAO.findChapterByName(nameParam);
        } else if (subjectIdParam != null && !subjectIdParam.isEmpty()) {
            try {
                int subjectId = Integer.parseInt(subjectIdParam);
                listChapter = chapterDAO.findChapterBySubjectId(subjectId);
            } catch (NumberFormatException e) {
                listChapter = List.of();
                request.setAttribute("message", "Subject ID không hợp lệ!");
            }
        } else {
            listChapter = List.of();
        }

        request.setAttribute("listChapter", listChapter);
        request.setAttribute("listSubject", listSubject != null ? listSubject : List.of());
        request.setAttribute("subjectMap", subjectMap != null ? subjectMap : new HashMap<>());
        request.getRequestDispatcher("/chapter/listChapter.jsp").forward(request, response);
    }

    private Map<Integer, String> loadSubjectMap() {
        Map<Integer, String> subjectMap = new HashMap<>();
        try {
            List<Subject> listSubject = subjectDAO.findAll();
            for (Subject s : listSubject) {
                subjectMap.put(s.getId(), s.getName());
            }
        } catch (Exception e) {
            // Ignore
        }
        return subjectMap;
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    public String getServletInfo() {
        return "ChapterController - for Admin and Teacher roles";
    }
}

================
File: src/java/controller/ForgotPasswordController.java
================
package controller;

import at.favre.lib.crypto.bcrypt.BCrypt;
import config.PasswordUtil;
import dal.AccountDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Properties;
import java.util.Random;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.PasswordAuthentication;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import model.Account;

/**
 *
 * @author BuiNgocLinh
 */
@WebServlet(name = "ForgotPasswordController", urlPatterns = {"/forgot-password"})
public class ForgotPasswordController extends HttpServlet {

    private final AccountDAO accountDAO = new AccountDAO();
    private final PasswordUtil passwordUtil = new PasswordUtil();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        
        if (action == null) {
            // Show forgot password form
            request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            return;
        }
        
        if ("verify".equals(action)) {
            String hashedOtp = request.getParameter("code");
            if (hashedOtp == null || hashedOtp.isEmpty()) {
                request.setAttribute("error", "Invalid verification link");
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                return;
            }
            
            // Get OTP from cookie
            String otp = getOtpFromCookie(request);
            if (otp == null) {
                request.setAttribute("error", "OTP has expired or not found");
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                return;
            }
            
            // Verify OTP hash
            if (BCrypt.verifyer().verify(otp.toCharArray(), hashedOtp).verified) {
                // OTP verified, allow password reset
                request.setAttribute("email", request.getParameter("email"));
                request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            } else {
                request.setAttribute("error", "Invalid verification code");
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            }
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        
        if (action == null) {
            // Process forgot password form
            String email = request.getParameter("email");
            StringBuilder logMessages = new StringBuilder();
            
            try {
                logMessages.append("Processing forgot password for email: " + email + "\\n");
                System.out.println("Processing forgot password for email: " + email);
                
                // Check if email exists
                boolean emailExists = accountDAO.existEmail(email);
                logMessages.append("Email exists in database: " + emailExists + "\\n");
                System.out.println("Email exists in database: " + emailExists);
                
                if (!emailExists) {
                    request.setAttribute("error", "Email not found in our system");
                    request.setAttribute("email", email);
                    request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                    return;
                }
                
                // Generate OTP
                String otp = generateOTP();
                logMessages.append("Generated OTP: " + otp + "\\n");
                System.out.println("Generated OTP: " + otp);
                
                // Store OTP in cookie with expiration time
                storeOtpInCookie(response, otp);
                logMessages.append("OTP stored in cookie\\n");
                System.out.println("OTP stored in cookie");
                
                // Hash OTP for link
                String hashedOtp = BCrypt.withDefaults().hashToString(10, otp.toCharArray());
                logMessages.append("Hashed OTP: " + hashedOtp + "\\n");
                System.out.println("Hashed OTP: " + hashedOtp);
                
                String resetLink = "";
                try {
                    // Send email with reset link
                    sendResetPasswordEmail(email, hashedOtp, request);
                    logMessages.append("Email sent successfully\\n");
                    System.out.println("Email sent successfully");
                } catch (Exception e) {
                    // Ghi log lỗi gửi email nhưng vẫn cho phép tiếp tục quy trình
                    logMessages.append("Error sending email: " + e.getMessage() + "\\n");
                    System.out.println("Error sending email: " + e.getMessage());
                    e.printStackTrace();
                    
                    // Hiển thị link trực tiếp trong console để có thể test
                    String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + 
                            request.getServerPort() + request.getContextPath();
                    resetLink = baseUrl + "/forgot-password?action=verify&code=" + hashedOtp + "&email=" + email;
                    
                    logMessages.append("============================================================\\n");
                    logMessages.append("RESET PASSWORD LINK (Copy this to your browser to test):\\n");
                    logMessages.append(resetLink + "\\n");
                    logMessages.append("============================================================\\n");
                    
                    System.out.println("============================================================");
                    System.out.println("RESET PASSWORD LINK (Copy this to your browser to test):");
                    System.out.println(resetLink);
                    System.out.println("============================================================");
                }
                
                // Thêm script để hiển thị link trong console của trình duyệt
                if (!resetLink.isEmpty()) {
                    request.setAttribute("consoleScript", 
                        "<script>\n" +
                        "console.log('============================================================');\n" +
                        "console.log('RESET PASSWORD LINK (Copy this to your browser to test):');\n" +
                        "console.log('" + resetLink + "');\n" +
                        "console.log('============================================================');\n" +
                        "console.log('" + logMessages.toString().replace("'", "\\'") + "');\n" +
                        "</script>"
                    );
                } else {
                    request.setAttribute("consoleScript", 
                        "<script>\n" +
                        "console.log('" + logMessages.toString().replace("'", "\\'") + "');\n" +
                        "</script>"
                    );
                }
                
                // Show success message
                request.setAttribute("success", "Password reset link has been sent. Please check your email or browser console for link.");
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
                
            } catch (Exception e) {
                System.out.println("Error in forgot password process: " + e.getMessage());
                logMessages.append("Error in forgot password process: " + e.getMessage() + "\\n");
                e.printStackTrace();
                
                request.setAttribute("consoleScript", 
                    "<script>\n" +
                    "console.log('" + logMessages.toString().replace("'", "\\'") + "');\n" +
                    "console.error('Error: " + e.getMessage().replace("'", "\\'") + "');\n" +
                    "</script>"
                );
                
                request.setAttribute("error", "An error occurred. Please check browser console for details.");
                request.getRequestDispatcher("forgot-password.jsp").forward(request, response);
            }
        } else if ("reset".equals(action)) {
            // Process password reset form
            String email = request.getParameter("email");
            String newPassword = request.getParameter("new_password");
            String confirmPassword = request.getParameter("confirm_password");
            
            // Validate passwords
            if (!newPassword.equals(confirmPassword)) {
                request.setAttribute("error", "Passwords do not match");
                request.setAttribute("email", email);
                request.getRequestDispatcher("reset-password.jsp").forward(request, response);
                return;
            }
            
            StringBuilder logMessages = new StringBuilder();
            try {
                logMessages.append("Processing password reset for email: " + email + "\\n");
                System.out.println("Processing password reset for email: " + email);
                
                // Get account by email
                Account account = accountDAO.selectByAccount(email);
                if (account != null) {
                    // Update password
                    account.setPassword(newPassword);
                    accountDAO.update(account);
                    logMessages.append("Password updated successfully\\n");
                    System.out.println("Password updated successfully");
                    
                    // Clear OTP cookie
                    clearOtpCookie(response);
                    logMessages.append("OTP cookie cleared\\n");
                    System.out.println("OTP cookie cleared");
                    
                    // Thêm script console log trước khi redirect
                    request.setAttribute("consoleScript", 
                        "<script>\n" +
                        "console.log('" + logMessages.toString().replace("'", "\\'") + "');\n" +
                        "setTimeout(function() { window.location.href = 'login?message=Password has been reset successfully'; }, 1000);\n" +
                        "</script>"
                    );
                    request.setAttribute("success", "Password has been reset successfully. Redirecting to login page...");
                    request.getRequestDispatcher("reset-password.jsp").forward(request, response);
                } else {
                    logMessages.append("Account not found for email: " + email + "\\n");
                    System.out.println("Account not found for email: " + email);
                    
                    request.setAttribute("consoleScript", 
                        "<script>\n" +
                        "console.log('" + logMessages.toString().replace("'", "\\'") + "');\n" +
                        "</script>"
                    );
                    
                    request.setAttribute("error", "Account not found");
                    request.getRequestDispatcher("reset-password.jsp").forward(request, response);
                }
            } catch (Exception e) {
                logMessages.append("Error in password reset process: " + e.getMessage() + "\\n");
                System.out.println("Error in password reset process: " + e.getMessage());
                e.printStackTrace();
                
                request.setAttribute("consoleScript", 
                    "<script>\n" +
                    "console.log('" + logMessages.toString().replace("'", "\\'") + "');\n" +
                    "console.error('Error: " + e.getMessage().replace("'", "\\'") + "');\n" +
                    "</script>"
                );
                
                request.setAttribute("error", "An error occurred. Please check browser console for details.");
                request.getRequestDispatcher("reset-password.jsp").forward(request, response);
            }
        }
    }
    
    private String generateOTP() {
        // Generate a 6-digit OTP
        Random random = new Random();
        int otp = 100000 + random.nextInt(900000);
        return String.valueOf(otp);
    }
    
    private void storeOtpInCookie(HttpServletResponse response, String otp) {
        // Store OTP in cookie with 15 minutes expiration
        Cookie otpCookie = new Cookie("reset_otp", otp);
        otpCookie.setMaxAge(15 * 60); // 15 minutes
        otpCookie.setHttpOnly(true); // For security
        response.addCookie(otpCookie);
    }
    
    private String getOtpFromCookie(HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if ("reset_otp".equals(cookie.getName())) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }
    
    private void clearOtpCookie(HttpServletResponse response) {
        Cookie otpCookie = new Cookie("reset_otp", "");
        otpCookie.setMaxAge(0); // Delete cookie
        response.addCookie(otpCookie);
    }
    
    private void sendResetPasswordEmail(String email, String hashedOtp, HttpServletRequest request) {
        // Cập nhật thông tin email của bạn
        final String username = "ngoclinhh29@gmail.com";
        final String password = "dzzy clae jmts huij";   // App Password bạn đã tạo
        
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");
        
        Session session = Session.getInstance(props,
            new jakarta.mail.Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });
        
        try {
            // Create reset link with hashed OTP
            String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + 
                    request.getServerPort() + request.getContextPath();
            String resetLink = baseUrl + "/forgot-password?action=verify&code=" + hashedOtp + "&email=" + email;
            
            // Create email message
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
            message.setSubject("Password Reset Request");
            
            String emailContent = "Dear User,<br><br>"
                    + "You have requested to reset your password. Please click the link below to reset your password:<br><br>"
                    + "<a href=\"" + resetLink + "\">Reset Password</a><br><br>"
                    + "This link will expire in 15 minutes.<br><br>"
                    + "If you did not request a password reset, please ignore this email.<br><br>"
                    + "Best regards,<br>"
                    + "Support Team";
            
            message.setContent(emailContent, "text/html");
            
            // Send email
            Transport.send(message);
            
        } catch (MessagingException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to send password reset email", e);
        }
    }
}

================
File: src/java/controller/grade/GradeController.java
================
package controller.grade;

import dal.GradeDAO;
import dal.AccountDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Grade;
import model.Account;

import java.io.IOException;
import java.util.List;
import util.AuthUtil;
import util.RoleConstants;

@WebServlet(name = "GradeController", urlPatterns = {"/Grade"})
public class GradeController extends HttpServlet {

    private GradeDAO gradeDAO = new GradeDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.STUDENT) && !AuthUtil.hasRole(request, RoleConstants.TEACHER) ) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");
        if (action == null) {
            action = "";
        }

        try {
            switch (action) {
                case "addForm":
                    List<Account> teachers = new AccountDAO().findAll();
                    request.setAttribute("accounts", teachers);
                    request.getRequestDispatcher("grade/addGrade.jsp").forward(request, response);
                    return;

                case "updateForm":
                    String idStr = request.getParameter("id");
                    if (idStr != null) {
                        int id = Integer.parseInt(idStr);
                        Grade grade = gradeDAO.getGradeById(id);
                        if (grade != null) {
                            request.setAttribute("grade", grade);

                            // Lấy danh sách giáo viên để đưa vào form select
                            List<Account> teacher = new AccountDAO().findAll();
                            request.setAttribute("accounts", teacher);

                            request.getRequestDispatcher("grade/updateGrade.jsp").forward(request, response);
                            return;
                        } else {
                            request.setAttribute("error", "Không tìm thấy grade với ID " + id);
                        }
                    } else {
                        request.setAttribute("error", "ID không hợp lệ");
                    }
                    break;

                case "delete":
                    String delIdStr = request.getParameter("id");
                    if (delIdStr != null) {
                        int delId = Integer.parseInt(delIdStr);
                        gradeDAO.delete(delId);
                        request.setAttribute("message", "Grade deleted successfully");
                        response.sendRedirect("Grade");
                        return;
                    } else {
                        request.setAttribute("error", "ID không hợp lệ để xóa");
                    }
                    break;

                default:
                    String name = request.getParameter("name");
                    List<Grade> gradeList;
                    if (name != null && !name.trim().isEmpty()) {
                        gradeList = gradeDAO.findByName(name.trim());
                        if (gradeList == null || gradeList.isEmpty()) {
                            request.setAttribute("error", "Không tìm thấy grade nào với tên " + name.trim());
                        }
                    } else {
                        gradeList = gradeDAO.findAllFromGrade();
                    }
                    AccountDAO acc = new AccountDAO();
                    List<Account> accounts = acc.findAll();
                    request.setAttribute("accounts", accounts);
                    request.setAttribute("gradeList", gradeList);
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Lỗi khi xử lý yêu cầu: " + e.getMessage());
        }

        request.getRequestDispatcher("grade/gradeList.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN)&&!AuthUtil.hasRole(request, RoleConstants.STUDENT) ) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");

        try {
            if ("insert".equals(action)) {
                String name = request.getParameter("name");
                String description = request.getParameter("description");

                String teacherIdStr = request.getParameter("teacher_id");
                if (teacherIdStr == null || teacherIdStr.trim().isEmpty()) {
                    request.setAttribute("error", "Bạn phải chọn giáo viên.");
                    request.getRequestDispatcher("grade/addGrade.jsp").forward(request, response);
                    return;
                }
                int teacherId = Integer.parseInt(teacherIdStr);

                Grade grade = new Grade(name, description, teacherId);
                gradeDAO.insert(grade);
                request.setAttribute("message", "Grade inserted successfully");
            } else if ("update".equals(action)) {
                int id = Integer.parseInt(request.getParameter("id"));
                String name = request.getParameter("name");
                String description = request.getParameter("description");
                int teacherId = Integer.parseInt(request.getParameter("teacher_id"));

                Grade grade = new Grade(id, name, description, teacherId);
                gradeDAO.update(grade);
                request.setAttribute("message", "Grade updated successfully");

            } else if ("delete".equals(action)) {
                int id = Integer.parseInt(request.getParameter("id"));
                gradeDAO.delete(id);
                request.setAttribute("message", "Grade deleted successfully");
            }

            // Sau khi thao tác xong, load lại danh sách grade và account
            List<Grade> gradeList = gradeDAO.findAllFromGrade();
            List<Account> accounts = new AccountDAO().findAll();

            request.setAttribute("gradeList", gradeList);
            request.setAttribute("accounts", accounts);
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Error while processing request: " + e.getMessage());
        }

        // Trả về trang danh sách
        request.getRequestDispatcher("grade/gradeList.jsp").forward(request, response);
    }
}

================
File: src/java/controller/invoice/InvoiceController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.invoice;

import dal.InvoiceDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Invoice;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import util.AuthUtil;
import util.RoleConstants;

@WebServlet(name = "InvoiceController", urlPatterns = {"/invoice"})
public class InvoiceController extends HttpServlet {

    private InvoiceDAO invoiceDAO;

    @Override
    public void init() {
        invoiceDAO = new InvoiceDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.PARENT) && !AuthUtil.hasRole(request, RoleConstants.ADMIN)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");

        if ("delete".equals(action)) {
            int id = Integer.parseInt(request.getParameter("id"));
            invoiceDAO.deleteInvoice(id);
            response.sendRedirect("invoice");
            return;
        }

        if ("create".equals(action)) {
            // Chuyển đến trang thêm hóa đơn
            request.getRequestDispatcher("Invoice/addInvoice.jsp").forward(request, response);
            return;
        }

        if ("edit".equals(action)) {
            int id = Integer.parseInt(request.getParameter("id"));
            Invoice invoice = invoiceDAO.getInvoiceById(id);
            if (invoice != null) {
                request.setAttribute("invoice", invoice);
                request.getRequestDispatcher("Invoice/editInvoice.jsp").forward(request, response);
            } else {
                // Không tìm thấy hóa đơn, chuyển về danh sách hoặc báo lỗi
                response.sendRedirect("invoice");
            }
            return;
        }

        // Mặc định hiển thị danh sách
        List<Invoice> invoices = invoiceDAO.getAllInvoices();
        request.setAttribute("invoices", invoices);
        request.getRequestDispatcher("Invoice/listInvoices.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.PARENT)) { // chỉ phụ huynh thực hiện thanh toán
            response.sendRedirect("/error.jsp");
            return;
        }
        request.setCharacterEncoding("UTF-8");
        String action = request.getParameter("action");

        String totalAmount = request.getParameter("total_amount");
        int parentId = Integer.parseInt(request.getParameter("parent_id"));
        LocalDate createdAt = LocalDate.parse(request.getParameter("created_at"));
        String status = request.getParameter("status");
        String payAtParam = request.getParameter("pay_at");
        LocalDate payAt = (payAtParam == null || payAtParam.isEmpty()) ? null : LocalDate.parse(payAtParam);

        if ("update".equals(action)) {
            int id = Integer.parseInt(request.getParameter("id"));
            Invoice invoice = new Invoice(id, totalAmount, parentId, createdAt, status, payAt);
            invoiceDAO.updateInvoice(invoice);
        } else if ("insert".equals(action)) {
            Invoice invoice = new Invoice(0, totalAmount, parentId, createdAt, status, payAt);
            invoiceDAO.insertInvoice(invoice);
        }

        response.sendRedirect("invoice");
    }
}

================
File: src/java/controller/lesson/LessonController.java
================
package controller.lesson;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import model.Lesson;
import dal.LessonDAO;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Chapter;
import dal.ChapterDAO;
import service.VideoService;
import util.AuthUtil;
import util.RoleConstants;
import jakarta.servlet.annotation.WebServlet;
@WebServlet("/LessonURL")
@MultipartConfig(
    fileSizeThreshold = 10 * 1024 * 1024, // 10MB
    maxFileSize = 100 * 1024 * 1024,      // 100MB
    maxRequestSize = 200 * 1024 * 1024    // 200MB
)
public class LessonController extends HttpServlet {

    private static final Logger logger = Logger.getLogger(LessonController.class.getName());
    private LessonDAO lessonDAO = new LessonDAO();
    private VideoService videoService;
    
    @Override
    public void init() throws ServletException {
        try {
            videoService = new VideoService(getServletContext());
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Không thể khởi tạo VideoService", e);
            throw new ServletException("Không thể khởi tạo VideoService", e);
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER) && !AuthUtil.hasRole(request, RoleConstants.STUDENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");
        if (action == null) {
            action = "";
        }

        try {
            switch (action) {
                case "addForm":
                    List<Chapter> chapterName = new ChapterDAO().getChapter("select * from chapter");
                    request.setAttribute("chapterName", chapterName);
                    request.getRequestDispatcher("lesson/addLesson.jsp").forward(request, response);
                    return;

                case "updateForm":
                    String idStr = request.getParameter("id");
                    if (idStr != null) {
                        int id = Integer.parseInt(idStr);
                        Lesson lesson = lessonDAO.getLessonById(id);
                        if (lesson != null) {
                            List<Chapter> chapter = new ChapterDAO().getChapter("select * from chapter");
                            request.setAttribute("chapter", chapter);
                            request.setAttribute("lesson", lesson);
                            request.getRequestDispatcher("lesson/updateLesson.jsp").forward(request, response);
                            return;
                        } else {
                            request.setAttribute("error", "Không tìm thấy lesson với ID " + id);
                        }
                    } else {
                        request.setAttribute("error", "ID không hợp lệ");
                    }
                    break;
                    
                case "view":
                    String viewIdStr = request.getParameter("id");
                    if (viewIdStr != null) {
                        int viewId = Integer.parseInt(viewIdStr);
                        Lesson lesson = lessonDAO.getLessonById(viewId);
                        if (lesson != null) {
                            request.setAttribute("lesson", lesson);
                            request.getRequestDispatcher("lesson/viewLesson.jsp").forward(request, response);
                            return;
                        } else {
                            request.setAttribute("error", "Không tìm thấy bài học với ID " + viewId);
                        }
                    }
                    break;

                case "delete":
                    String delIdStr = request.getParameter("id");
                    if (delIdStr != null) {
                        int delId = Integer.parseInt(delIdStr);
                        // Lấy thông tin lesson trước khi xóa để xóa video
                        Lesson lessonToDelete = lessonDAO.getLessonById(delId);
                        if (lessonToDelete != null && lessonToDelete.getVideo_link() != null && !lessonToDelete.getVideo_link().isEmpty()) {
                            try {
                                // Xóa video trên cloud storage
                                videoService.deleteOldVideo(lessonToDelete.getVideo_link());
                            } catch (Exception e) {
                                logger.log(Level.WARNING, "Không thể xóa video khi xóa bài học", e);
                            }
                        }
                        lessonDAO.deleteLesson(delId);
                        response.sendRedirect("LessonURL");
                        return;
                    } else {
                        request.setAttribute("error", "ID không hợp lệ để xóa");
                    }
                    break;

                default:
                    String name = request.getParameter("name");
                    List<Lesson> lessonList;
                    if (name != null && !name.trim().isEmpty()) {
                        lessonList = lessonDAO.searchByName(name.trim());
                        if (lessonList == null || lessonList.isEmpty()) {
                            request.setAttribute("error", "Không tìm thấy bài học nào với tên: " + name);
                        }
                    } else {
                        lessonList = lessonDAO.getAllLessons();
                    }
                    request.setAttribute("lessonList", lessonList);
                    List<Chapter> chapter = new ChapterDAO().getChapter("select * from chapter");
                    request.setAttribute("chapter", chapter);
                    break;
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Lỗi xử lý GET request", e);
            request.setAttribute("error", "Lỗi xử lý yêu cầu: " + e.getMessage());
        }

        request.getRequestDispatcher("lesson/lessonList.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER)&& !AuthUtil.hasRole(request, RoleConstants.STUDENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        
        request.setCharacterEncoding("UTF-8");
        String action = request.getParameter("action");

        try {
            if ("insert".equals(action)) {
                // Đọc các tham số từ form
                String name = request.getParameter("name");
                String content = request.getParameter("content");
                int chapterId = Integer.parseInt(request.getParameter("chapter_id"));
                
                // Tạo đối tượng Lesson mới
                Lesson lesson = new Lesson(0, name, content, chapterId, "");
                
                // Xử lý nếu có file video
                Part videoPart = request.getPart("video_file");
                if (videoPart != null && videoPart.getSize() > 0) {
                    String videoUrl = videoService.uploadAndUpdateLesson(videoPart, lesson);
                    lesson.setVideo_link(videoUrl);
                }
                
                // Lưu bài học vào database
                lessonDAO.addLesson(lesson);
                request.setAttribute("message", "Thêm bài học thành công");

            } else if ("update".equals(action)) {
                int id = Integer.parseInt(request.getParameter("id"));
                String name = request.getParameter("name");
                String content = request.getParameter("content");
                int chapterId = Integer.parseInt(request.getParameter("chapter_id"));
                
                // Lấy thông tin bài học hiện tại
                Lesson currentLesson = lessonDAO.getLessonById(id);
                String currentVideoLink = currentLesson != null ? currentLesson.getVideo_link() : "";
                
                // Tạo đối tượng Lesson mới với thông tin cập nhật
                Lesson lesson = new Lesson(id, name, content, chapterId, currentVideoLink);
                
                // Xử lý nếu có file video mới
                Part videoPart = request.getPart("video_file");
                if (videoPart != null && videoPart.getSize() > 0) {
                    String videoUrl = videoService.uploadAndUpdateLesson(videoPart, lesson);
                    lesson.setVideo_link(videoUrl);
                }
                
                // Cập nhật bài học vào database
                lessonDAO.updateLesson(lesson);
                request.setAttribute("message", "Cập nhật bài học thành công");

            } else if ("delete".equals(action)) {
                int id = Integer.parseInt(request.getParameter("id"));
                // Lấy thông tin lesson trước khi xóa để xóa video
                Lesson lessonToDelete = lessonDAO.getLessonById(id);
                if (lessonToDelete != null && lessonToDelete.getVideo_link() != null && !lessonToDelete.getVideo_link().isEmpty()) {
                    try {
                        // Xóa video trên cloud storage
                        videoService.deleteOldVideo(lessonToDelete.getVideo_link());
                    } catch (Exception e) {
                        logger.log(Level.WARNING, "Không thể xóa video khi xóa bài học", e);
                    }
                }
                lessonDAO.deleteLesson(id);
                request.setAttribute("message", "Xóa bài học thành công");
            }

            List<Lesson> lessonList = lessonDAO.getAllLessons();
            request.setAttribute("lessonList", lessonList);
            List<Chapter> chapter = new ChapterDAO().getChapter("select * from chapter");
            request.setAttribute("chapter", chapter);

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Lỗi xử lý POST request", e);
            request.setAttribute("error", "Lỗi xử lý POST: " + e.getMessage());
        }

        request.getRequestDispatcher("lesson/lessonList.jsp").forward(request, response);
    }
}

================
File: src/java/controller/LoginController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import dal.AccountDAO;
import dal.StudentDAO;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Account;
import model.Student;

/**
 *
 * @author BuiNgocLinh
 */
@WebServlet(name = "LoginController", urlPatterns = {"/login"})
public class LoginController extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
//    @Override
//    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
//        req.getRequestDispatcher("login.jsp").forward(req, resp);
//    }
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.invalidate();
        }

        loadCookies(request);
        request.getRequestDispatcher("login.jsp").forward(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String userType = request.getParameter("userType");
        String email = request.getParameter("email");
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String remember = request.getParameter("remember_me");

        handleCookies(response, email, password, remember, userType);
        handleLogin(request, response, userType, email, username, password);
    }

    private void handleCookies(HttpServletResponse response, String email, String password, String remember, String userType) {
        Cookie[] cookies = {
            new Cookie("email", email),
            new Cookie("password", password),
            new Cookie("remember", remember),
            new Cookie("userType", userType)
        };

        int maxAge = (remember != null) ? 60 * 60 * 24 * 365 : 0; // 1 năm nếu remember được chọn, ngược lại xóa cookie
        for (Cookie cookie : cookies) {
            cookie.setMaxAge(maxAge);
            response.addCookie(cookie);
        }
    }

    private void loadCookies(HttpServletRequest request) {
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            switch (cookie.getName()) {
                case "email":
                    request.setAttribute("email", cookie.getValue());
                    break;
                case "username":
                    request.setAttribute("username", cookie.getValue());
                    break;
                case "password":
                    request.setAttribute("password", cookie.getValue());
                    break;
                case "remember":
                    request.setAttribute("remember", cookie.getValue());
                    break;
                case "userType":
                    request.setAttribute("userType", cookie.getValue());
                    break;
            }
        }
    }
}

    private void handleLogin(HttpServletRequest request, HttpServletResponse response, String userType, String email, String username, String password)
            throws ServletException, IOException {
        AccountDAO accountDAO = new AccountDAO();
        StudentDAO studentDAO = new StudentDAO();
        HttpSession session = request.getSession();
        session.setMaxInactiveInterval(600);

        if ("admin".equalsIgnoreCase(userType)
                || "teacher".equalsIgnoreCase(userType)
                || "parent".equalsIgnoreCase(userType)) {
            Account account = accountDAO.checkLogin(email, password);
            if (account != null && account.getRole().equalsIgnoreCase(userType)) {
                session.setAttribute("account", account);
                session.setAttribute("role", account.getRole());

//                if (password.length() == 5) {
//                    response.sendRedirect(request.getContextPath() + "/changePassword");
//                    return;
//                }

                redirectBasedOnRole(response, request, account.getRole());
                return;
            }
        } else if ("student".equalsIgnoreCase(userType)) {
            Student student = studentDAO.checkLogin(username, password);
            if (student != null) {
                session.setAttribute("student", student);
                session.setAttribute("role", "student");

//                if (password.length() == 5) {
//                    response.sendRedirect(request.getContextPath() + "/changePassword");
//                    return;
//                }

                redirectBasedOnRole(response, request, "student");
                return;
            }
        }

        handleLoginFailure(request, response, userType, email, password);
    }

    private void redirectBasedOnRole(HttpServletResponse response, HttpServletRequest request, String role) throws IOException {
        switch (role) {
            case "admin":
                redirectToPage(response, request, "/admin");
                break;
            case "teacher":
                redirectToPage(response, request, "/teacher/home.jsp");
                break;
            case "parent":
                redirectToPage(response, request, "/parent/home.jsp");
                break;
            case "student":
                redirectToPage(response, request, "/student/home.jsp");
                break;
            default:
                redirectToPage(response, request, "error-403");
                break;
        }
    }

    private void redirectToPage(HttpServletResponse response, HttpServletRequest request, String page) throws IOException {
        response.sendRedirect(request.getContextPath() + page);
    }

    private void handleLoginFailure(HttpServletRequest request, HttpServletResponse response, String userType, String email, String password)
            throws ServletException, IOException {
        request.setAttribute("userType", userType);
        request.setAttribute("email", email);
        request.setAttribute("password", password);
        request.setAttribute("error", "Email or Password fail");
        request.getRequestDispatcher("login.jsp").forward(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}

================
File: src/java/controller/LoginGoogleController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import config.GoogleLogin;
import dal.AccountDAO;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Account;
import model.GoogleAccount;

/**
 *
 * @author BuiNgocLinh
 */
@WebServlet(name = "LoginGoogleController", urlPatterns = {"/logingoogle"})
public class LoginGoogleController extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet LoginGoogle</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet LoginGoogle at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String code = request.getParameter("code");
        String accessToken = GoogleLogin.getToken(code);
        GoogleAccount account = GoogleLogin.getUserInfo(accessToken);
        String email = null;
        if (account != null) {
            email = account.getEmail();
        }
        if (account != null) {
            AccountDAO accountDAO = new AccountDAO();
            if (accountDAO.existEmail(email)) {
                Account account1 = accountDAO.selectByAccount(email);
                if (account1.getStatus().equalsIgnoreCase("ACTIVE")) {
                    request.getSession().setAttribute("account", account1);
                    redirectBasedOnRole(response, request, account1.getRole());
                }
            } else {
                request.setAttribute("error", "Email or Account not exist!");
                request.getRequestDispatcher("login").forward(request, response);
            }
        }
    }

    private void redirectBasedOnRole(HttpServletResponse response, HttpServletRequest request, String role) throws IOException {
        switch (role) {
            case "admin":
                redirectToPage(response, request, "/admin");
                break;
            case "teacher":
                redirectToPage(response, request, "/teacher/home.jsp");
                break;
            case "parent":
                redirectToPage(response, request, "/parent/home.jsp");
                break;
//            case "student":
//                redirectToPage(response, request, "/student/home.jsp");
//                break;
            default:
                redirectToPage(response, request, "error-403");
                break;
        }
    }

    private void redirectToPage(HttpServletResponse response, HttpServletRequest request, String page) throws IOException {
        response.sendRedirect(request.getContextPath() + page);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}

================
File: src/java/controller/LogoutController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */

package controller;

import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 *
 * @author ADMIN
 */
@WebServlet(name="LogoutController", urlPatterns={"/logout"})
public class LogoutController extends HttpServlet {
   
    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        
    } 

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        // huy session
        request.getSession().invalidate();
        // quay lai trang login hoac home
        response.sendRedirect("index.html");
    } 

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}

================
File: src/java/controller/packagesubject/PackageSubjectController.java
================
package controller.PackageSubject;

import dal.PackageSubjectDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.PackageSubject;
import java.io.IOException;
import java.util.List;
import model.Subject;
import dal.DAOSubject;

@WebServlet(name = "PackageSubjectController", urlPatterns = {"/packageSubjectURL"})
public class PackageSubjectController extends HttpServlet {

    private final PackageSubjectDAO dao = new PackageSubjectDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) action = "";

        try {
            switch (action) {
                case "addForm":
                    List<Subject> subjectName = new DAOSubject().findAll();
                    request.setAttribute("subjectName", subjectName);
                    request.getRequestDispatcher("PackageSubject/addPackageSubject.jsp").forward(request, response);
                    return;

                case "updateForm":
                    int oldPackageId = Integer.parseInt(request.getParameter("package_id"));
                    int oldSubjectId = Integer.parseInt(request.getParameter("subject_id"));
                    PackageSubject ps = dao.getById(oldPackageId, oldSubjectId);
                    if (ps != null) {
                        List<Subject> subject = new DAOSubject().findAll();
                         request.setAttribute("subject", subject);
                        request.setAttribute("ps", ps);
                        request.getRequestDispatcher("PackageSubject/updatePackageSubject.jsp").forward(request, response);
                        return;
                    } else {
                        request.setAttribute("error", "Không tìm thấy bản ghi phù hợp");
                    }
                    break;

                case "delete":
                    int delPackageId = Integer.parseInt(request.getParameter("package_id"));
                    int delSubjectId = Integer.parseInt(request.getParameter("subject_id"));
                    dao.delete(delPackageId, delSubjectId);
                    response.sendRedirect("packageSubjectURL");
                    return;

                default:
                    // load danh sách mặc định
                    List<PackageSubject> list = dao.getAll();
                    request.setAttribute("list", list);
                    DAOSubject subject = new DAOSubject();
                    List<Subject> sub = subject.findAll();
                    request.setAttribute("subject", sub);
                    break;
            }

        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Lỗi xử lý: " + e.getMessage());
        }

        request.getRequestDispatcher("PackageSubject/listPackageSubject.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String action = request.getParameter("action");

        try {
            if ("insert".equals(action)) {
                int packageId = Integer.parseInt(request.getParameter("package_id"));
                int subjectId = Integer.parseInt(request.getParameter("subject_id"));
                PackageSubject ps = new PackageSubject(packageId, subjectId);
                dao.insert(ps);
                request.setAttribute("message", "Thêm mới thành công");

            } else if ("update".equals(action)) {
                int oldPackageId = Integer.parseInt(request.getParameter("old_package_id"));
                int oldSubjectId = Integer.parseInt(request.getParameter("old_subject_id"));
                int newPackageId = Integer.parseInt(request.getParameter("package_id"));
                int newSubjectId = Integer.parseInt(request.getParameter("subject_id"));
                PackageSubject updated = new PackageSubject(newPackageId, newSubjectId);
                dao.update(updated, oldPackageId, oldSubjectId);
                request.setAttribute("message", "Cập nhật thành công");

            } else if ("delete".equals(action)) {
                int packageId = Integer.parseInt(request.getParameter("package_id"));
                int subjectId = Integer.parseInt(request.getParameter("subject_id"));
                dao.delete(packageId, subjectId);
                request.setAttribute("message", "Xóa thành công");
            }

            // Load lại danh sách sau thao tác
            List<PackageSubject> list = dao.getAll();
            request.setAttribute("list", list);
            List<Subject> subject = new DAOSubject().findAll();
            request.setAttribute("subject", subject);

        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Lỗi xử lý: " + e.getMessage());
        }

        request.getRequestDispatcher("PackageSubject/listPackageSubject.jsp").forward(request, response);
    }
}

================
File: src/java/controller/ParentController.java
================
package controller;

import dal.AccountDAO;
import dal.GradeDAO;
import dal.ImageDAO;
import dal.StudentDAO;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Account;
import model.Grade;
import model.Image;
import model.Student;
import util.AuthUtil;
import util.RoleConstants;

@WebServlet("/parent")
public class ParentController extends HttpServlet {
    
    private StudentDAO studentDAO = new StudentDAO();
    private AccountDAO accountDAO = new AccountDAO();
    private GradeDAO gradeDAO = new GradeDAO();
    private ImageDAO imageDAO = new ImageDAO(accountDAO.getConnection());
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Check if user is parent
        if (!AuthUtil.hasRole(request, RoleConstants.PARENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        
        String action = request.getParameter("action");
        
        if (action == null) {
            action = "myChildren";
        }
        
        try {
            switch (action) {
                case "myChildren":
                    showMyChildren(request, response);
                    break;
                default:
                    showMyChildren(request, response);
                    break;
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }
    }
    
    private void showMyChildren(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        
        HttpSession session = request.getSession();
        Account parent = (Account) session.getAttribute("account");
        
        if (parent == null) {
            response.sendRedirect("/login");
            return;
        }
        
        // Get children of this parent
        List<Student> children = studentDAO.getStudentsByParentId(parent.getId());
        
        // Get supporting data
        List<Grade> gradeList = gradeDAO.findAllFromGrade();
        List<Image> imageList = imageDAO.findAll();
        
        // Set attributes
        request.setAttribute("children", children);
        request.setAttribute("gradeList", gradeList);
        request.setAttribute("imageList", imageList);
        request.setAttribute("parent", parent);
        
        // Forward to JSP
        request.getRequestDispatcher("/parent/myChildren.jsp").forward(request, response);
    }
}

================
File: src/java/controller/question/QuestionController.java
================
package controller.question;

import dal.ImageDAO;
import dal.QuestionDAO;
import dal.LessonDAO;
import dal.QuestionOptionDAO;
import dal.TestQuestionDAO;
import dal.QuestionRecordDAO;
import model.Question;
import model.Lesson;
import model.Image;
import model.QuestionOption;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;

import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;
import java.util.List;
import util.AuthUtil;
import util.RoleConstants;

@MultipartConfig
@WebServlet(name = "QuestionController", urlPatterns = {"/Question"})
public class QuestionController extends HttpServlet {

    private QuestionDAO questionDAO = new QuestionDAO();
    private ImageDAO imageDAO = new ImageDAO(questionDAO.getDBConnection());
    private QuestionOptionDAO questionOptionDAO = new QuestionOptionDAO();
    private TestQuestionDAO testQuestionDAO = new TestQuestionDAO();
    private QuestionRecordDAO questionRecordDAO = new QuestionRecordDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER)&& !AuthUtil.hasRole(request, RoleConstants.STUDENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");
        if (action == null) {
            action = "";
        }

        try {
            switch (action) {
                case "addForm":
                    LessonDAO lessonDAO = new LessonDAO();
                    List<Lesson> lessonList = lessonDAO.getAllLessons();
                    request.setAttribute("les", lessonList);
                    request.getRequestDispatcher("question/addQuestion.jsp").forward(request, response);
                    return;

                case "updateForm":
                    String idStr = request.getParameter("id");
                    if (idStr != null) {
                        int id = Integer.parseInt(idStr);
                        Question question = questionDAO.getQuestionById(id);

                        LessonDAO lessonDAO2 = new LessonDAO();
                        List<Lesson> lessonList2 = lessonDAO2.getAllLessons();
                        List<QuestionOption> options = questionOptionDAO.getOptionsByQuestion(id);

                        request.setAttribute("question", question);
                        request.setAttribute("les", lessonList2);
                        request.setAttribute("options", options);
                        request.getRequestDispatcher("question/updateQuestion.jsp").forward(request, response);
                        return;
                    }
                    break;

                case "delete":
                    int delId = Integer.parseInt(request.getParameter("id"));
                    questionRecordDAO.deleteByQuestionId(delId);
                    testQuestionDAO.removeQuestionFromAllTests(delId);
                    questionOptionDAO.deleteOptionsByQuestion(delId);
                    questionDAO.delete(delId);
                    response.sendRedirect("Question");
                    return;

                default:
                    String keyword = request.getParameter("question");
                    List<Question> list;
                    if (keyword != null && !keyword.trim().isEmpty()) {
                        list = questionDAO.findByQuestion(keyword.trim());
                    } else {
                        list = questionDAO.findAllQuestion();
                    }

                    LessonDAO dao = new LessonDAO();
                    List<Lesson> les = dao.getAllLessons();
                    request.setAttribute("les", les);
                    request.setAttribute("questionList", list);

                    try {
                        List<Image> images = imageDAO.findAll();
                        request.setAttribute("images", images);
                    } catch (Exception e) {
                        e.printStackTrace();
                        request.setAttribute("imageError", "Lỗi khi tải dữ liệu ảnh: " + e.getMessage());
                    }
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Error: " + e.getMessage());
        }

        request.getRequestDispatcher("question/questionList.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
       if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER)&& !AuthUtil.hasRole(request, RoleConstants.STUDENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        request.setCharacterEncoding("UTF-8");
        String action = request.getParameter("action");

        try {
            String questionText = request.getParameter("question");
            int lesson_id = 0;
            String lessonIdStr = request.getParameter("lesson_id");
            if (lessonIdStr != null && !lessonIdStr.isEmpty()) {
                lesson_id = Integer.parseInt(lessonIdStr);
            }

            int image_id = 0;
            Part imagePart = request.getPart("image_file");
            if (imagePart != null && imagePart.getSize() > 0) {
                InputStream inputStream = imagePart.getInputStream();
                byte[] imageBytes = inputStream.readAllBytes();
                String base64Image = Base64.getEncoder().encodeToString(imageBytes);
                Image img = new Image();
                img.setImage_data(base64Image);
                image_id = imageDAO.insertImage(img);
            }

            String questionType = request.getParameter("question_type");
            if (questionType == null || (!questionType.equals("SINGLE") && !questionType.equals("MULTIPLE"))) {
                questionType = "SINGLE";
            }

            if ("insert".equals(action)) {
                Question q = new Question(questionText, image_id, lesson_id, questionType);
                questionDAO.insert(q);
                int questionId = questionDAO.findAllQuestion().get(questionDAO.findAllQuestion().size() - 1).getId();
                String[] optionContents = request.getParameterValues("optionContent");
                boolean[] correctArr;
                if ("SINGLE".equals(questionType)) {
                    int correctIndex = -1;
                    String correctOption = request.getParameter("correctOption");
                    if (correctOption != null) correctIndex = Integer.parseInt(correctOption);
                    correctArr = new boolean[optionContents.length];
                    for (int i = 0; i < correctArr.length; i++) correctArr[i] = (i == correctIndex);
                } else {
                    correctArr = new boolean[optionContents.length];
                    for (int i = 0; i < correctArr.length; i++) {
                        String val = request.getParameter("correctOption" + i);
                        correctArr[i] = (val != null && val.equals("true"));
                    }
                }
                for (int i = 0; i < optionContents.length; i++) {
                    QuestionOption opt = new QuestionOption();
                    opt.setQuestion_id(questionId);
                    opt.setContent(optionContents[i]);
                    opt.setIs_correct(correctArr[i]);
                    questionOptionDAO.insertOption(opt);
                }
            } else if ("update".equals(action)) {
                int id = Integer.parseInt(request.getParameter("id"));
                Question q = new Question(id, questionText, image_id, lesson_id, questionType);
                questionDAO.update(q);
                questionOptionDAO.deleteOptionsByQuestion(id);
                String[] optionContents = request.getParameterValues("optionContent");
                boolean[] correctArr;
                if ("SINGLE".equals(questionType)) {
                    int correctIndex = -1;
                    String correctOption = request.getParameter("correctOption");
                    if (correctOption != null) correctIndex = Integer.parseInt(correctOption);
                    correctArr = new boolean[optionContents.length];
                    for (int i = 0; i < correctArr.length; i++) correctArr[i] = (i == correctIndex);
                } else {
                    correctArr = new boolean[optionContents.length];
                    for (int i = 0; i < correctArr.length; i++) {
                        String val = request.getParameter("correctOption" + i);
                        correctArr[i] = (val != null && val.equals("true"));
                    }
                }
                for (int i = 0; i < optionContents.length; i++) {
                    QuestionOption opt = new QuestionOption();
                    opt.setQuestion_id(id);
                    opt.setContent(optionContents[i]);
                    opt.setIs_correct(correctArr[i]);
                    questionOptionDAO.insertOption(opt);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Error while processing request: " + e.getMessage());
        }

        response.sendRedirect("Question");
    }
}

================
File: src/java/controller/student/StudentController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.student;

import dal.AccountDAO;
import dal.GradeDAO;
import dal.ImageDAO;
import dal.StudentDAO;
import config.FileUploadUlti;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Account;
import model.Grade;
import model.Image;
import model.Student;
import util.AuthUtil;
import util.RoleConstants;

/**
 *
 * @author BuiNgocLinh
 */
@MultipartConfig
@WebServlet(name = "StudentController", urlPatterns = {"/student"})

public class StudentController extends HttpServlet {

    private StudentDAO studentDAO = new StudentDAO();
    private AccountDAO accountDAO = new AccountDAO();
    private GradeDAO gradeDAO = new GradeDAO();
    private ImageDAO ImageDAO = new ImageDAO(accountDAO.getConnection());

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) 
                && !AuthUtil.hasRole(request, RoleConstants.TEACHER) 
                && !AuthUtil.hasRole(request, RoleConstants.STUDENT)
                && !AuthUtil.hasRole(request, RoleConstants.PARENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");

        if (action == null) {
            action = "list";
        }

        try {
            switch (action) {
                case "viewProfile":
                    viewProfile(request, response);
                    break;
                case "search":
                    searchStudents(request, response);
                    break;
                case "create":
                    showCreateForm(request, response);
                    break;
                case "edit":
                    showEditForm(request, response);
                    break;
                case "delete":
                    deleteStudent(request, response);
                    break;
                default:
                    listStudents(request, response);
                    break;
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) 
                && !AuthUtil.hasRole(request, RoleConstants.TEACHER) 
                && !AuthUtil.hasRole(request, RoleConstants.STUDENT)
                && !AuthUtil.hasRole(request, RoleConstants.PARENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");

        try {
            switch (action) {
                case "create":
                    insertStudent(request, response);
                    break;
                case "edit":
                    updateStudent(request, response);
                    break;
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }
    }

    private void listStudents(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        int page = 1;
        int recordsPerPage = 5;

        String pageParam = request.getParameter("page");
        if (pageParam != null) {
            try {
                page = Integer.parseInt(pageParam);
            } catch (NumberFormatException e) {
                page = 1;
            }
        }

        int offset = (page - 1) * recordsPerPage;
        List<Account> accList = accountDAO.findAll();
        List<Student> list = studentDAO.getStudentsByPage(offset, recordsPerPage);
        int totalRecords = studentDAO.countStudents();
        int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage);
        List<Grade> gradeList = gradeDAO.findAllFromGrade();
        List<Image> imageList = ImageDAO.findAll();

        request.setAttribute("students", list);
        request.setAttribute("accList", accList);
        request.setAttribute("currentPage", page);
        request.setAttribute("totalPages", totalPages);
        request.setAttribute("gradeList", gradeList);
        request.setAttribute("imageList", imageList);
        request.getRequestDispatcher("/student/list.jsp").forward(request, response);
    }

    private void showCreateForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, SQLException {
        List<Grade> gradeList = gradeDAO.findAllFromGrade();
        List<Account> accList = accountDAO.findAll();
        request.setAttribute("gradeList", gradeList);
        request.setAttribute("accList", accList);
        request.getRequestDispatcher("/student/form.jsp").forward(request, response);
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        List<Grade> gradeList = gradeDAO.findAllFromGrade();
        List<Account> accList = accountDAO.findAll();
        int id = Integer.parseInt(request.getParameter("id"));
        Student student = studentDAO.findById(id);
        Image image = ImageDAO.findImageById(student.getImage_id());
        request.setAttribute("student", student);
        request.setAttribute("image", image);
        request.setAttribute("gradeList", gradeList);
        request.setAttribute("accList", accList);

        request.getRequestDispatcher("/student/form.jsp").forward(request, response);
    }

    private void insertStudent(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {

        Student student = getStudentFromRequest(request);
        String avatarName = "avatar_" + System.currentTimeMillis();

        String imgURL = FileUploadUlti.uploadAvatarImage(request, avatarName);

        if (imgURL != null) {
            Image image = new Image();
            image.setImage_data(imgURL);

            ImageDAO imageDAO = new ImageDAO(studentDAO.getConnection());
            int imageId = imageDAO.insertImage(image);
            if (imageId > 0) {
                student.setImage_id(imageId);
            }
        }
        studentDAO.insert(student);
        response.sendRedirect("student");
    }

    private void updateStudent(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {

        Student student = getStudentFromRequest(request);
        String avatarName = "avatar_" + System.currentTimeMillis();
        String imgURL = FileUploadUlti.uploadAvatarImage(request, avatarName);

        if (imgURL != null) {
            Image image = new Image();
            image.setImage_data(imgURL);

            ImageDAO imageDAO = new ImageDAO(studentDAO.getConnection());
            int imageId = imageDAO.insertImage(image);
            if (imageId > 0) {
                student.setImage_id(imageId);
            }
        } else {
            Student oldStudent = studentDAO.findById(student.getId());
            student.setImage_id(oldStudent.getImage_id());
        }
        studentDAO.update(student);
        response.sendRedirect("student");
    }

    private void deleteStudent(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        studentDAO.delete(id);
        response.sendRedirect("student");
    }

    private void searchStudents(HttpServletRequest request, HttpServletResponse response)
            throws SQLException, ServletException, IOException {
        String keyword = request.getParameter("keyword");
        if (keyword == null) {
            keyword = "";
        }
        List<Student> list = studentDAO.searchByKeyword(keyword);
        List<Account> accList = accountDAO.findAll();
        List<Grade> gradeList = gradeDAO.findAllFromGrade();
        List<Image> imageList = ImageDAO.findAll();

        request.setAttribute("students", list);
        request.setAttribute("accList", accList);
        request.setAttribute("gradeList", gradeList);
        request.setAttribute("imageList", imageList);
        request.setAttribute("keyword", keyword);

        request.getRequestDispatcher("/student/list.jsp").forward(request, response);
    }

    private Student getStudentFromRequest(HttpServletRequest request) {
        int id = 0;
        if (request.getParameter("id") != null)  {
            id = Integer.parseInt(request.getParameter("id"));
        }
        int gradeId = Integer.parseInt(request.getParameter("grade_id"));
        int parentId = Integer.parseInt(request.getParameter("parent_id"));
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String fullName = request.getParameter("full_name");
        LocalDate dob = LocalDate.parse(request.getParameter("dob"));
        boolean sex = Boolean.parseBoolean(request.getParameter("sex"));

        String imageIdParam = request.getParameter("image_id");
        int imageId = (imageIdParam == null || imageIdParam.isEmpty()) ? 0 : Integer.parseInt(imageIdParam);

        return new Student(id, gradeId, parentId, username, password, fullName, dob, sex, imageId);
    }

    private void viewProfile(HttpServletRequest request, HttpServletResponse response) throws SQLException, ServletException, IOException {
        List<Image> imageList = ImageDAO.findAll();
        List<Account> accList = accountDAO.findAll();
        List<Grade> gradeList = gradeDAO.findAllFromGrade();
        int id = Integer.parseInt(request.getParameter("id"));
        Student studentView = studentDAO.findById(id);
        request.setAttribute("accList", accList);
        request.setAttribute("gradeList", gradeList);
        request.setAttribute("imageList", imageList);
        request.setAttribute("view", studentView);
        request.getRequestDispatcher("student/viewProfile.jsp").forward(request, response);
    }

}

================
File: src/java/controller/student/TakeTestController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.student;

import dal.*;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.*;
import util.AuthUtil;
import util.RoleConstants;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author Na
 */

@WebServlet("/student/taketest")
public class TakeTestController extends HttpServlet {
    private TestDAO testDAO;
    private TestRecordDAO testRecordDAO;
    private QuestionDAO questionDAO;
    private QuestionOptionDAO questionOptionDAO;
    private QuestionRecordDAO questionRecordDAO;
    private CategoryDAO categoryDAO;

    @Override
    public void init() {
        testDAO = new TestDAO();
        testRecordDAO = new TestRecordDAO();
        questionDAO = new QuestionDAO();
        questionOptionDAO = new QuestionOptionDAO();
        questionRecordDAO = new QuestionRecordDAO();
        categoryDAO = new CategoryDAO();
        
        // Khởi tạo dữ liệu test nếu cần
        questionRecordDAO.initializeTestDataIfNeeded();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.STUDENT)) {
            response.sendRedirect("/login.jsp");
            return;
        }

        String action = request.getParameter("action");
        if (action == null) {
            showTestList(request, response);
        } else {
            switch (action) {
                case "start":
                    startTest(request, response);
                    break;
                case "question":
                    showAllQuestions(request, response);
                    break;
                case "result":
                    showResult(request, response);
                    break;
                case "history":
                    showHistory(request, response);
                    break;
                case "finish":
                    finishTest(request, response);
                    break;
                default:
                    showTestList(request, response);
                    break;
            }
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.STUDENT)) {
            response.sendRedirect("/login.jsp");
            return;
        }

        String action = request.getParameter("action");
        if ("submit".equals(action)) {
            submitAllAnswers(request, response);
        } else if ("finish".equals(action)) {
            finishTest(request, response);
        }
    }

    private void showTestList(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            HttpSession session = request.getSession();
            Student student = (Student) session.getAttribute("student");
            
            if (student == null) {
                response.sendRedirect("/login.jsp");
                return;
            }

            List<Test> practiceTests = testDAO.getTestsByType(true);
            List<Test> officialTests = testDAO.getTestsByType(false);
            Map<Integer, String> categoryMap = getCategoryMap();

            // Check which official tests student has already taken
            Map<Integer, Boolean> takenTests = new HashMap<>();
            for (Test test : officialTests) {
                boolean hasTaken = testRecordDAO.hasStudentTakenTest(student.getId(), test.getId());
                takenTests.put(test.getId(), hasTaken);
            }

            request.setAttribute("practiceTests", practiceTests);
            request.setAttribute("officialTests", officialTests);
            request.setAttribute("categoryMap", categoryMap);
            request.setAttribute("takenTests", takenTests);

            RequestDispatcher dispatcher = request.getRequestDispatcher("/student/testList.jsp");
            dispatcher.forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Có lỗi xảy ra: " + e.getMessage());
            RequestDispatcher dispatcher = request.getRequestDispatcher("/student/testList.jsp");
            dispatcher.forward(request, response);
        }
    }

    private void startTest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            System.out.println("\n===== START TEST =====");
            int testId = Integer.parseInt(request.getParameter("testId"));
            HttpSession session = request.getSession();
            Student student = (Student) session.getAttribute("student");

            if (student == null) {
                System.out.println("No student found in session! Redirecting to login");
                response.sendRedirect("/login.jsp");
                return;
            }

            Test test = testDAO.getTestById(testId);
            if (test == null) {
                System.out.println("Test ID " + testId + " not found!");
                request.setAttribute("error", "Test không tồn tại!");
                showTestList(request, response);
                return;
            }
            
            // Debug test info
            testDAO.debugTestInfo(testId);

            // Check if it's an official test and student has already taken it
            if (!test.isIs_practice() && testRecordDAO.hasStudentTakenTest(student.getId(), testId)) {
                System.out.println("Student " + student.getId() + " has already taken test " + testId);
                request.setAttribute("error", "Bạn đã làm bài test này rồi!");
                showTestList(request, response);
                return;
            }

            // Check for active test record
            TestRecord activeRecord = testRecordDAO.getActiveTestRecord(student.getId(), testId);
            int testRecordId;

            if (activeRecord != null) {
                testRecordId = activeRecord.getId();
                System.out.println("Found active test record ID=" + testRecordId);
            } else {
                // Create new test record
                testRecordId = testRecordDAO.createTestRecord(student.getId(), testId);
                if (testRecordId == -1) {
                    System.out.println("Failed to create test record!");
                    request.setAttribute("error", "Không thể bắt đầu test!");
                    showTestList(request, response);
                    return;
                }
                System.out.println("Created new test record ID=" + testRecordId);
            }

            // Store test info in session
            session.setAttribute("currentTestId", testId);
            session.setAttribute("currentTestRecordId", testRecordId);
            session.setAttribute("currentQuestionIndex", 0);
            
            System.out.println("Session updated with testId=" + testId + 
                              ", testRecordId=" + testRecordId + ", questionIndex=0");
            System.out.println("===== START TEST COMPLETED =====\n");

            // Redirect to first question
            response.sendRedirect("taketest?action=question");

        } catch (NumberFormatException e) {
            System.out.println("ERROR: Invalid test ID format");
            request.setAttribute("error", "Test ID không hợp lệ!");
            showTestList(request, response);
        } catch (Exception e) {
            System.out.println("ERROR in startTest: " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Có lỗi xảy ra: " + e.getMessage());
            showTestList(request, response);
        }
    }

    private void showAllQuestions(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            HttpSession session = request.getSession();
            Integer testId = (Integer) session.getAttribute("currentTestId");
            Integer testRecordId = (Integer) session.getAttribute("currentTestRecordId");
            
            if (testId == null || testRecordId == null) {
                response.sendRedirect("taketest");
                return;
            }
            
            Test test = testDAO.getTestById(testId);
            if (test == null) {
                response.sendRedirect("taketest");
                return;
            }
            
            // Lấy danh sách câu hỏi
            List<Question> questions = questionDAO.getQuestionsByTest(testId);
            
            // Lấy các câu trả lời đã lưu (nếu có)
            Map<Integer, Integer> previousAnswers = new HashMap<>();
            List<QuestionRecord> records = questionRecordDAO.getQuestionRecordsByTestRecord(testRecordId);
            for (QuestionRecord record : records) {
                previousAnswers.put(record.getQuestion_id(), record.getOption_id());
            }
            
            // Lấy options cho mỗi câu hỏi
            Map<Integer, List<QuestionOption>> allOptions = new HashMap<>();
            for (Question question : questions) {
                List<QuestionOption> options = questionOptionDAO.getOptionsByQuestion(question.getId());
                allOptions.put(question.getId(), options);
            }
            
            // Lấy danh sách hình ảnh cho câu hỏi
            ImageDAO imageDAO = new ImageDAO(this.questionDAO.getDBConnection());
            List<Image> images = imageDAO.findAll();
            
            // Xử lý thời gian làm bài
            int duration = 0; // Mặc định không có thời gian
            
            // Nếu là bài test thực sự (không phải luyện tập), mới cần thời gian
            if (!test.isIs_practice()) {
                try {
                    // Debug: In ra SQL trực tiếp
                    System.out.println("DEBUG SQL: SELECT * FROM Category WHERE id = " + test.getCategory_id());
                    
                    // Lấy trực tiếp từ database thay vì qua DAO để debug
                    try (Connection conn = new DBContext().getConnection();
                         PreparedStatement ps = conn.prepareStatement("SELECT * FROM Category WHERE id = ?")) {
                        ps.setInt(1, test.getCategory_id());
                        try (ResultSet rs = ps.executeQuery()) {
                            if (rs.next()) {
                                duration = rs.getInt("duration");
                                System.out.println("Truy vấn SQL trực tiếp: Lấy được duration = " + duration + " phút (category_id=" + test.getCategory_id() + ")");
                            } else {
                                System.out.println("Truy vấn SQL trực tiếp: Không tìm thấy Category với id = " + test.getCategory_id());
                            }
                        }
                    } catch (Exception sqlEx) {
                        System.out.println("Lỗi SQL trực tiếp: " + sqlEx.getMessage());
                    }
                    
                    // Thử cách thông thường nếu trên không được
                    if (duration <= 0) {
                        Category category = categoryDAO.getCategoryById(test.getCategory_id());
                        if (category != null && category.getDuration() > 0) {
                            duration = category.getDuration();
                            System.out.println("Lấy được duration từ Category thông qua DAO: " + duration + " phút (category_id=" + test.getCategory_id() + ")");
                        } else {
                            System.out.println("Không tìm thấy Category hoặc duration = 0, sử dụng mặc định: 30 phút");
                            duration = 30; // Mặc định 30 phút cho bài test thực sự
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Lỗi khi lấy duration từ Category: " + e.getMessage());
                    duration = 30; // Mặc định 30 phút cho bài test thực sự nếu có lỗi
                }
            } else {
                System.out.println("Bài test " + testId + " là bài luyện tập (is_practice=true), không áp dụng thời gian giới hạn");
            }
            
            // Lấy thời gian bắt đầu làm bài từ TestRecord hoặc thiết lập thời gian bắt đầu mới
            Long startTime = (Long) session.getAttribute("testStartTime");
            if (startTime == null) {
                // Lấy startTime từ TestRecord nếu có
                TestRecord testRecord = testRecordDAO.getTestRecordById(testRecordId);
                if (testRecord != null && testRecord.getStart_time() != null) {
                    // Chuyển từ java.sql.Timestamp sang milliseconds
                    startTime = testRecord.getStart_time().getTime();
                    System.out.println("Lấy được startTime từ TestRecord: " + new java.util.Date(startTime));
                } else {
                    // Nếu không có, tạo thời gian bắt đầu mới
                    startTime = System.currentTimeMillis();
                    System.out.println("Tạo mới startTime: " + new java.util.Date(startTime));
                    // Cập nhật startTime trong database nếu cần
                    testRecordDAO.updateStartTime(testRecordId, new java.sql.Timestamp(startTime));
                }
                session.setAttribute("testStartTime", startTime);
            } else {
                System.out.println("Lấy startTime từ session: " + new java.util.Date(startTime));
            }
            
            System.out.println("Test ID: " + testId + ", Is Practice: " + test.isIs_practice() + ", Duration: " + duration + " minutes, Start Time: " + new java.util.Date(startTime));
            
            // Đặt dữ liệu vào request
            request.setAttribute("test", test);
            request.setAttribute("questions", questions);
            request.setAttribute("allOptions", allOptions);
            request.setAttribute("previousAnswers", previousAnswers);
            request.setAttribute("totalQuestions", questions.size());
            request.setAttribute("duration", Integer.toString(duration)); // Truyền thời gian làm bài (phút) dưới dạng String
            request.setAttribute("startTime", Long.toString(startTime)); // Truyền thời gian bắt đầu dưới dạng String
            request.setAttribute("isPractice", test.isIs_practice()); // Thêm thông tin về loại bài test
            request.setAttribute("images", images); // Thêm danh sách hình ảnh
            
            // Hiển thị lỗi nếu có
            String error = (String) request.getAttribute("error");
            if (error != null) {
                request.setAttribute("error", error);
            }
            
            // Chuyển hướng đến trang hiển thị tất cả câu hỏi
            RequestDispatcher dispatcher = request.getRequestDispatcher("/student/takeTest.jsp");
            dispatcher.forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            response.sendRedirect("taketest");
        }
    }
    
    // Phương thức xử lý nộp bài với tất cả câu hỏi
    private void submitAllAnswers(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        try {
            HttpSession session = request.getSession();
            Integer testRecordId = (Integer) session.getAttribute("currentTestRecordId");
            Integer testId = (Integer) session.getAttribute("currentTestId");
            if (testRecordId == null || testId == null) {
                response.sendRedirect("taketest");
                return;
            }
            // Lấy danh sách câu hỏi để biết loại câu hỏi
            List<Question> questions = questionDAO.getQuestionsByTest(testId);
            int index = 0;
            String questionIdParam;
            while ((questionIdParam = request.getParameter("questionId" + index)) != null) {
                int questionId = Integer.parseInt(questionIdParam);
                Question question = null;
                for (Question q : questions) {
                    if (q.getId() == questionId) {
                        question = q;
                        break;
                    }
                }
                if (question != null) {
                    // Luôn xóa đáp án cũ trước khi lưu mới
                    questionRecordDAO.deleteQuestionRecordsByTestRecordAndQuestion(testRecordId, questionId);
                    if ("MULTIPLE".equals(question.getQuestion_type())) {
                        String[] optionIds = request.getParameterValues("optionId" + index);
                        if (optionIds != null) {
                            for (String optIdStr : optionIds) {
                                if (optIdStr != null && !optIdStr.isEmpty()) {
                                    int optionId = Integer.parseInt(optIdStr);
                                    questionRecordDAO.insertQuestionRecord(testRecordId, questionId, optionId);
                                }
                            }
                        }
                    } else {
                        String optionIdParam = request.getParameter("optionId" + index);
                        if (optionIdParam != null && !optionIdParam.isEmpty()) {
                            int optionId = Integer.parseInt(optionIdParam);
                            questionRecordDAO.insertQuestionRecord(testRecordId, questionId, optionId);
                        }
                    }
                }
                index++;
            }
            // Chuyển đến hoàn thành bài test
            finishTest(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            response.sendRedirect("taketest");
        }
    }

    private void finishTest(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        try {
            System.out.println("\n***** FINISH TEST START *****");
            HttpSession session = request.getSession();
            Integer testRecordId = (Integer) session.getAttribute("currentTestRecordId");
            Integer testId = (Integer) session.getAttribute("currentTestId");
            System.out.println("Test record ID from session: " + testRecordId);

            if (testRecordId != null) {
                // Clear test timing information from session
                session.removeAttribute("testStartTime");
                
                // Check question records
                List<QuestionRecord> records = questionRecordDAO.getQuestionRecordsByTestRecord(testRecordId);
                System.out.println("Number of question records: " + records.size());
                
                // Lấy danh sách câu hỏi
                List<Question> questions = questionDAO.getQuestionsByTest(testId);
                
                // Kiểm tra xem đã trả lời đủ câu hỏi chưa
                Set<Integer> answeredQuestions = new HashSet<>();
                for (QuestionRecord record : records) {
                    answeredQuestions.add(record.getQuestion_id());
                }
                if (answeredQuestions.size() < questions.size()) {
                    // Chưa trả lời đủ câu hỏi
                    request.setAttribute("error", "Vui lòng trả lời tất cả câu hỏi trước khi nộp bài!");
                    // Chuyển hướng về trang làm bài
                    response.sendRedirect("taketest?action=question");
                    return;
                }
                
                // Tính điểm thực tế dựa trên câu trả lời
                double score = questionRecordDAO.calculateScore(testRecordId);
                System.out.println("ACTUAL SCORE CALCULATION: " + score);
                
                try {
                    // Attempt to save score
                    System.out.println("Calling finishTestRecord with testRecordId=" + testRecordId + ", score=" + score);
                    testRecordDAO.finishTestRecord(testRecordId, score);
                    System.out.println("finishTestRecord completed successfully");
                    
                    // Verify score was saved
                    TestRecord record = testRecordDAO.getTestRecordById(testRecordId);
                    if (record != null) {
                        System.out.println("VERIFICATION: Record retrieved, score=" + record.getScore());
                    } else {
                        System.out.println("ERROR: Could not retrieve test record after save");
                    }
                } catch (Exception e) {
                    System.out.println("ERROR in finishTestRecord: " + e.getMessage());
                    e.printStackTrace();
                }

                // Clear session
                session.removeAttribute("currentTestId");
                session.removeAttribute("currentTestRecordId");
                session.removeAttribute("currentQuestionIndex");
                
                System.out.println("Redirecting to result page: taketest?action=result&testRecordId=" + testRecordId);
                // Redirect to result page with valid testRecordId
                response.sendRedirect("taketest?action=result&testRecordId=" + testRecordId);
                System.out.println("***** FINISH TEST END *****\n");
            } else {
                System.out.println("ERROR: No testRecordId found in session");
                System.out.println("***** FINISH TEST FAILED *****\n");
                // No valid testRecordId, redirect to test list
                response.sendRedirect("taketest");
            }

        } catch (Exception e) {
            System.out.println("CRITICAL ERROR in finishTest: " + e.getMessage());
            e.printStackTrace();
            System.out.println("***** FINISH TEST FAILED WITH EXCEPTION *****\n");
            response.sendRedirect("taketest");
        }
    }

    private void showResult(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            String testRecordIdParam = request.getParameter("testRecordId");
            if (testRecordIdParam == null || testRecordIdParam.equals("null")) {
                response.sendRedirect("taketest");
                return;
            }
            
            int testRecordId = Integer.parseInt(testRecordIdParam);
            TestRecord testRecord = testRecordDAO.getTestRecordById(testRecordId);
            
            if (testRecord == null) {
                request.setAttribute("error", "Không tìm thấy kết quả test!");
                showTestList(request, response);
                return;
            }

            Test test = testDAO.getTestById(testRecord.getTest_id());
            
            // Lấy tất cả câu trả lời từ bảng question_record
            List<QuestionRecord> questionRecords = questionRecordDAO.getQuestionRecordsByTestRecord(testRecordId);
            
            // Tạo map questionId -> List<QuestionRecord> để hiển thị mỗi câu hỏi 1 lần
            Map<Integer, List<QuestionRecord>> questionRecordMap = new HashMap<>();
            for (QuestionRecord record : questionRecords) {
                questionRecordMap.computeIfAbsent(record.getQuestion_id(), k -> new java.util.ArrayList<>()).add(record);
            }
            request.setAttribute("questionRecordMap", questionRecordMap);
            
            // Lấy thông tin chi tiết của các câu hỏi
            Map<Integer, Question> questionMap = new HashMap<>();
            Map<Integer, List<QuestionOption>> optionsMap = new HashMap<>();
            
            for (QuestionRecord record : questionRecords) {
                int questionId = record.getQuestion_id();
                
                // Chỉ lấy thông tin câu hỏi nếu chưa có trong map
                if (!questionMap.containsKey(questionId)) {
                    Question question = questionDAO.getQuestionById(questionId);
                    if (question != null) {
                        questionMap.put(questionId, question);
                        
                        // Lấy tất cả các lựa chọn của câu hỏi
                        List<QuestionOption> options = questionOptionDAO.getOptionsByQuestion(questionId);
                        optionsMap.put(questionId, options);
                    }
                }
            }
            
            // Lấy danh sách hình ảnh cho câu hỏi (giống takeTest.jsp)
            ImageDAO imageDAO = new ImageDAO(this.questionDAO.getDBConnection());
            List<Image> images = imageDAO.findAll();
            request.setAttribute("images", images);

            request.setAttribute("testRecord", testRecord);
            request.setAttribute("test", test);
            request.setAttribute("questionRecords", questionRecords);
            request.setAttribute("questionMap", questionMap);
            request.setAttribute("optionsMap", optionsMap);

            RequestDispatcher dispatcher = request.getRequestDispatcher("/student/testResult.jsp");
            dispatcher.forward(request, response);

        } catch (NumberFormatException e) {
            request.setAttribute("error", "Test record ID không hợp lệ!");
            showTestList(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Có lỗi xảy ra khi tải kết quả!");
            showTestList(request, response);
        }
    }

    private void showHistory(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            HttpSession session = request.getSession();
            Student student = (Student) session.getAttribute("student");

            if (student == null) {
                response.sendRedirect("/login.jsp");
                return;
            }

            System.out.println("DEBUG: Getting test records for student ID: " + student.getId());
            List<TestRecord> testRecords = testRecordDAO.getTestRecordsByStudent(student.getId());
            System.out.println("DEBUG: Found " + testRecords.size() + " test records");
            
            Map<Integer, String> testMap = new HashMap<>();

            for (TestRecord record : testRecords) {
                Test test = testDAO.getTestById(record.getTest_id());
                if (test != null) {
                    testMap.put(test.getId(), test.getName());
                }
                System.out.println("DEBUG: Record ID: " + record.getId() + ", Test ID: " + record.getTest_id() + ", Score: " + record.getScore());
            }

            request.setAttribute("testRecords", testRecords);
            request.setAttribute("testMap", testMap);

            RequestDispatcher dispatcher = request.getRequestDispatcher("/student/testHistory.jsp");
            dispatcher.forward(request, response);

        } catch (Exception e) {
            System.out.println("DEBUG: Error in showHistory: " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Có lỗi xảy ra: " + e.getMessage());
            RequestDispatcher dispatcher = request.getRequestDispatcher("/student/testHistory.jsp");
            dispatcher.forward(request, response);
        }
    }

    private Map<Integer, String> getCategoryMap() {
        Map<Integer, String> categoryMap = new HashMap<>();
        try {
            List<Category> categories = categoryDAO.getAllCategories();
            for (Category category : categories) {
                categoryMap.put(category.getId(), category.getName());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return categoryMap;
    }
}

================
File: src/java/controller/studypackage/StudyPackageController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.StudyPackage;

import dal.InvoiceDAO;
import dal.StudyPackageDAO;
import model.StudyPackage;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import model.Account;
import model.Invoice;
import util.AuthUtil;
import util.RoleConstants;

/**
 *
 * @author Na
 */
@WebServlet(name = "StudyPackageController", urlPatterns = {"/study_package"})
public class StudyPackageController extends HttpServlet {

    private StudyPackageDAO dao;

    @Override
    public void init() throws ServletException {
        dao = new StudyPackageDAO();
    }

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER) && !AuthUtil.hasRole(request, RoleConstants.PARENT)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        response.setContentType("text/html;charset=UTF-8");

        String service = request.getParameter("service");

        if (service == null) {
            service = "";
        }

        try {
            switch (service) {
                case "add":
                    if (request.getMethod().equalsIgnoreCase("GET")) {
                        showAddForm(request, response);
                    } else {
                        addStudyPackage(request, response);
                    }
                    break;
                case "edit":
                    if (request.getMethod().equalsIgnoreCase("GET")) {
                        showEditForm(request, response);
                    } else {
                        updateStudyPackage(request, response);
                    }
                    break;
                case "update":
                    updateStudyPackage(request, response);
                    break;
                case "delete":
                    deleteStudyPackage(request, response);
                    break;
                case "search":
                    searchStudyPackage(request, response);
                    break;
                 case "checkout":
                    checkoutStudyPackage(request, response);
                    break;
                case "detail":
                    showDetail(request, response);
                    break;

                 
                default:
                    listStudyPackage(request, response);
                    break;
            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "Lỗi xử lý: " + e.getMessage());
            request.setAttribute("listStudyPackage", List.of());
            request.getRequestDispatcher("/studypackage/listStudyPackage.jsp").forward(request, response);
        }
    }

    private void listStudyPackage(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<StudyPackage> list = dao.getStudyPackage("SELECT * FROM study_package");
        request.setAttribute("listStudyPackage", list != null ? list : List.of());
        request.getRequestDispatcher("/studypackage/listStudyPackage.jsp").forward(request, response);
    }

    private void showAddForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/studypackage/form.jsp").forward(request, response);
    }

    private void addStudyPackage(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            String name = request.getParameter("name");
            String price = request.getParameter("price");

            StudyPackage stuPackage = new StudyPackage(id, name, price);
            int result = dao.addStudyPackage(stuPackage);

            if (result > 0) {
                request.setAttribute("message", "Thêm gói học thành công!");
                response.sendRedirect("study_package");
            } else {
                request.setAttribute("errorMessage", "Không thể thêm gói học!");
                showAddForm(request, response);
            }
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Định dạng ID không hợp lệ!");
            showAddForm(request, response);
        }
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            int editId = Integer.parseInt(request.getParameter("editId"));
            StudyPackage studyPackage = dao.findStudyPackageById(editId);
            if (studyPackage != null) {
                request.setAttribute("studyPackageToEdit", studyPackage);
            } else {
                request.setAttribute("errorMessage", "Không tìm thấy gói học với ID: " + editId);
            }
            request.getRequestDispatcher("/studypackage/form.jsp").forward(request, response);
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Định dạng ID không hợp lệ!");
            listStudyPackage(request, response);
        }
    }

    private void updateStudyPackage(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            String name = request.getParameter("name");
            String price = request.getParameter("price");

            StudyPackage stuPackage = new StudyPackage(id, name, price);
            int result = dao.updateStudyPackage(stuPackage);

            if (result > 0) {
                request.setAttribute("message", "Cập nhật gói học thành công!");
                response.sendRedirect("study_package");
            } else {
                request.setAttribute("errorMessage", "Không thể cập nhật gói học!");
                request.setAttribute("studyPackageToEdit", stuPackage);
                request.getRequestDispatcher("/studypackage/form.jsp").forward(request, response);
            }
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Định dạng ID không hợp lệ!");
            listStudyPackage(request, response);
        }
    }

    private void deleteStudyPackage(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            int result = dao.deleteStudyPackage(id);
            if (result > 0) {
                request.setAttribute("message", "Xóa gói học thành công!");
            } else {
                request.setAttribute("errorMessage", "Không thể xóa gói học!");
            }
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Định dạng ID không hợp lệ!");
        }
        response.sendRedirect("study_package");
    }

    private void searchStudyPackage(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String idParam = request.getParameter("id");
        String nameParam = request.getParameter("name");
        String priceParam = request.getParameter("price");

        if (idParam != null && !idParam.trim().isEmpty()) {
            try {
                int id = Integer.parseInt(idParam);
                StudyPackage stuPackage = dao.findStudyPackageById(id);
                if (stuPackage != null) {
                    request.setAttribute("listStudyPackage", List.of(stuPackage));
                } else {
                    request.setAttribute("listStudyPackage", List.of());
                    request.setAttribute("message", "Không tìm thấy gói học với id = " + id);
                }
            } catch (NumberFormatException e) {
                request.setAttribute("listStudyPackage", List.of());
                request.setAttribute("message", "Định dạng id không hợp lệ!");
            }
        } else if (nameParam != null && !nameParam.trim().isEmpty()) {
            List<StudyPackage> list = dao.findStudyPackageByName(nameParam);
            request.setAttribute("listStudyPackage", list);
            if (list.isEmpty()) {
                request.setAttribute("message", "Không tìm thấy gói học với tên chứa: " + nameParam);
            }
        } else if (priceParam != null && !priceParam.trim().isEmpty()) {
            List<StudyPackage> list = dao.findStudyPackageByPrice(priceParam);
            request.setAttribute("listStudyPackage", list);
            if (list.isEmpty()) {
                request.setAttribute("message", "Không tìm thấy gói học với giá: " + priceParam);
            }
        } else {
            request.setAttribute("message", "Chưa nhập tiêu chí tìm kiếm");
            request.setAttribute("listStudyPackage", List.of());
        }

        request.getRequestDispatcher("/studypackage/listStudyPackage.jsp").forward(request, response);
    }
   private void checkoutStudyPackage(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    try {
        int id = Integer.parseInt(request.getParameter("id"));
        StudyPackage sp = dao.findStudyPackageById(id);

        if (sp != null) {
            // Lấy thông tin người dùng từ session hoặc sử dụng userId mặc định nếu phát triển thử nghiệm
            int userId = 1; 
            // Kiểm tra nếu người dùng đã đăng nhập và là parent
            Object accountObj = request.getSession().getAttribute("account");
            if (accountObj instanceof Account) {
                Account account = (Account) accountObj;
                if (account.getRole() != null && account.getRole().equalsIgnoreCase(RoleConstants.PARENT)) {
                    userId = account.getId();
                }
            }
            
            // Tạo form để gọi PaymentServlet thay vì tạo invoice trực tiếp
            request.setAttribute("packageId", id);
            request.setAttribute("packageName", sp.getName());
            request.setAttribute("amount", Double.parseDouble(sp.getPrice()));
            request.setAttribute("userId", userId);
            
            // Chuyển hướng đến trang chọn phương thức thanh toán
            request.getRequestDispatcher("/studypackage/payment.jsp").forward(request, response);
        } else {
            request.setAttribute("errorMessage", "Không tìm thấy gói học để thanh toán.");
            listStudyPackage(request, response);
        }
    } catch (Exception e) {
        request.setAttribute("errorMessage", "Lỗi xử lý: " + e.getMessage());
        listStudyPackage(request, response);
    }
}

    private void showDetail(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    try {
        int id = Integer.parseInt(request.getParameter("id"));
        StudyPackage studyPackage = dao.findStudyPackageById(id);
        if (studyPackage != null) {
            request.setAttribute("studyPackageDetail", studyPackage);
            request.getRequestDispatcher("/studypackage/studyPackageDetail.jsp").forward(request, response);
        } else {
            request.setAttribute("errorMessage", "Không tìm thấy gói học với ID: " + id);
            listStudyPackage(request, response);
        }
    } catch (NumberFormatException e) {
        request.setAttribute("errorMessage", "Định dạng ID không hợp lệ!");
        listStudyPackage(request, response);
    }
}


    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}

================
File: src/java/controller/subject/SubjectController.java
================
package controller.subject;

import dal.DAOSubject;
import dal.GradeDAO;
import jakarta.servlet.*;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.Subject;
import model.Grade;

import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import util.AuthUtil;
import util.RoleConstants;

@WebServlet("/subjects")
public class SubjectController extends HttpServlet {

    private DAOSubject daoSubject = new DAOSubject();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if (!AuthUtil.hasRole(req, RoleConstants.ADMIN) && !AuthUtil.hasRole(req, RoleConstants.TEACHER)&&  !AuthUtil.hasRole(req, RoleConstants.STUDENT)) {
            resp.sendRedirect("/error.jsp");
            return;
        }
        try {
            // Lấy danh sách Grade để tạo map id -> name
            GradeDAO daoGrade = new GradeDAO();
            List<Grade> gradeList = daoGrade.findAllFromGrade();
            Map<Integer, String> gradeMap = new HashMap<>();
            for (Grade g : gradeList) {
                gradeMap.put(g.getId(), g.getName());
            }
            // Truyền gradeMap xuống JSP
            req.setAttribute("gradeMap", gradeMap);

            if ("edit".equals(action)) {
                int id = Integer.parseInt(req.getParameter("id"));
                Subject subject = daoSubject.findById(id);
                if (subject == null) {
                    req.setAttribute("error", "Subject not found!");
                    resp.sendRedirect("subjects");
                    return;
                }
                req.setAttribute("subject", subject);
                req.getRequestDispatcher("Subject/updateSubject.jsp").forward(req, resp);

            } else if ("delete".equals(action)) {
                int id = Integer.parseInt(req.getParameter("id"));
                daoSubject.delete(id);
                resp.sendRedirect("subjects");

            } else if ("create".equals(action)) {
                Subject newSubject = new Subject();
                req.setAttribute("subject", newSubject);
                req.getRequestDispatcher("Subject/addSubject.jsp").forward(req, resp);

            } else {
                String name = req.getParameter("name");
                List<Subject> subjectList = (name != null && !name.trim().isEmpty())
                        ? daoSubject.findByNameOfSubject(name) : daoSubject.findAll();
                req.setAttribute("subjectList", subjectList);
                req.getRequestDispatcher("Subject/subjectList.jsp").forward(req, resp);
            }

        } catch (SQLException | NumberFormatException e) {
            e.printStackTrace();
            req.setAttribute("error", "Lỗi xử lý dữ liệu: " + e.getMessage());
            req.getRequestDispatcher("Subject/subjectList.jsp").forward(req, resp);
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        if (!AuthUtil.hasRole(req, RoleConstants.ADMIN)) { // chỉ Admin chỉnh sửa môn học
            resp.sendRedirect("/error.jsp");
            return;
        }
        try {
            String idStr = req.getParameter("id");
            String name = req.getParameter("name");
            String description = req.getParameter("description");
            int gradeId = Integer.parseInt(req.getParameter("grade_id"));

            Subject subject = new Subject();
            subject.setName(name);
            subject.setDescription(description);
            subject.setGrade_id(gradeId);

            if (idStr == null || idStr.trim().isEmpty()) {
                daoSubject.insert(subject);
            } else {
                subject.setId(Integer.parseInt(idStr));
                daoSubject.update(subject);
            }

            resp.sendRedirect("subjects");

        } catch (Exception e) {
            e.printStackTrace();
            req.setAttribute("error", "Lỗi khi lưu môn học: " + e.getMessage());

            String idStr = req.getParameter("id");
            if (idStr == null || idStr.trim().isEmpty()) {
                req.getRequestDispatcher("Subject/addSubject.jsp").forward(req, resp);
            } else {
                Subject subject = new Subject();
                subject.setId(Integer.parseInt(idStr));
                subject.setName(req.getParameter("name"));
                subject.setDescription(req.getParameter("description"));
                subject.setGrade_id(Integer.parseInt(req.getParameter("grade_id")));
                req.setAttribute("subject", subject);

                req.getRequestDispatcher("Subject/updateSubject.jsp").forward(req, resp);
            }
        }
    }
}

================
File: src/java/controller/test/TestController.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller.Test;

import dal.TestDAO;
import dal.CategoryDAO;
import dal.QuestionDAO;
import dal.TestQuestionDAO;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Test;
import model.Category;
import model.Question;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import util.AuthUtil;
import util.RoleConstants;

/**
 *
 * @author Na
 */
@WebServlet("/test")
public class TestController extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.STUDENT)
                && !AuthUtil.hasRole(request, RoleConstants.TEACHER)
                && !AuthUtil.hasRole(request, RoleConstants.ADMIN)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");
        if (action == null) {
            response.sendRedirect("test");
            return;
        }
        try {
            switch (action) {
                case "add":
                    addTest(request, response);
                    break;
                case "update":
                    updateTest(request, response);
                    break;
                default:
                    response.sendRedirect("test");
                    break;
            }
        } catch (Exception e) {
            request.setAttribute("error", "Lỗi: " + e.getMessage());
            response.sendRedirect("test");
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (!AuthUtil.hasRole(request, RoleConstants.STUDENT)
                && !AuthUtil.hasRole(request, RoleConstants.TEACHER)
                && !AuthUtil.hasRole(request, RoleConstants.ADMIN)) {
            response.sendRedirect("/error.jsp");
            return;
        }
        String action = request.getParameter("action");
        if (action == null) {
            listTests(request, response);
        } else {
            try {
                switch (action) {
                    case "create":
                        showCreateForm(request, response);
                        break;
                    case "edit":
                        showEditForm(request, response);
                        break;
                    case "delete":
                        deleteTest(request, response);
                        break;
                    case "search":
                        searchTestById(request, response);
                        break;
                    default:
                        listTests(request, response);
                        break;
                }
            } catch (Exception e) {
                request.setAttribute("error", "Lỗi: " + e.getMessage());
                listTests(request, response);
            }
        }
    }

    private void listTests(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        TestDAO testDAO = new TestDAO();
        List<Test> testList = testDAO.getAllTests();
        Map<Integer, String> categoryMap = getCategoryMap();
        request.setAttribute("testList", testList);
        request.setAttribute("categoryMap", categoryMap);
        if (AuthUtil.hasRole(request, RoleConstants.TEACHER)) {
            RequestDispatcher dispatcher = request.getRequestDispatcher("/teacher/manageTests.jsp");
            dispatcher.forward(request, response);
        } else if (AuthUtil.hasRole(request, RoleConstants.ADMIN)) {
            RequestDispatcher dispatcher = request.getRequestDispatcher("/admin/manageTests.jsp");
            dispatcher.forward(request, response);
        } else {
            RequestDispatcher dispatcher = request.getRequestDispatcher("/test/testList.jsp");
            dispatcher.forward(request, response);
        }
    }

    private void showCreateForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        QuestionDAO questionDAO = new QuestionDAO();
        request.setAttribute("test", new Test());
        Map<Integer, String> categoryMap = getCategoryMap();
        request.setAttribute("categoryMap", categoryMap);

        // Lấy danh sách câu hỏi cho form tạo test
        try {
            System.out.println("Đang lấy danh sách câu hỏi cho form tạo test");
            List<Question> questionList = questionDAO.findAllQuestion();
            System.out.println("Đã lấy được " + questionList.size() + " câu hỏi");
            request.setAttribute("questionList", questionList);
        } catch (Exception e) {
            System.out.println("Lỗi khi lấy danh sách câu hỏi: " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "Không thể lấy danh sách câu hỏi: " + e.getMessage());
            request.setAttribute("questionList", new ArrayList<Question>());
        }

        RequestDispatcher dispatcher = request.getRequestDispatcher("/Test/addTest.jsp");
        dispatcher.forward(request, response);
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        TestDAO testDAO = new TestDAO();
        QuestionDAO questionDAO = new QuestionDAO();
        TestQuestionDAO testQuestionDAO = new TestQuestionDAO();
        try {
            int id = Integer.parseInt(request.getParameter("id"));
            Test test = testDAO.getTestById(id);
            if (test == null) {
                request.setAttribute("error", "Test không tồn tại!");
                listTests(request, response);
                return;
            }
            request.setAttribute("test", test);

            Map<Integer, String> categoryMap = getCategoryMap();
            request.setAttribute("categoryMap", categoryMap);

            // Lấy danh sách tất cả câu hỏi
            try {
                List<Question> questionList = questionDAO.findAllQuestion();
                request.setAttribute("questionList", questionList);

                // Lấy danh sách ID câu hỏi đã chọn cho test này
                List<Integer> selectedQuestionIds = testQuestionDAO.getQuestionIdsByTest(id);
                request.setAttribute("selectedQuestionIds", selectedQuestionIds);
            } catch (Exception e) {
                e.printStackTrace();
            }

            RequestDispatcher dispatcher = request.getRequestDispatcher("/Test/updateTest.jsp");
            dispatcher.forward(request, response);
        } catch (NumberFormatException e) {
            request.setAttribute("error", "ID không hợp lệ");
            listTests(request, response);
        }
    }

    private void addTest(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        TestDAO testDAO = new TestDAO();
        TestQuestionDAO testQuestionDAO = new TestQuestionDAO();
        String name = request.getParameter("name");
        String description = request.getParameter("description");
        boolean practice = "true".equals(request.getParameter("practice"));
        int categoryId = Integer.parseInt(request.getParameter("categoryId"));

        // Tạo và lưu test mới
        Test test = new Test(0, name, description, practice, categoryId);
        int testId = testDAO.addTest(test);

        // Lấy danh sách câu hỏi được chọn
        String[] questionIds = request.getParameterValues("questionIds");
        if (questionIds != null && questionIds.length > 0) {
            // Lưu các câu hỏi vào bảng test_question
            for (String questionIdStr : questionIds) {
                try {
                    int questionId = Integer.parseInt(questionIdStr);
                    testQuestionDAO.addTestQuestion(testId, questionId);
                } catch (NumberFormatException e) {
                    // Bỏ qua nếu không phải số
                }
            }
        }

        response.sendRedirect("test");
    }

    private void updateTest(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        TestDAO testDAO = new TestDAO();
        CategoryDAO categoryDAO = new CategoryDAO();
        TestQuestionDAO testQuestionDAO = new TestQuestionDAO();

        // Check if user has admin or teacher role
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER)) {
            response.sendRedirect("/error.jsp");
            return;
        }

        try {
            int id = Integer.parseInt(request.getParameter("id"));
            String name = request.getParameter("name");
            String description = request.getParameter("description");
            boolean practice = "true".equals(request.getParameter("practice"));
            int categoryId = Integer.parseInt(request.getParameter("categoryId"));

            // Validate category exists
            Category category = categoryDAO.getCategoryById(categoryId);
            if (category == null) {
                request.setAttribute("error", "Danh mục không tồn tại");
                showEditForm(request, response);
                return;
            }

            // Cập nhật thông tin test
            Test test = new Test(id, name, description, practice, categoryId);
            testDAO.updateTest(test);

            // Xóa tất cả câu hỏi cũ của test
            testQuestionDAO.removeAllQuestionsFromTest(id);

            // Thêm lại các câu hỏi mới được chọn
            String[] questionIds = request.getParameterValues("questionIds");
            if (questionIds != null && questionIds.length > 0) {
                for (String questionIdStr : questionIds) {
                    try {
                        int questionId = Integer.parseInt(questionIdStr);
                        testQuestionDAO.addTestQuestion(id, questionId);
                    } catch (NumberFormatException e) {
                        // Bỏ qua nếu không phải số
                    }
                }
            }

            request.setAttribute("message", "Cập nhật bài test thành công");
        } catch (NumberFormatException e) {
            request.setAttribute("error", "ID hoặc danh mục không hợp lệ");
        } catch (Exception e) {
            request.setAttribute("error", "Lỗi khi cập nhật bài test: " + e.getMessage());
        }

        response.sendRedirect("test");
    }

    private void deleteTest(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        TestDAO testDAO = new TestDAO();

        // Check if user has admin or teacher role
        if (!AuthUtil.hasRole(request, RoleConstants.ADMIN) && !AuthUtil.hasRole(request, RoleConstants.TEACHER)) {
            response.sendRedirect("/error.jsp");
            return;
        }

        try {
            int id = Integer.parseInt(request.getParameter("id"));
            testDAO.deleteTest(id);
            request.setAttribute("message", "Xóa bài test thành công");
        } catch (NumberFormatException e) {
            request.setAttribute("error", "ID không hợp lệ");
        } catch (Exception e) {
            request.setAttribute("error", "Lỗi khi xóa bài test: " + e.getMessage());
        }

        response.sendRedirect("test");
    }

    private void searchTestById(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        TestDAO testDAO = new TestDAO();

        try {
            int id = Integer.parseInt(request.getParameter("id"));
            Test test = testDAO.getTestById(id);
            request.setAttribute("testList", test != null ? List.of(test) : List.of());

            Map<Integer, String> categoryMap = getCategoryMap();
            request.setAttribute("categoryMap", categoryMap);

            RequestDispatcher dispatcher = request.getRequestDispatcher("/Test/testList.jsp");
            dispatcher.forward(request, response);
        } catch (NumberFormatException e) {
            request.setAttribute("error", "ID không hợp lệ");
            listTests(request, response);
        }
    }

    // Hàm lấy map categoryId -> categoryName
    private Map<Integer, String> getCategoryMap() {
        CategoryDAO categoryDAO = new CategoryDAO();
        Map<Integer, String> categoryMap = new HashMap<>();
        List<Category> categoryList = categoryDAO.getAllCategories();
        for (Category c : categoryList) {
            categoryMap.put(c.getId(), c.getName());
        }
        return categoryMap;
    }
}

================
File: src/java/dal/AccountDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import at.favre.lib.crypto.bcrypt.BCrypt;
import config.PasswordUtil;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Account;
import model.GoogleAccount;

/**
 *
 * @author BuiNgocLinh
 */
public class AccountDAO extends DBContext {

    private final PasswordUtil passwordEncode = new PasswordUtil();

    //hien thi all acc
    public List<Account> findAll() throws SQLException {
        String sql = "SELECT * FROM account";
        List<Account> accounts = new ArrayList<>();
        PreparedStatement ps = connection.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            Account acc = new Account();
            acc.setId(rs.getInt("id"));
            acc.setEmail(rs.getString("email"));
            acc.setPassword(rs.getString("password"));
            acc.setStatus(rs.getString("status"));
            acc.setRole(rs.getString("role"));
            acc.setFull_name(rs.getString("full_name"));
            acc.setSex(rs.getObject("sex") == null ? null : rs.getInt("sex"));
            acc.setDob(rs.getDate("dob") == null ? null : rs.getDate("dob").toLocalDate());
            acc.setImage_id(rs.getObject("image_id") == null ? null : rs.getInt("image_id"));
            accounts.add(acc);
        }

        return accounts;
    }

    public boolean existEmail(String email) {
        String sql = "SELECT * FROM account WHERE Email = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return true;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(AccountDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

//    public int deleteAccount(int id) throws SQLException {
//        String sqlSelectStudentIds = "SELECT id FROM student WHERE parent_id = ?";
//        String sqlSelectTestRecordIds = "SELECT id FROM test_record WHERE student_id = ?";
//        String sqlDeleteQuestionRecords = "DELETE FROM question_record WHERE test_record_id = ?";
//        String sqlDeleteTestRecords = "DELETE FROM test_record WHERE student_id = ?";
//        String sqlDeleteStudents = "DELETE FROM student WHERE parent_id = ?";
//        String sqlSelectInvoiceIds = "SELECT id FROM invoice WHERE parent_id = ?";
//        String sqlDeleteInvoiceLines = "DELETE FROM invoice_line WHERE invoice_id = ?";
//        String sqlDeleteInvoices = "DELETE FROM invoice WHERE parent_id = ?";
//        String sqlDeleteSubjects = "DELETE FROM subject WHERE grade_id IN (SELECT id FROM grade WHERE teacher_id = ?)";
//        String sqlDeleteGrades = "DELETE FROM grade WHERE teacher_id = ?";
//        String sqlDeleteImage = "DELETE FROM image WHERE id = ?";
//        String sqlDeleteAccount = "DELETE FROM account WHERE id = ?";
//
//        int rowsDeleted = 0;
//        boolean autoCommit = connection.getAutoCommit();
//        connection.setAutoCommit(false);
//
//        try (
//                PreparedStatement psSelectStudentIds = connection.prepareStatement(sqlSelectStudentIds); PreparedStatement psSelectTestRecordIds = connection.prepareStatement(sqlSelectTestRecordIds); PreparedStatement psDeleteQuestionRecords = connection.prepareStatement(sqlDeleteQuestionRecords); PreparedStatement psDeleteTestRecords = connection.prepareStatement(sqlDeleteTestRecords); PreparedStatement psDeleteStudents = connection.prepareStatement(sqlDeleteStudents); PreparedStatement psSelectInvoiceIds = connection.prepareStatement(sqlSelectInvoiceIds); PreparedStatement psDeleteInvoiceLines = connection.prepareStatement(sqlDeleteInvoiceLines); PreparedStatement psDeleteInvoices = connection.prepareStatement(sqlDeleteInvoices); PreparedStatement psDeleteSubjects = connection.prepareStatement(sqlDeleteSubjects); PreparedStatement psDeleteGrades = connection.prepareStatement(sqlDeleteGrades); PreparedStatement psDeleteImage = connection.prepareStatement(sqlDeleteImage); PreparedStatement psDeleteAccount = connection.prepareStatement(sqlDeleteAccount);) {
//            // 1. Lấy tất cả student_id liên quan tới account
//            psSelectStudentIds.setInt(1, id);
//            try (ResultSet rsStudents = psSelectStudentIds.executeQuery()) {
//                while (rsStudents.next()) {
//                    int studentId = rsStudents.getInt("id");
//
//                    // 2. Lấy tất cả test_record_id liên quan đến student
//                    psSelectTestRecordIds.setInt(1, studentId);
//                    try (ResultSet rsTestRecords = psSelectTestRecordIds.executeQuery()) {
//                        while (rsTestRecords.next()) {
//                            int testRecordId = rsTestRecords.getInt("id");
//
//                            // 3. Xóa tất cả question_record liên quan đến test_record
//                            psDeleteQuestionRecords.setInt(1, testRecordId);
//                            psDeleteQuestionRecords.executeUpdate();
//                        }
//                    }
//
//                    // 4. Xóa tất cả test_record của student
//                    psDeleteTestRecords.setInt(1, studentId);
//                    psDeleteTestRecords.executeUpdate();
//                }
//            }
//
//            // 5. Xóa tất cả student của account
//            psDeleteStudents.setInt(1, id);
//            psDeleteStudents.executeUpdate();
//
//            // 6. Xóa tất cả invoice_line -> invoice
//            psSelectInvoiceIds.setInt(1, id);
//            try (ResultSet rsInvoices = psSelectInvoiceIds.executeQuery()) {
//                while (rsInvoices.next()) {
//                    int invoiceId = rsInvoices.getInt("id");
//                    psDeleteInvoiceLines.setInt(1, invoiceId);
//                    psDeleteInvoiceLines.executeUpdate();
//                }
//            }
//            psDeleteInvoices.setInt(1, id);
//            psDeleteInvoices.executeUpdate();
//
//            // 7. Xóa subject liên quan đến grade của giáo viên này
//            psDeleteSubjects.setInt(1, id);
//            psDeleteSubjects.executeUpdate();
//
//            // 8. Xóa grade của giáo viên
//            psDeleteGrades.setInt(1, id);
//            psDeleteGrades.executeUpdate();
//
//            // 9. Xóa tài khoản
//            psDeleteAccount.setInt(1, id);
//            rowsDeleted = psDeleteAccount.executeUpdate();
//
//            // 10. Xóa ảnh liên quan nếu có
//            psDeleteImage.setInt(1, id);
//            psDeleteImage.executeUpdate();
//
//            // Commit tất cả
//            connection.commit();
//        } catch (SQLException e) {
//            connection.rollback();
//            throw e;
//        } finally {
//            connection.setAutoCommit(autoCommit);
//        }
//
//        return rowsDeleted;
//    }
    public Account findById(int id) throws SQLException {
        String sql = "SELECT * FROM account WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {

            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    Account acc = new Account();
                    acc.setId(rs.getInt("id"));
                    acc.setEmail(rs.getString("email"));
                    acc.setPassword(rs.getString("password"));
                    acc.setStatus(rs.getString("status"));
                    acc.setRole(rs.getString("role"));
                    acc.setFull_name(rs.getString("full_name"));
                    acc.setSex(rs.getInt("sex"));
                    Date dob = rs.getDate("dob");
                    if (dob != null) {
                        acc.setDob(dob.toLocalDate());
                    }
                    acc.setImage_id(rs.getInt("image_id"));
                    return acc;
                }
            }
        }
        return null;
    }

    public boolean update(Account account) throws SQLException {
        String sql = "UPDATE account SET email = ?, password = ?, status = ?, role = ?, full_name = ?, sex = ?, dob = ?, image_id = ? WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, account.getEmail());
            ps.setString(2, passwordEncode.hashPassword(account.getPassword()));
            ps.setString(3, account.getStatus());
            ps.setString(4, account.getRole());
            ps.setString(5, account.getFull_name());
            ps.setInt(6, account.getSex());
            ps.setDate(7, Date.valueOf(account.getDob()));
            ps.setInt(8, account.getImage_id());
            ps.setInt(9, account.getId());

            int rowsUpdated = ps.executeUpdate();
            return rowsUpdated > 0;
        }
    }

    public Account selectByAccount(String email) {
        Account account = null;
        String sql = "SELECT * FROM account WHERE Email = ?";

        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                account = new Account(
                        rs.getInt("id"),
                        rs.getString("email"),
                        rs.getString("password"),
                        rs.getString("status"),
                        rs.getString("role"),
                        rs.getString("full_name"),
                        rs.getInt("sex"),
                        rs.getDate("dob").toLocalDate(),
                        rs.getInt("image_id")
                );
            }
        } catch (SQLException ex) {
            Logger.getLogger(AccountDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return account;
    }

    // Tìm account theo email
    public List<Account> findByEmail(String email) throws SQLException {
        String sql = "SELECT * FROM account WHERE email = ?";
        PreparedStatement ps = connection.prepareStatement(sql);
        ps.setString(1, email);
        try (ResultSet rs = ps.executeQuery()) {
            List<Account> accounts = new ArrayList<>();
            while (rs.next()) {
                Account acc = new Account();
                acc.setId(rs.getInt("id"));
                acc.setEmail(rs.getString("email"));
                acc.setPassword(rs.getString("password"));
                acc.setStatus(rs.getString("status"));
                acc.setRole(rs.getString("role"));
                acc.setFull_name(rs.getString("full_name"));
                acc.setSex(rs.getObject("sex") == null ? null : rs.getInt("sex"));
                java.sql.Date sqlDate = rs.getDate("dob");
                acc.setDob(sqlDate.toLocalDate());
                acc.setImage_id(rs.getInt("image_id"));
                accounts.add(acc);
            }
            return accounts;
        }
    }

    public boolean insert(Account account) throws SQLException {
        String sql = "INSERT INTO account (email, password, status, role, full_name, sex, dob, image_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, account.getEmail());
            stmt.setString(2, passwordEncode.hashPassword(account.getPassword()));
            stmt.setString(3, account.getStatus());
            stmt.setString(4, account.getRole());
            stmt.setString(5, account.getFull_name());
            stmt.setObject(6, account.getSex(), java.sql.Types.INTEGER);
            stmt.setObject(7, account.getDob());
            stmt.setObject(8, account.getImage_id(), java.sql.Types.INTEGER);

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    public Account viewProfile(int accountId) throws SQLException {
        String sql = "SELECT * FROM account WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setInt(1, accountId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Account account = new Account();
                    account.setId(rs.getInt("id"));
                    account.setEmail(rs.getString("email"));
                    account.setPassword(rs.getString("password"));
                    account.setStatus(rs.getString("status"));
                    account.setRole(rs.getString("role"));
                    account.setFull_name(rs.getString("full_name"));
                    account.setSex(rs.getObject("sex") == null ? null : rs.getInt("sex"));
                    java.sql.Date sqlDate = rs.getDate("dob");
                    account.setDob(sqlDate.toLocalDate());
                    account.setImage_id(rs.getInt("image_id"));
                    return account;
                }
            }
        }
        return null;
    }

//    public Account findByEmailAndPassword(String email, String password) throws SQLException {
//        String sql = "SELECT * FROM account WHERE email = ? AND password = ?";
//        PreparedStatement ps = connection.prepareStatement(sql);
//        ps.setString(1, email);
//        ps.setString(2, password);
//        ResultSet rs = ps.executeQuery();
//        if (rs.next()) {
//            Account account = new Account();
//            account.setId(rs.getInt("id"));
//            account.setEmail(rs.getString("email"));
//            account.setPassword(rs.getString("password"));
//            account.setFull_name(rs.getString("full_name"));
//            account.setStatus(rs.getString("status"));
//            account.setRole(rs.getString("role"));
//            account.setSex(rs.getObject("sex") == null ? null : rs.getInt("sex"));
//            account.setDob(rs.getDate("dob").toLocalDate());
//            account.setImage_id(rs.getInt("image_id"));
//            return account;
//        }
//        return null;
//    }
    public List<Account> getAccountsByPage(int offset, int limit) throws SQLException {
        List<Account> list = new ArrayList<>();
        String sql = "SELECT * FROM account LIMIT ?, ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, offset);
            ps.setInt(2, limit);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Account acc = new Account();
                acc.setId(rs.getInt("id"));
                acc.setEmail(rs.getString("email"));
                acc.setPassword(rs.getString("password"));
                acc.setStatus(rs.getString("status"));
                acc.setRole(rs.getString("role"));
                acc.setFull_name(rs.getString("full_name"));
                acc.setSex(rs.getObject("sex") == null ? null : rs.getInt("sex"));
                acc.setDob(rs.getDate("dob") == null ? null : rs.getDate("dob").toLocalDate());
                acc.setImage_id(rs.getObject("image_id") == null ? null : rs.getInt("image_id"));
                list.add(acc);
            }
        }
        return list;
    }

    public int countAccounts() throws SQLException {
        String sql = "SELECT COUNT(*) FROM account";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    public Account checkLogin(String email, String password) {
        Account account = null;
        String sql = "SELECT * FROM account WHERE email = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int id = rs.getInt("id");
                    String Email = rs.getString("email");
                    String PasswordHash = rs.getString("password");
                    String status = rs.getString("status");
                    String role = rs.getString("role");
                    String fullName = rs.getString("full_name");
                    int sex = rs.getInt("Sex");
                    LocalDate dob = rs.getDate("dob").toLocalDate();
                    int imageId = rs.getInt("image_id");

                    if (passwordEncode.checkPassword(password, PasswordHash) && "ACTIVE".equals(status.toUpperCase())) {
                        account = new Account(id, Email, password, status, role, fullName, sex, dob, imageId);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return account;
    }

    // Google Account methods
    /**
     * Tìm Google Account theo ID
     *
     * @param googleId Google ID cần tìm
     * @return GoogleAccount nếu tìm thấy, null nếu không tìm thấy
     */
    public GoogleAccount findGoogleAccountById(String googleId) {
        String sql = "SELECT * FROM google_account WHERE google_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, googleId);
            try (ResultSet rs = statement.executeQuery()) {
                if (rs.next()) {
                    GoogleAccount googleAccount = new GoogleAccount();
                    googleAccount.setGoogle_id(rs.getString("google_id"));
                    googleAccount.setEmail(rs.getString("email"));
                    googleAccount.setName(rs.getString("name"));
                    googleAccount.setFirst_name(rs.getString("first_name"));
                    googleAccount.setGiven_name(rs.getString("given_name"));
                    googleAccount.setFamily_name(rs.getString("family_name"));
                    googleAccount.setPicture(rs.getString("picture"));
                    googleAccount.setAccount_id(rs.getInt("account_id"));
                    googleAccount.setVerified_email(rs.getBoolean("verified_email"));
                    return googleAccount;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Thêm Google Account mới
     *
     * @param googleAccount GoogleAccount cần thêm
     * @return true nếu thêm thành công, false nếu thất bại
     */
    public boolean addGoogleAccount(GoogleAccount googleAccount) {
        String sql = "INSERT INTO google_account (google_id, email, name, first_name, given_name, family_name, picture, account_id, verified_email) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, googleAccount.getGoogle_id());
            statement.setString(2, googleAccount.getEmail());
            statement.setString(3, googleAccount.getName());
            statement.setString(4, googleAccount.getFirst_name());
            statement.setString(5, googleAccount.getGiven_name());
            statement.setString(6, googleAccount.getFamily_name());
            statement.setString(7, googleAccount.getPicture());
            statement.setInt(8, googleAccount.getAccount_id());
            statement.setBoolean(9, googleAccount.isVerified_email());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Cập nhật thông tin Google Account
     *
     * @param googleAccount GoogleAccount cần cập nhật
     * @return true nếu cập nhật thành công, false nếu thất bại
     */
    public boolean updateGoogleAccount(GoogleAccount googleAccount) {
        String sql = "UPDATE google_account SET email = ?, name = ?, first_name = ?, given_name = ?, "
                + "family_name = ?, picture = ?, verified_email = ? WHERE google_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, googleAccount.getEmail());
            statement.setString(2, googleAccount.getName());
            statement.setString(3, googleAccount.getFirst_name());
            statement.setString(4, googleAccount.getGiven_name());
            statement.setString(5, googleAccount.getFamily_name());
            statement.setString(6, googleAccount.getPicture());
            statement.setBoolean(7, googleAccount.isVerified_email());
            statement.setString(8, googleAccount.getGoogle_id());

            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Xóa Google Account
     *
     * @param googleId Google ID cần xóa
     * @return true nếu xóa thành công, false nếu thất bại
     */
    public boolean deleteGoogleAccount(String googleId) {
        String sql = "DELETE FROM google_account WHERE google_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, googleId);
            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Kiểm tra mật khẩu cũ cho account
    public boolean validatePassword(Account account, String providedPassword) {
        // Lấy mật khẩu đã hash từ account
        String storedPassword = account.getPassword();
        // Dùng PasswordUtil để kiểm tra
        return passwordEncode.checkPassword(providedPassword, storedPassword);
    }

    public Map<String, Integer> getUserCountByRole() throws SQLException {
        Map<String, Integer> roleCount = new HashMap<>();
        String sql = "SELECT role, COUNT(*) as count FROM account GROUP BY role";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                roleCount.put(rs.getString("role"), rs.getInt("count"));
            }
        }
        return roleCount;
    }

    public List<Account> getRecentRegistrations(int limit) throws SQLException {
        List<Account> accounts = new ArrayList<>();
        String sql = "SELECT * FROM account ORDER BY id DESC LIMIT ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, limit);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                // Create account object
                Account acc = new Account();
                acc.setId(rs.getInt("id"));
                acc.setEmail(rs.getString("email"));
                acc.setFull_name(rs.getString("full_name"));
                acc.setRole(rs.getString("role"));
                accounts.add(acc);
            }
        }
        return accounts;
    }

    public int getRegistrationCountByMonth(LocalDate month) throws SQLException {
        String sql = "SELECT COUNT(*) FROM account WHERE YEAR(created_at) = ? AND MONTH(created_at) = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, month.getYear());
            ps.setInt(2, month.getMonthValue());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}

================
File: src/java/dal/CategoryDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import model.Category;

public class CategoryDAO extends DBContext {

    // Lấy tất cả category
    public List<Category> getAllCategories() {
        List<Category> list = new ArrayList<>();
        String sql = "SELECT * FROM Category";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Category c = new Category(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("num_questions"),
                        rs.getInt("duration")
                );
                list.add(c);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // Thêm category mới
    public boolean addCategory(Category c) {
        String sql = "INSERT INTO Category (name, num_questions, duration) VALUES (?, ?, ?)";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, c.getName());
            ps.setInt(2, c.getNum_question());
            ps.setInt(3, c.getDuration());
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Cập nhật category
    public boolean updateCategory(Category c) {
        String sql = "UPDATE Category SET name = ?, num_questions = ?, duration = ? WHERE id = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, c.getName());
            ps.setInt(2, c.getNum_question());
            ps.setInt(3, c.getDuration());
            ps.setInt(4, c.getId());
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Kiểm tra category có đang được sử dụng không
    public boolean isCategoryInUse(int categoryId) {
        String sql = "SELECT COUNT(*) FROM test WHERE category_id = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, categoryId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Xoá category - chỉ xóa khi không có test nào sử dụng
    public boolean deleteCategory(int id) {
        // Kiểm tra trước khi xóa
        if (isCategoryInUse(id)) {
            return false; // Không thể xóa vì đang được sử dụng
        }

        String sql = "DELETE FROM Category WHERE id = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Lấy category theo ID
    public Category getCategoryById(int id) {
        String sql = "SELECT * FROM Category WHERE id = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Category(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getInt("num_questions"),
                            rs.getInt("duration")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // Tìm kiếm category theo tên (tương đối, không phân biệt hoa thường)
    public List<Category> findByName(String name) {
        List<Category> list = new ArrayList<>();
        String sql = "SELECT * FROM Category WHERE LOWER(name) LIKE ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, "%" + name.toLowerCase() + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Category c = new Category(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getInt("num_questions"),
                            rs.getInt("duration")
                    );
                    list.add(c);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

// Đếm số lượng test trong mỗi category
    public int countTestsInCategory(int categoryId) {
        String sql = "SELECT COUNT(*) FROM test WHERE category_id = ?";
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, categoryId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

}

================
File: src/java/dal/ChapterDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Chapter;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Na
 */
public class ChapterDAO extends DBContext {

    //hien thi all chapter
    public List<Chapter> getChapter(String sql) {
        List<Chapter> list = new ArrayList<>();

        try {
            Statement state = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = state.executeQuery(sql);
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String description = rs.getString("description");
                int subject_id = rs.getInt("subject_id");
                Chapter chapter = new Chapter(id, name, description, subject_id);
                list.add(chapter);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChapterDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }

    //add them new chapter
    public int addChapter(Chapter chapter) {
        int n = 0;
        String sql = "INSERT INTO chapter (id, name, description, subject_id)\n"
                + "     VALUES\n"
                + "(?, ?, ?, ?)";
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setInt(1, chapter.getId());
            pre.setString(2, chapter.getName());
            pre.setString(3, chapter.getDescription());
            pre.setInt(4, chapter.getSubject_id());
            n = pre.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ChapterDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return n;
    }

    //edit chapter
    public int editChapter(Chapter chapter) {
        int n = 0;
        String sql = """
                     UPDATE chapter
                        SET name = ?
                           ,description = ?
                           ,subject_id = ?
                     WHERE id = ?
                     """;

        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setString(1, chapter.getName());
            pre.setString(2, chapter.getDescription());
            pre.setInt(3, chapter.getSubject_id());
            pre.setInt(4, chapter.getId());
            n = pre.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ChapterDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return n;
    }

    //delete chapter theo id
    public int deleteChapter(int id) {
        int n = 0;
        String sql = "DELETE FROM chapter WHERE id = ?";
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setInt(1, id);
            n = pre.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ChapterDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return n;
    }

    //tim chapter theo id
    public Chapter findChapterById(int id) {
        String sql = "SELECT * FROM chapter WHERE id = ?";
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setInt(1, id);
            ResultSet rs = pre.executeQuery();
            while (rs.next()) {
                return new Chapter(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("description"),
                        rs.getInt("subject_id")
                );
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChapterDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    //tim Chapter theo name
    public List<Chapter> findChapterByName (String name) {
        List<Chapter> list = new ArrayList<>();
        String sql = "SELECT * FROM CHAPTER WHERE name LIKE ?";
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setString(1, "%" + name + "%");
            ResultSet rs = pre.executeQuery();
            while (rs.next()) {
                Chapter chapter = new Chapter(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("description"),
                    rs.getInt("subject_id")
                    );
                list.add(chapter);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChapterDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    //tim chapter theo subject_id
    public List<Chapter> findChapterBySubjectId (int subject_id) {
        List<Chapter> list = new ArrayList<>();
        String sql = "SELECT * FROM CHAPTER WHERE subject_id = ?";
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setInt(1, subject_id);
            ResultSet rs = pre.executeQuery();
            while (rs.next()) {
                Chapter chapter = new Chapter(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("description"),
                    rs.getInt("subject_id")
                );
                list.add(chapter);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChapterDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    

//    public static void main(String[] args) {
//        ChapterDAO daoC = new ChapterDAO();
//        List<Chapter> list = daoC.getChapter("select * from chapter");
//        int n = daoC.addChapter(new Chapter(3, ":Rơi tự do", "Giới thiệu về rơi tự do",1));
//        for (Chapter chapter : list) {
//            System.out.println(chapter);
//        }
//    }
}

================
File: src/java/dal/ChatQADAO.java
================
package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.ChatQA;

public class ChatQADAO extends DBContext {

    public List<ChatQA> findAll() throws SQLException {
        List<ChatQA> list = new ArrayList<>();
        String sql = "SELECT * FROM chat_qa ORDER BY id DESC";
        try (PreparedStatement ps = connection.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                ChatQA qa = new ChatQA();
                qa.setId(rs.getInt("id"));
                qa.setQuestion(rs.getString("question"));
                qa.setKey(rs.getString("key"));
                qa.setAnswer(rs.getString("answer"));
                list.add(qa);
            }
        }
        return list;
    }

    public ChatQA findById(int id) throws SQLException {
        String sql = "SELECT * FROM chat_qa WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    ChatQA qa = new ChatQA();
                    qa.setId(rs.getInt("id"));
                    qa.setQuestion(rs.getString("question"));
                    qa.setKey(rs.getString("key"));
                    qa.setAnswer(rs.getString("answer"));
                    return qa;
                }
            }
        }
        return null;
    }

    public boolean insert(ChatQA qa) throws SQLException {
        String sql = "INSERT INTO chat_qa (question, `key`, answer) VALUES (?, ?, ?)";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, qa.getQuestion());
            ps.setString(2, qa.getKey());
            ps.setString(3, qa.getAnswer());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean update(ChatQA qa) throws SQLException {
        String sql = "UPDATE chat_qa SET question = ?, `key` = ?, answer = ? WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, qa.getQuestion());
            ps.setString(2, qa.getKey());
            ps.setString(3, qa.getAnswer());
            ps.setInt(4, qa.getId());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean delete(int id) throws SQLException {
        String sql = "DELETE FROM chat_qa WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            return ps.executeUpdate() > 0;
        }
    }

    public List<ChatQA> findByKey(String keyword) throws SQLException {
        List<ChatQA> list = new ArrayList<>();
        String sql = "SELECT * FROM chat_qa WHERE `key` LIKE ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, "%" + keyword + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    ChatQA qa = new ChatQA();
                    qa.setId(rs.getInt("id"));
                    qa.setQuestion(rs.getString("question"));
                    qa.setKey(rs.getString("key"));
                    qa.setAnswer(rs.getString("answer"));
                    list.add(qa);
                }
            }
        }
        return list;
    }
}

================
File: src/java/dal/DAOSubject.java
================
package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Subject;

public class DAOSubject extends DBContext {

    public List<Subject> findAll() throws SQLException {
        String sql = "SELECT * FROM subject";
        List<Subject> subjects = new ArrayList<>();
        try (PreparedStatement ps = connection.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Subject sub = new Subject();
                sub.setId(rs.getInt("id"));
                sub.setName(rs.getString("name"));
                sub.setDescription(rs.getString("description"));
                sub.setGrade_id(rs.getInt("grade_id"));
                subjects.add(sub);
            }
        }
        return subjects;
    }

    public List<Subject> findByNameOfSubject(String name) throws SQLException {
        String sql = "SELECT * FROM subject WHERE name LIKE ?";
        List<Subject> subjects = new ArrayList<>();
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, "%" + name + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Subject sub = new Subject();
                    sub.setId(rs.getInt("id"));
                    sub.setName(rs.getString("name"));
                    sub.setDescription(rs.getString("description"));
                    sub.setGrade_id(rs.getInt("grade_id"));
                    subjects.add(sub);
                }
            }
        }
        return subjects;
    }

    public boolean insert(Subject subject) throws SQLException {
        String sql = "INSERT INTO subject (name, description, grade_id) VALUES (?, ?, ?)";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, subject.getName());
            ps.setString(2, subject.getDescription());
            ps.setInt(3, subject.getGrade_id());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean delete(int id) throws SQLException {
        String sql = "DELETE FROM subject WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            return ps.executeUpdate() > 0;
        }
    }

    public boolean update(Subject subject) throws SQLException {
        String sql = "UPDATE subject SET name = ?, description = ?, grade_id = ? WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, subject.getName());
            ps.setString(2, subject.getDescription());
            ps.setInt(3, subject.getGrade_id());
            ps.setInt(4, subject.getId());
            return ps.executeUpdate() > 0;
        }
    }

    public Subject findById(int id) throws SQLException {
        String sql = "SELECT * FROM subject WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    Subject sub = new Subject();
                    sub.setId(rs.getInt("id"));
                    sub.setName(rs.getString("name"));
                    sub.setDescription(rs.getString("description"));
                    sub.setGrade_id(rs.getInt("grade_id"));
                    return sub;
                }
            }
        }
        return null;
    }

    public int countSubjects() throws SQLException {
        String sql = "SELECT COUNT(*) FROM subject";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}

================
File: src/java/dal/DBContext.java
================
package dal;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

//Kết nối DB // đổi lại thành connectionMysql
public class DBContext {

    protected Connection connection;
    private static final String URL = "jdbc:mysql://localhost:3306/db-script";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "@Quocan12";

    public DBContext() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            this.connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            System.out.println("kết nối thành công");
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    public Connection getConnection() {
        try {
            // Kiểm tra kết nối hiện tại
            if (connection == null || connection.isClosed()) {
                connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
                System.out.println("Database connection re-established");
            }
        } catch (SQLException e) {
            System.out.println("Error checking/creating database connection: " + e.getMessage());
            e.printStackTrace();
        }
        return connection;
    }

    public static void main(String[] args) {
        new DBContext();
    }
}

================
File: src/java/dal/GradeDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import model.Grade;

/**
 *
 * @author ADMIN
 */
public class GradeDAO extends DBContext {

    // hien thi full grade
    public List<Grade> findAllFromGrade() throws SQLException {
        String sql = "SELECT * FROM grade";
        List<Grade> grades = new ArrayList<>();
        try (PreparedStatement ps = connection.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Grade gra = new Grade();
                gra.setId(rs.getInt("id"));
                gra.setName(rs.getString("name"));
                gra.setDescription(rs.getString("description"));
                gra.setTeacher_id(rs.getInt("teacher_id"));
                grades.add(gra);
            }
        }
        return grades;
    }
    // Tìm grade qua name

    public List<Grade> findByName(String name) throws SQLException {
        String sql = "SELECT * FROM grade WHERE name = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, name);
            try (ResultSet rs = ps.executeQuery()) {
                List<Grade> grades = new ArrayList<>();
                while (rs.next()) {
                    Grade gra = new Grade();
                    gra.setId(rs.getInt("id"));
                    gra.setName(rs.getString("name"));
                    gra.setDescription(rs.getString("description"));
                    gra.setTeacher_id(rs.getInt("teacher_id"));
                    grades.add(gra);
                }
                return grades;
            }
        }
    }

    // tao new grade
    public boolean insert(Grade grade) throws SQLException {
        String sql = "INSERT INTO grade ( name, description, teacher_id) "
                + "VALUES (?, ?, ?)";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {

            ps.setString(1, grade.getName());
            ps.setString(2, grade.getDescription());
            ps.setInt(3, grade.getTeacher_id());

            return ps.executeUpdate() > 0;
        }
    }

    // remove grade
    public boolean delete(int id) throws SQLException {
        String sql = "DELETE FROM grade WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            return ps.executeUpdate() > 0;
        }
    }

    // update grade
    public boolean update(Grade grade) throws SQLException {
        String sql = "UPDATE grade SET name = ?, description = ?, teacher_id = ? WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, grade.getName());
            ps.setString(2, grade.getDescription());
            ps.setInt(3, grade.getTeacher_id());
            ps.setInt(4, grade.getId());
            return ps.executeUpdate() > 0;
        }
    }

    // lay ID
    public Grade getGradeById(int id) throws SQLException {
        String sql = "SELECT * FROM grade WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    Grade gra = new Grade();
                    gra.setId(rs.getInt("id"));
                    gra.setName(rs.getString("name"));
                    gra.setDescription(rs.getString("description"));
                    gra.setTeacher_id(rs.getInt("teacher_id"));
                    return gra;
                }
            }
        }
        return null; // nếu không tìm thấy
    }

    public int countGrades() throws SQLException {
        String sql = "SELECT COUNT(*) FROM grade";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}

================
File: src/java/dal/ImageDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Image;

/**
 *
 * @author BuiNgocLinh
 */
public class ImageDAO extends DBContext {

    public ImageDAO(Connection connection) {
        this.connection = connection;
    }

    public Image findImageById(int id) {
        String sql = "SELECT * FROM image WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setInt(1, id);
            try (ResultSet rs = statement.executeQuery()) {
                if (rs.next()) {
                    Image image = new Image();
                    image.setId(rs.getInt("id"));
                    image.setImage_data(rs.getString("image_data"));
                    return image;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public List<Image> findAll() throws SQLException {
        String sql = "SELECT * FROM image";
        List<Image> images = new ArrayList<>();
        try (PreparedStatement ps = connection.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Image image = new Image();
                image.setId(rs.getInt("id"));
                image.setImage_data(rs.getString("image_data"));
                images.add(image);
            }
        }
        return images;
    }

    public int insertImage(Image image) throws SQLException {
        String sql = "INSERT INTO image (image_data) VALUES (?)";
        PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, image.getImage_data());
        int affectedRows = ps.executeUpdate();

        if (affectedRows == 0) {
            throw new SQLException("Creating image failed, no rows affected.");
        }

        try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
            if (generatedKeys.next()) {
                return generatedKeys.getInt(1);
            } else {
                throw new SQLException("Creating image failed, no ID obtained.");
            }
        }
    }

}

================
File: src/java/dal/InvoiceDAO.java
================
package dal;

import model.Invoice;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

public class InvoiceDAO extends DBContext {

    public int insertInvoice(Invoice invoice) {
        String sql = "INSERT INTO invoice (total_amount, parent_id, created_at, status, update_at) VALUES (?, ?, ?, ?, ?)";
        int generatedId = -1;

        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            stmt.setString(1, invoice.getTotal_amount());
            stmt.setInt(2, invoice.getParent_id());
            stmt.setDate(3, Date.valueOf(invoice.getCreated_at()));
            stmt.setString(4, invoice.getStatus());
            if (invoice.getPay_at() != null) {
                stmt.setDate(5, Date.valueOf(invoice.getPay_at()));
            } else {
                stmt.setNull(5, Types.DATE);
            }

            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                // Lấy ID được tạo tự động
                try (ResultSet rs = stmt.getGeneratedKeys()) {
                    if (rs.next()) {
                        generatedId = rs.getInt(1);
                        invoice.setId(generatedId);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return generatedId;
    }

    public void updateInvoice(Invoice invoice) {
        String sql = "UPDATE invoice SET total_amount = ?, parent_id = ?, created_at = ?, status = ?, update_at = ? WHERE id = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, invoice.getTotal_amount());
            stmt.setInt(2, invoice.getParent_id());
            stmt.setDate(3, Date.valueOf(invoice.getCreated_at()));
            stmt.setString(4, invoice.getStatus());
            if (invoice.getPay_at() != null) {
                stmt.setDate(5, Date.valueOf(invoice.getPay_at()));
            } else {
                stmt.setNull(5, Types.DATE);
            }
            stmt.setInt(6, invoice.getId());

            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Phương thức mới để cập nhật trạng thái hóa đơn sau khi thanh toán
    public void updateInvoiceStatus(Invoice invoice) {
        // Lấy thông tin invoice hiện tại
        Invoice currentInvoice = getInvoiceById(invoice.getId());
        if (currentInvoice == null) {
            System.out.println("Error: Invoice not found with ID " + invoice.getId());
            return;
        }

        String sql = "UPDATE invoice SET status = ?, update_at = ? WHERE id = ?";
        System.out.println("Updating invoice status - SQL: " + sql);
        System.out.println("Invoice ID: " + invoice.getId() + ", Status: " + invoice.getStatus() + ", Pay Date: " + invoice.getPay_at());

        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, invoice.getStatus());
            stmt.setDate(2, invoice.getPay_at() != null ? Date.valueOf(invoice.getPay_at()) : Date.valueOf(LocalDate.now()));
            stmt.setInt(3, invoice.getId());

            int rowsAffected = stmt.executeUpdate();
            System.out.println("Update invoice status result: " + rowsAffected + " rows affected");

            // Đảm bảo cập nhật thành công
            if (rowsAffected <= 0) {
                System.out.println("Warning: No rows affected when updating invoice status");
            }
        } catch (SQLException e) {
            System.out.println("Error updating invoice status: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Phương thức mới để thêm dòng chi tiết hóa đơn
    public void insertInvoiceLine(int invoiceId, int packageId) {
        String sql = "INSERT INTO invoice_line (invoice_id, package_id) VALUES (?, ?)";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, invoiceId);
            stmt.setInt(2, packageId);

            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteInvoice(int id) {
        String sql = "DELETE FROM invoice WHERE id = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Invoice> getAllInvoices() {
        List<Invoice> list = new ArrayList<>();
        String sql = "SELECT * FROM invoice";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                Invoice invoice = new Invoice(
                        rs.getInt("id"),
                        rs.getString("total_amount"),
                        rs.getInt("parent_id"),
                        rs.getDate("created_at").toLocalDate(),
                        rs.getString("status"),
                        rs.getDate("update_at") != null ? rs.getDate("update_at").toLocalDate() : null
                );
                list.add(invoice);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return list;
    }

    public Invoice getInvoiceById(int id) {
        Invoice invoice = null;
        String sql = "SELECT * FROM invoice WHERE id = ?";

        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                invoice = new Invoice();
                invoice.setId(rs.getInt("id"));
                invoice.setTotal_amount(rs.getString("total_amount"));
                invoice.setParent_id(rs.getInt("parent_id"));
                invoice.setCreated_at(rs.getDate("created_at").toLocalDate());
                invoice.setStatus(rs.getString("status"));
                invoice.setPay_at(rs.getDate("update_at") != null ? rs.getDate("update_at").toLocalDate() : null);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return invoice;
    }

    public List<Map<String, Object>> getMonthlyRevenue() {
        List<Map<String, Object>> monthlyRevenue = new ArrayList<>();
        String sql = "SELECT YEAR(created_at) as year, MONTH(created_at) as month, SUM(CAST(total_amount AS DECIMAL(10,2))) as revenue "
                + "FROM invoice WHERE created_at >= DATE_SUB(NOW(), INTERVAL 12 MONTH) "
                + "GROUP BY YEAR(created_at), MONTH(created_at) ORDER BY year, month";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Map<String, Object> data = new HashMap<>();
                data.put("year", rs.getInt("year"));
                data.put("month", rs.getInt("month"));
                data.put("revenue", rs.getDouble("revenue"));
                monthlyRevenue.add(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return monthlyRevenue;
    }

    public double getTotalRevenue() {
        String sql = "SELECT SUM(CAST(total_amount AS DECIMAL(10,2))) as total FROM invoice";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getDouble("total");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0.0;
    }
}

================
File: src/java/dal/LessonDAO.java
================
package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Lesson;

public class LessonDAO extends DBContext {

    public List<Lesson> getAllLessons() {
        List<Lesson> list = new ArrayList<>();
        String sql = "SELECT * FROM lesson";
        try (PreparedStatement ps = connection.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Lesson lesson = new Lesson(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("content"),
                        rs.getInt("chapter_id"),
                        rs.getString("video_link")
                );
                list.add(lesson);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public Lesson getLessonById(int id) {
        String sql = "SELECT * FROM lesson WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new Lesson(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getString("content"),
                            rs.getInt("chapter_id"),
                            rs.getString("video_link")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void addLesson(Lesson lesson) {
        String sql = "INSERT INTO lesson(name, content, chapter_id, video_link) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, lesson.getName());
            ps.setString(2, lesson.getContent());
            ps.setInt(3, lesson.getChapter_id());
            ps.setString(4, lesson.getVideo_link());
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void updateLesson(Lesson lesson) {
        String sql = "UPDATE lesson SET name = ?, content = ?, chapter_id = ?, video_link = ? WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, lesson.getName());
            ps.setString(2, lesson.getContent());
            ps.setInt(3, lesson.getChapter_id());
            ps.setString(4, lesson.getVideo_link());
            ps.setInt(5, lesson.getId());
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteLesson(int id) {
        String sql = "DELETE FROM lesson WHERE id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Lesson> searchByName(String name) {
        List<Lesson> list = new ArrayList<>();
        String sql = "SELECT * FROM lesson WHERE name LIKE ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, "%" + name + "%");
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Lesson lesson = new Lesson(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getString("content"),
                            rs.getInt("chapter_id"),
                            rs.getString("video_link")
                    );
                    list.add(lesson);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public int countLessons() {
        String sql = "SELECT COUNT(*) FROM lesson";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }
}

================
File: src/java/dal/PackageSubjectDAO.java
================
package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.PackageSubject;

public class PackageSubjectDAO extends DBContext {

    public List<PackageSubject> getAll() {
        List<PackageSubject> list = new ArrayList<>();
        String sql = "SELECT * FROM package_subject";
        try (PreparedStatement ps = connection.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                list.add(new PackageSubject(
                    rs.getInt("package_id"),
                    rs.getInt("subject_id")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public PackageSubject getById(int packageId, int subjectId) {
        String sql = "SELECT * FROM package_subject WHERE package_id = ? AND subject_id = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, packageId);
            ps.setInt(2, subjectId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return new PackageSubject(
                        rs.getInt("package_id"),
                        rs.getInt("subject_id")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void insert(PackageSubject ps) {
        String sql = "INSERT INTO package_subject (package_id, subject_id) VALUES (?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, ps.getPackage_id());
            stmt.setInt(2, ps.getSubject_id());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void update(PackageSubject ps, int oldPackageId, int oldSubjectId) {
        String sql = "UPDATE package_subject SET package_id = ?, subject_id = ? WHERE package_id = ? AND subject_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, ps.getPackage_id());
            stmt.setInt(2, ps.getSubject_id());
            stmt.setInt(3, oldPackageId);
            stmt.setInt(4, oldSubjectId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void delete(int packageId, int subjectId) {
        String sql = "DELETE FROM package_subject WHERE package_id = ? AND subject_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, packageId);
            stmt.setInt(2, subjectId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

================
File: src/java/dal/QuestionDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Question;

/**
 *
 * @author Na
 */
public class QuestionDAO extends DBContext {

    public Connection getDBConnection() {
        return this.connection;
    }

    public List<Question> findAllQuestion() throws SQLException {
        List<Question> list = new ArrayList<>();
        String sql = "SELECT * FROM Question";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Question q = new Question(
                        rs.getInt("id"),
                        rs.getString("question"),
                        rs.getInt("image_id"),
                        rs.getInt("lesson_id"),
                        rs.getString("question_type")
                );
                list.add(q);
            }
        }
        return list;
    }

    public Question getQuestionById(int id) throws SQLException {
        String sql = "SELECT * FROM Question WHERE id = ?";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new Question(
                            rs.getInt("id"),
                            rs.getString("question"),
                            rs.getInt("image_id"),
                            rs.getInt("lesson_id"),
                            rs.getString("question_type")
                    );
                }
            }
        }
        return null;
    }

    public void insert(Question question) throws SQLException {
        String sql = "INSERT INTO question (question, image_id, lesson_id, question_type) VALUES (?, ?, ?, ?)";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, question.getQuestion());
            if (question.getImage_id() == 0) {
                stmt.setNull(2, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(2, question.getImage_id());
            }
            stmt.setInt(3, question.getLesson_id());
            stmt.setString(4, question.getQuestion_type());
            stmt.executeUpdate();
        }
    }

    public void update(Question question) throws SQLException {
        String sql = "UPDATE Question SET question = ?, image_id = ?, lesson_id = ?, question_type = ? WHERE id = ?";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, question.getQuestion());
            if (question.getImage_id() == 0) {
                stmt.setNull(2, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(2, question.getImage_id());
            }
            stmt.setInt(3, question.getLesson_id());
            stmt.setString(4, question.getQuestion_type());
            stmt.setInt(5, question.getId());
            stmt.executeUpdate();
        }
    }

    public void delete(int id) throws SQLException {
        String sql = "DELETE FROM Question WHERE id = ?";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }

    public List<Question> findByQuestion(String keyword) throws SQLException {
        List<Question> list = new ArrayList<>();
        String sql = "SELECT * FROM Question WHERE question LIKE ?";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, "%" + keyword + "%");
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Question q = new Question(
                            rs.getInt("id"),
                            rs.getString("question"),
                            rs.getInt("image_id"),
                            rs.getInt("lesson_id"),
                            rs.getString("question_type")
                    );
                    list.add(q);
                }
            }
        }
        return list;
    }

    // Lấy câu hỏi theo test
    public List<Question> getQuestionsByTest(int testId) throws SQLException {
        System.out.println("\n----- GETTING QUESTIONS FOR TEST " + testId + " -----");
        List<Question> list = new ArrayList<>();

        // Đầu tiên kiểm tra test có tồn tại không
        String checkTestSql = "SELECT id, name, is_practice FROM test WHERE id = ?";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(checkTestSql)) {
            stmt.setInt(1, testId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("Found test: ID=" + rs.getInt("id")
                            + ", Name='" + rs.getString("name")
                            + "', is_practice=" + rs.getBoolean("is_practice"));
                } else {
                    System.out.println("WARNING: Test ID " + testId + " not found!");
                }
            }
        }

        String sql = """
            SELECT q.* FROM question q
            JOIN test_question tq ON q.id = tq.question_id
            WHERE tq.test_id = ?
        """;

        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, testId);
            System.out.println("Executing SQL: " + sql.replace("\n", " ") + " with test_id=" + testId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Question q = new Question(
                            rs.getInt("id"),
                            rs.getString("question"),
                            rs.getInt("image_id"),
                            rs.getInt("lesson_id"),
                            rs.getString("question_type")
                    );
                    list.add(q);
                    System.out.println("Found question: ID=" + q.getId()
                            + ", Lesson ID=" + q.getLesson_id()
                            + ", Question='" + q.getQuestion().substring(0, Math.min(30, q.getQuestion().length())) + "...'");
                }
            }
        }

        // Kiểm tra số lượng câu hỏi tìm thấy
        System.out.println("Total questions found for test " + testId + ": " + list.size());

        // Nếu không tìm thấy câu hỏi nào, kiểm tra xem bảng test_question có dữ liệu không
        if (list.isEmpty()) {
            String checkSql = "SELECT COUNT(*) as count FROM test_question WHERE test_id = ?";
            try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(checkSql)) {
                stmt.setInt(1, testId);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        int count = rs.getInt("count");
                        System.out.println("Test_question table has " + count + " entries for test " + testId);

                        if (count == 0) {
                            // Nếu không có question nào được gán cho test này, thử lấy tất cả câu hỏi từ lesson_id
                            String testLessonSql = "SELECT lesson_id FROM test WHERE id = ?";
                            try (PreparedStatement lessonStmt = conn.prepareStatement(testLessonSql)) {
                                lessonStmt.setInt(1, testId);
                                try (ResultSet lessonRs = lessonStmt.executeQuery()) {
                                    if (lessonRs.next()) {
                                        int lessonId = lessonRs.getInt("lesson_id");
                                        if (lessonId > 0) {
                                            System.out.println("Test is linked to lesson ID: " + lessonId + ". Getting questions from that lesson.");
                                            List<Question> lessonQuestions = getQuestionsByLesson(lessonId);
                                            return lessonQuestions;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        System.out.println("----- FINISHED GETTING QUESTIONS -----\n");
        return list;
    }

    // Lấy tất cả câu hỏi của một lesson
    public List<Question> getQuestionsByLesson(int lessonId) throws SQLException {
        System.out.println("\n----- GETTING QUESTIONS FOR LESSON " + lessonId + " -----");
        List<Question> list = new ArrayList<>();

        // Kiểm tra lesson có tồn tại không
        String checkLessonSql = "SELECT id, title FROM lesson WHERE id = ?";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(checkLessonSql)) {
            stmt.setInt(1, lessonId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("Found lesson: ID=" + rs.getInt("id")
                            + ", Title='" + rs.getString("title") + "'");
                } else {
                    System.out.println("WARNING: Lesson ID " + lessonId + " not found!");
                }
            }
        }

        String sql = "SELECT * FROM question WHERE lesson_id = ?";
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, lessonId);
            System.out.println("Executing SQL: " + sql + " with lesson_id=" + lessonId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Question q = new Question(
                            rs.getInt("id"),
                            rs.getString("question"),
                            rs.getInt("image_id"),
                            rs.getInt("lesson_id"),
                            rs.getString("question_type")
                    );
                    list.add(q);
                    System.out.println("Found question: ID=" + q.getId()
                            + ", Question='" + q.getQuestion().substring(0, Math.min(30, q.getQuestion().length())) + "...'");
                }
            }
        }

        System.out.println("Total questions found for lesson " + lessonId + ": " + list.size());
        System.out.println("----- FINISHED GETTING QUESTIONS -----\n");
        return list;
    }

    // Lấy câu hỏi ngẫu nhiên theo category
    public List<Question> getRandomQuestionsByCategory(int categoryId, int numQuestions) throws SQLException {
        List<Question> list = new ArrayList<>();
        String sql = """
            SELECT q.* FROM question q
            JOIN lesson l ON q.lesson_id = l.id
            JOIN chapter ch ON l.chapter_id = ch.id
            JOIN subject s ON ch.subject_id = s.id
            JOIN test t ON t.category_id = ?
            ORDER BY RAND()
            LIMIT ?
        """;
        try (Connection conn = new DBContext().getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, categoryId);
            stmt.setInt(2, numQuestions);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Question q = new Question(
                            rs.getInt("id"),
                            rs.getString("question"),
                            rs.getInt("image_id"),
                            rs.getInt("lesson_id"),
                            rs.getString("question_type")
                    );
                    list.add(q);
                }
            }
        }
        return list;
    }

    public int countQuestions() throws SQLException {
        String sql = "SELECT COUNT(*) FROM question";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}

================
File: src/java/dal/StudentDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import config.PasswordUtil;
import model.Student;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author BuiNgocLinh
 */
public class StudentDAO extends DBContext {

    private final PasswordUtil passwordEncode = new PasswordUtil();

    public List<Student> searchByKeyword(String keyword) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM student WHERE full_name LIKE ? OR username LIKE ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            String likePattern = "%" + keyword + "%";
            stmt.setString(1, likePattern);
            stmt.setString(2, likePattern);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Student s = new Student();
                    s.setId(rs.getInt("id"));
                    s.setGrade_id(rs.getInt("grade_id"));
                    s.setParent_id(rs.getInt("parent_id"));
                    s.setUsername(rs.getString("username"));
                    s.setPassword(rs.getString("password"));
                    s.setFull_name(rs.getString("full_name"));
                    s.setDob(rs.getDate("dob").toLocalDate());
                    s.setSex(rs.getBoolean("sex"));
                    s.setImage_id(rs.getInt("image_id"));
                    list.add(s);
                }
            }
        }
        return list;
    }

    public List<Student> findAll() throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM student";
        try (PreparedStatement stmt = connection.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Student s = new Student(
                        rs.getInt("id"),
                        rs.getInt("grade_id"),
                        rs.getInt("parent_id"),
                        rs.getString("username"),
                        rs.getString("password"),
                        rs.getString("full_name"),
                        rs.getDate("dob").toLocalDate(),
                        rs.getBoolean("sex"),
                        rs.getInt("image_id")
                );
                list.add(s);
            }
        }
        return list;
    }

    public void insert(Student student) throws SQLException {
        String sql = "INSERT INTO student (grade_id, parent_id, username, password, full_name, dob, sex, image_id)\n"
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, student.getGrade_id());
            stmt.setInt(2, student.getParent_id());
            stmt.setString(3, student.getUsername());
            stmt.setString(4, passwordEncode.hashPassword(student.getPassword()));
            stmt.setString(5, student.getFull_name());
            stmt.setDate(6, java.sql.Date.valueOf(student.getDob()));
            stmt.setBoolean(7, student.isSex());
            if (student.getImage_id() == 0) {
                stmt.setNull(8, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(8, student.getImage_id());
            }
            stmt.executeUpdate();
        }
    }

    public void update(Student student) throws SQLException {
        String sql = "UPDATE Student SET grade_id = ?, parent_id = ?, username = ?, password = ?, full_name = ?, dob = ?, sex = ?, image_id = ? WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, student.getGrade_id());
            stmt.setInt(2, student.getParent_id());
            stmt.setString(3, student.getUsername());
            stmt.setString(4, passwordEncode.hashPassword(student.getPassword()));
            stmt.setString(5, student.getFull_name());
            stmt.setDate(6, java.sql.Date.valueOf(student.getDob()));
            stmt.setBoolean(7, student.isSex());
            if (student.getImage_id() == 0) {
                stmt.setNull(8, java.sql.Types.INTEGER);
            } else {
                stmt.setInt(8, student.getImage_id());
            }
            stmt.setInt(9, student.getId());

            stmt.executeUpdate();
        }
    }

    /**
     * Validates if the provided password matches the stored password for a
     * student
     *
     * @param student The student object containing the stored password
     * @param providedPassword The password to validate
     * @return true if the password matches, false otherwise
     */
    public boolean validatePassword(Student student, String providedPassword) {
        String storedPassword = student.getPassword();
        return passwordEncode.checkPassword(providedPassword, storedPassword);
    }

    public void delete(int id) throws SQLException {
        String deleteQuesRecordSql = "DELETE FROM question_record WHERE test_record_id IN (SELECT id FROM test_record WHERE student_id = ?)";
        String deleteTestRecordSql = "DELETE FROM test_record WHERE student_id = ?";
        String deleteStudentSql = "DELETE FROM student WHERE id = ?";

        try (
                PreparedStatement stmt1 = connection.prepareStatement(deleteQuesRecordSql); PreparedStatement stmt2 = connection.prepareStatement(deleteTestRecordSql); PreparedStatement stmt3 = connection.prepareStatement(deleteStudentSql)) {
            connection.setAutoCommit(false);

            // 1. Xóa các bản ghi question_record liên quan
            stmt1.setInt(1, id);
            stmt1.executeUpdate();

            // 2. Xóa test_record của học sinh
            stmt2.setInt(1, id);
            stmt2.executeUpdate();

            // 3. Xóa học sinh
            stmt3.setInt(1, id);
            stmt3.executeUpdate();

            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            connection.setAutoCommit(true);
        }
    }

    public Student findById(int id) throws SQLException {
        String sql = "SELECT * FROM student WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new Student(
                            rs.getInt("id"),
                            rs.getInt("grade_id"),
                            rs.getInt("parent_id"),
                            rs.getString("username"),
                            rs.getString("password"),
                            rs.getString("full_name"),
                            rs.getDate("dob").toLocalDate(),
                            rs.getBoolean("sex"),
                            rs.getInt("image_id")
                    );
                }
            }
        }
        return null;
    }

    public List<Student> getStudentsByPage(int offset, int limit) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM student LIMIT ?, ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, offset);
            ps.setInt(2, limit);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Student s = new Student(
                        rs.getInt("id"),
                        rs.getInt("grade_id"),
                        rs.getInt("parent_id"),
                        rs.getString("username"),
                        rs.getString("password"),
                        rs.getString("full_name"),
                        rs.getDate("dob").toLocalDate(),
                        rs.getBoolean("sex"),
                        rs.getInt("image_id")
                );
                list.add(s);
            }
        }
        return list;
    }

    public int countStudents() throws SQLException {
        String sql = "SELECT COUNT(*) FROM student";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    public Student checkLogin(String username, String password) {
        Student student = null;
        String sql = "SELECT * FROM student WHERE username = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, username);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int id = rs.getInt("id");
                    String passwordHash = rs.getString("password");
                    if (passwordEncode.checkPassword(password, passwordHash)) {
                        int grade_id = rs.getInt("grade_id");
                        int parent_id = rs.getInt("parent_id");
                        String fullName = rs.getString("full_name");
                        LocalDate dob = rs.getDate("dob").toLocalDate();
                        boolean sex = rs.getBoolean("sex");
                        int image_id = rs.getInt("image_id");
                        student = new Student(id, grade_id, parent_id, username, password, fullName, dob, sex, image_id);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return student;
    }

    public List<Student> getStudentsByParentId(int parentId) throws SQLException {
        List<Student> list = new ArrayList<>();
        String sql = "SELECT * FROM student WHERE parent_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, parentId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Student s = new Student(
                            rs.getInt("id"),
                            rs.getInt("grade_id"),
                            rs.getInt("parent_id"),
                            rs.getString("username"),
                            rs.getString("password"),
                            rs.getString("full_name"),
                            rs.getDate("dob").toLocalDate(),
                            rs.getBoolean("sex"),
                            rs.getInt("image_id")
                    );
                    list.add(s);
                }
            }
        }
        return list;
    }

    public static void main(String[] args) {
        StudentDAO dao = new StudentDAO();

        try {
            dao.delete(3);
            System.out.println("Xóa thành công!");
        } catch (SQLException e) {
            System.out.println("Lỗi khi xóa: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

================
File: src/java/dal/StudyPackageDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

package dal;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.StudyPackage;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Na
 */
public class StudyPackageDAO extends DBContext {
    
    //Hien ra list cac goi hoc
    public List<StudyPackage> getStudyPackage(String sql) {
        List<StudyPackage> list = new ArrayList<>();
        
        try {
            Statement state = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = state.executeQuery(sql);
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                String price = rs.getString("price");
                StudyPackage stuPackage = new StudyPackage(id, name, price);
                list.add(stuPackage);
            }
        } catch (SQLException ex) {
            Logger.getLogger(StudyPackageDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    //add them goi hoc moi
    public int addStudyPackage (StudyPackage stuPackage) {
        int n = 0;
        String sql = "INSERT INTO STUDY_PACKAGE (id, name, price)\n"
                + "     VALUES\n"
                + "(?, ?, ?)";
        
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setInt(1, stuPackage.getId());
            pre.setString(2, stuPackage.getName());
            pre.setString(3, stuPackage.getPrice());
            n = pre.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(StudyPackageDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return n;
    }
    
    //update cac goi hoc
    public int updateStudyPackage (StudyPackage stuPackage) {
        int n = 0;
        String sql = """
                     UPDATE study_package
                        SET name = ?
                           ,price = ?
                     WHERE id = ?
                     """;
        
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setString(1, stuPackage.getName());
            pre.setString(2, stuPackage.getPrice());
            pre.setInt(3, stuPackage.getId());
            n = pre.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(StudyPackageDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return n;
    }
    
    //delete cac goi hoc
    public int deleteStudyPackage (int id) {
        int n = 0;
        String sql = "DELETE FROM study_package WHERE id = ?";
        
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setInt(1, id);
            n = pre.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(StudyPackageDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return n;
    }
    
    //tim kiem goi hoc theo id
    public StudyPackage findStudyPackageById (int id) {
        String sql = "SELECT * FROM study_package WHERE id = ?";
        
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setInt(1, id);
            ResultSet rs = pre.executeQuery();
            while (rs.next()) {
                return new StudyPackage(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("price")
                );
            }
        } catch (SQLException ex) {
            Logger.getLogger(StudyPackageDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    //tim kiem goi hoc theo ten
    public List<StudyPackage> findStudyPackageByName (String name) {
        List<StudyPackage> list = new ArrayList<>();
        String sql = "SELECT * FROM STUDY_PACKAGE WHERE name LIKE ?";
        
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setString(1, "%" + name + "%");
            ResultSet rs = pre.executeQuery();
            while (rs.next()) {
                StudyPackage stuPackage = new StudyPackage(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("price")
                    );
                list.add(stuPackage);
            }
        } catch (SQLException ex) {
            Logger.getLogger(StudyPackageDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    //tim kiem goi hoc theo price
    public List<StudyPackage> findStudyPackageByPrice (String price) {
        List<StudyPackage> list = new ArrayList<>();
        String sql = "SELECT * FROM study_package WHERE price = ?";
        
        try {
            PreparedStatement pre = connection.prepareStatement(sql);
            pre.setString(1, price);
            ResultSet rs = pre.executeQuery();
            while (rs.next()) {
                StudyPackage stuPackage = new StudyPackage(
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("price")
                    );
                list.add(stuPackage);
            }
        } catch (SQLException ex) {
            Logger.getLogger(StudyPackageDAO.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
}

================
File: src/java/dal/TestDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import model.Test;
import java.sql.*;
import java.util.*;

/**
 *
 * @author Na
 */
public class TestDAO extends DBContext {

    private Connection conn;

    // ✅ Constructor khởi tạo kết nối
    public TestDAO() {
        try {
            this.conn = getConnection(); // Lấy connection từ DBContext
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public int addTest(Test test) {
        String sql = "INSERT INTO test (name, description, is_practice, category_id) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, test.getName());
            ps.setString(2, test.getDescription());
            ps.setBoolean(3, test.isIs_practice());
            ps.setInt(4, test.getCategory_id());
            ps.executeUpdate();

            // Lấy ID của test vừa tạo
            ResultSet rs = ps.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1; // Trả về -1 nếu có lỗi
    }

    public void updateTest(Test test) {
        String sql = "UPDATE test SET name = ?, description = ?, is_practice = ?, category_id = ? WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, test.getName());
            ps.setString(2, test.getDescription());
            ps.setBoolean(3, test.isIs_practice());
            ps.setInt(4, test.getCategory_id());
            ps.setInt(5, test.getId());
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteTest(int id) {
        try {
            // Start a transaction
            conn.setAutoCommit(false);

            // First delete related records in test_question table
            String deleteTestQuestions = "DELETE FROM test_question WHERE test_id = ?";
            try (PreparedStatement ps = conn.prepareStatement(deleteTestQuestions)) {
                ps.setInt(1, id);
                ps.executeUpdate();
            }

            // Then delete related records in test_record table
            String deleteTestRecords = "DELETE FROM test_record WHERE test_id = ?";
            try (PreparedStatement ps = conn.prepareStatement(deleteTestRecords)) {
                ps.setInt(1, id);
                ps.executeUpdate();
            }

            // Finally delete the test itself
            String deleteTest = "DELETE FROM test WHERE id = ?";
            try (PreparedStatement ps = conn.prepareStatement(deleteTest)) {
                ps.setInt(1, id);
                ps.executeUpdate();
            }

            // Commit the transaction
            conn.commit();
        } catch (SQLException e) {
            // Rollback in case of error
            try {
                conn.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        } finally {
            // Reset auto-commit
            try {
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public Test getTestById(int id) {
        String sql = "SELECT * FROM test WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new Test(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("description"),
                        rs.getBoolean("is_practice"),
                        rs.getInt("category_id")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public List<Test> getAllTests() {
        List<Test> list = new ArrayList<>();
        String sql = "SELECT * FROM test";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                list.add(new Test(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("description"),
                        rs.getBoolean("is_practice"),
                        rs.getInt("category_id")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // Lấy tests theo practice/official
    public List<Test> getTestsByType(boolean isPractice) {
        List<Test> list = new ArrayList<>();
        String sql = "SELECT * FROM test WHERE is_practice = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setBoolean(1, isPractice);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                list.add(new Test(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("description"),
                        rs.getBoolean("is_practice"),
                        rs.getInt("category_id")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // Lấy tests theo category
    public List<Test> getTestsByCategory(int categoryId) {
        List<Test> list = new ArrayList<>();
        String sql = "SELECT * FROM test WHERE category_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, categoryId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                list.add(new Test(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("description"),
                        rs.getBoolean("is_practice"),
                        rs.getInt("category_id")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // Kiểm tra và hiển thị thông tin test chi tiết
    public void debugTestInfo(int testId) {
        System.out.println("\n===== DEBUG TEST INFO: ID=" + testId + " =====");

        try {
            // 1. Lấy thông tin cơ bản của test
            String testSql = "SELECT * FROM test WHERE id = ?";
            try (PreparedStatement ps = conn.prepareStatement(testSql)) {
                ps.setInt(1, testId);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    System.out.println("Test basic info:");
                    System.out.println("  ID: " + rs.getInt("id"));
                    System.out.println("  Name: " + rs.getString("name"));
                    System.out.println("  Description: " + rs.getString("description"));
                    System.out.println("  Is Practice: " + rs.getBoolean("is_practice"));
                    System.out.println("  Category ID: " + rs.getInt("category_id"));

                    // Kiểm tra xem có lesson_id không
                    if (rs.getObject("lesson_id") != null) {
                        int lessonId = rs.getInt("lesson_id");
                        System.out.println("  Lesson ID: " + lessonId);

                        // Lấy thông tin lesson
                        String lessonSql = "SELECT * FROM lesson WHERE id = ?";
                        try (PreparedStatement psLesson = conn.prepareStatement(lessonSql)) {
                            psLesson.setInt(1, lessonId);
                            ResultSet rsLesson = psLesson.executeQuery();
                            if (rsLesson.next()) {
                                System.out.println("  Lesson Info:");
                                System.out.println("    Title: " + rsLesson.getString("title"));
                                System.out.println("    Chapter ID: " + rsLesson.getInt("chapter_id"));
                            } else {
                                System.out.println("  WARNING: Lesson ID " + lessonId + " does not exist in database!");
                            }
                        }
                    } else {
                        System.out.println("  No lesson linked to this test (lesson_id is NULL)");
                    }
                } else {
                    System.out.println("Test ID " + testId + " not found!");
                    return;
                }
            }

            // 2. Kiểm tra số lượng câu hỏi trong test
            String questionCountSql = "SELECT COUNT(*) as count FROM test_question WHERE test_id = ?";
            try (PreparedStatement ps = conn.prepareStatement(questionCountSql)) {
                ps.setInt(1, testId);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    int count = rs.getInt("count");
                    System.out.println("Questions in test: " + count);

                    // Lấy chi tiết các câu hỏi
                    if (count > 0) {
                        String questionsSql = """
                            SELECT q.id, q.question, q.lesson_id, COUNT(qo.id) as option_count
                            FROM test_question tq
                            JOIN question q ON tq.question_id = q.id
                            LEFT JOIN question_option qo ON q.id = qo.question_id
                            WHERE tq.test_id = ?
                            GROUP BY q.id, q.question, q.lesson_id
                        """;
                        try (PreparedStatement psQ = conn.prepareStatement(questionsSql)) {
                            psQ.setInt(1, testId);
                            ResultSet rsQ = psQ.executeQuery();

                            System.out.println("Question details:");
                            int i = 1;
                            while (rsQ.next()) {
                                System.out.println("  " + i + ". ID: " + rsQ.getInt("id")
                                        + ", Options: " + rsQ.getInt("option_count")
                                        + ", Lesson ID: " + rsQ.getInt("lesson_id")
                                        + ", Text: '" + rsQ.getString("question").substring(0, Math.min(30, rsQ.getString("question").length())) + "...'");
                                i++;
                            }
                        }
                    }
                }
            }

            // 3. Kiểm tra các bản ghi test đã làm
            String testRecordSql = "SELECT COUNT(*) as count FROM test_record WHERE test_id = ?";
            try (PreparedStatement ps = conn.prepareStatement(testRecordSql)) {
                ps.setInt(1, testId);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    System.out.println("Test records: " + rs.getInt("count"));
                }
            }

        } catch (SQLException e) {
            System.out.println("ERROR in debugTestInfo: " + e.getMessage());
            e.printStackTrace();
        }

        System.out.println("===== END DEBUG TEST =====\n");
    }

    // Thêm phương thức để lấy lesson_id của test
    public int getLessonIdByTest(int testId) {
        String sql = "SELECT lesson_id FROM test WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, testId);
            ResultSet rs = ps.executeQuery();
            if (rs.next() && rs.getObject("lesson_id") != null) {
                return rs.getInt("lesson_id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1; // Trả về -1 nếu không tìm thấy
    }

    public int countTests() throws SQLException {
        String sql = "SELECT COUNT(*) FROM test";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}

================
File: src/java/dal/TestQuestionDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import java.sql.*;
import java.util.*;
import model.TestQuestion;
/**
 *
 * @author Na
 */
public class TestQuestionDAO extends DBContext {
    private Connection conn;

    public TestQuestionDAO() {
        try {
            this.conn = getConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Thêm một câu hỏi vào test
     * @param testId ID của test
     * @param questionId ID của câu hỏi
     * @return true nếu thêm thành công, false nếu thất bại
     */
    public boolean addTestQuestion(int testId, int questionId) {
        String sql = "INSERT INTO test_question (test_id, question_id) VALUES (?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, testId);
            ps.setInt(2, questionId);
            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Xóa một câu hỏi khỏi test
     * @param testId ID của test
     * @param questionId ID của câu hỏi
     * @return true nếu xóa thành công, false nếu thất bại
     */
    public boolean removeTestQuestion(int testId, int questionId) {
        String sql = "DELETE FROM test_question WHERE test_id = ? AND question_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, testId);
            ps.setInt(2, questionId);
            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Xóa tất cả câu hỏi của một test
     * @param testId ID của test
     * @return true nếu xóa thành công, false nếu thất bại
     */
    public boolean removeAllQuestionsFromTest(int testId) {
        String sql = "DELETE FROM test_question WHERE test_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, testId);
            int rowsAffected = ps.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Lấy danh sách ID câu hỏi của một test
     * @param testId ID của test
     * @return Danh sách ID câu hỏi
     */
    public List<Integer> getQuestionIdsByTest(int testId) {
        List<Integer> list = new ArrayList<>();
        String sql = "SELECT question_id FROM test_question WHERE test_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, testId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                list.add(rs.getInt("question_id"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * Lấy danh sách TestQuestion của một test
     * @param testId ID của test
     * @return Danh sách TestQuestion
     */
    public List<TestQuestion> getTestQuestionsByTest(int testId) {
        List<TestQuestion> list = new ArrayList<>();
        String sql = "SELECT * FROM test_question WHERE test_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, testId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                TestQuestion tq = new TestQuestion(
                    rs.getInt("test_id"),
                    rs.getInt("question_id")
                );
                list.add(tq);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public void removeQuestionFromAllTests(int questionId) throws SQLException {
        String sql = "DELETE FROM test_question WHERE question_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, questionId);
            ps.executeUpdate();
        }
    }
}

================
File: src/java/dal/TestRecordDAO.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dal;

import model.TestRecord;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

/**
 *
 * @author Na
 */
public class TestRecordDAO extends DBContext {

    private Connection conn;

    public TestRecordDAO() {
        try {
            this.conn = getConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Tạo test record mới khi học sinh bắt đầu làm bài
    public int createTestRecord(int studentId, int testId) {
        String sql = "INSERT INTO test_record (student_id, test_id, started_at) VALUES (?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setInt(1, studentId);
            ps.setInt(2, testId);
            ps.setTimestamp(3, Timestamp.valueOf(LocalDateTime.now()));

            ps.executeUpdate();

            ResultSet rs = ps.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    // Cập nhật thời gian bắt đầu của test record
    public boolean updateStartTime(int testRecordId, Timestamp startTime) {
        String sql = "UPDATE test_record SET started_at = ? WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setTimestamp(1, startTime);
            ps.setInt(2, testRecordId);
            int rowsAffected = ps.executeUpdate();

            System.out.println("Updated start time for test record ID " + testRecordId + ": " + startTime);
            return rowsAffected > 0;
        } catch (SQLException e) {
            System.out.println("Error updating start time: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    // Hoàn thành test và tính điểm
    public void finishTestRecord(int testRecordId, double score) {
        System.out.println("\n** SAVING TEST RECORD: ID=" + testRecordId + ", SCORE=" + score + " **\n");

        // Method 1: Standard JDBC update
        String sql = "UPDATE test_record SET finish_at = ?, score = ? WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setTimestamp(1, Timestamp.valueOf(LocalDateTime.now()));
            ps.setDouble(2, score);
            ps.setInt(3, testRecordId);
            int updated = ps.executeUpdate();

            System.out.println("Method 1: Updated " + updated + " rows");

            // Verify save was successful
            String verifySql = "SELECT score FROM test_record WHERE id = ?";
            try (PreparedStatement psVerify = conn.prepareStatement(verifySql)) {
                psVerify.setInt(1, testRecordId);
                ResultSet rs = psVerify.executeQuery();
                if (rs.next()) {
                    double savedScore = rs.getDouble("score");
                    System.out.println("VERIFIED: Score saved in DB = " + savedScore);
                } else {
                    System.out.println("ERROR: Record not found after save!");
                }
            }
        } catch (SQLException e) {
            System.out.println("ERROR in finishTestRecord: " + e.getMessage());

            // Method 2: Fallback to direct statement
            try {
                String directSql = "UPDATE test_record SET finish_at = NOW(), score = " + score + " WHERE id = " + testRecordId;
                System.out.println("Trying direct SQL: " + directSql);

                try (Statement stmt = conn.createStatement()) {
                    int updated = stmt.executeUpdate(directSql);
                    System.out.println("Method 2: Updated " + updated + " rows with direct SQL");
                }
            } catch (SQLException e2) {
                System.out.println("ERROR in fallback update: " + e2.getMessage());
                e2.printStackTrace();
            }
        }
    }

    // Lấy test record theo ID
    public TestRecord getTestRecordById(int id) {
        String sql = "SELECT * FROM test_record WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                TestRecord record = new TestRecord();
                record.setId(rs.getInt("id"));
                record.setStudent_id(rs.getInt("student_id"));
                record.setTest_id(rs.getInt("test_id"));

                Timestamp startedAt = rs.getTimestamp("started_at");
                if (startedAt != null) {
                    record.setStarted_at(startedAt.toLocalDateTime());
                }

                Timestamp finishAt = rs.getTimestamp("finish_at");
                if (finishAt != null) {
                    record.setFinish_at(finishAt.toLocalDateTime());
                }

                double score = rs.getDouble("score");
                record.setScore(score);

                // DEBUG: Print retrieved score
                String debugMsg = "GET_TEST_RECORD_DEBUG: id=" + id + ", retrieved score=" + score;
                System.err.println(debugMsg);

                // Write to file for debug
                try {
                    java.io.FileWriter fw = new java.io.FileWriter("get_test_record_debug.txt", true);
                    fw.write(java.time.LocalDateTime.now() + ": " + debugMsg + "\n");
                    fw.close();
                } catch (Exception fe) {
                    System.err.println("File write error: " + fe.getMessage());
                }

                return record;
            }
        } catch (SQLException e) {
            System.err.println("GET_TEST_RECORD_ERROR: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    // Lấy tất cả test records đã hoàn thành của một học sinh
    public List<TestRecord> getTestRecordsByStudent(int studentId) {
        List<TestRecord> records = new ArrayList<>();
        String sql = "SELECT * FROM test_record WHERE student_id = ? AND finish_at IS NOT NULL ORDER BY started_at DESC";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, studentId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                TestRecord record = new TestRecord();
                record.setId(rs.getInt("id"));
                record.setStudent_id(rs.getInt("student_id"));
                record.setTest_id(rs.getInt("test_id"));

                Timestamp startedAt = rs.getTimestamp("started_at");
                if (startedAt != null) {
                    record.setStarted_at(startedAt.toLocalDateTime());
                }

                Timestamp finishAt = rs.getTimestamp("finish_at");
                if (finishAt != null) {
                    record.setFinish_at(finishAt.toLocalDateTime());
                }

                record.setScore(rs.getDouble("score"));
                records.add(record);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return records;
    }

    // Kiểm tra xem học sinh đã làm test này chưa (cho test chính thức)
    public boolean hasStudentTakenTest(int studentId, int testId) {
        String sql = "SELECT COUNT(*) FROM test_record WHERE student_id = ? AND test_id = ? AND finish_at IS NOT NULL";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, studentId);
            ps.setInt(2, testId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Lấy test record đang thực hiện (chưa hoàn thành)
    public TestRecord getActiveTestRecord(int studentId, int testId) {
        String sql = "SELECT * FROM test_record WHERE student_id = ? AND test_id = ? AND finish_at IS NULL";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, studentId);
            ps.setInt(2, testId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                TestRecord record = new TestRecord();
                record.setId(rs.getInt("id"));
                record.setStudent_id(rs.getInt("student_id"));
                record.setTest_id(rs.getInt("test_id"));

                Timestamp startedAt = rs.getTimestamp("started_at");
                if (startedAt != null) {
                    record.setStarted_at(startedAt.toLocalDateTime());
                }

                record.setScore(rs.getDouble("score"));
                return record;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public List<TestRecord> getRecentTestRecords(int limit) throws SQLException {
        List<TestRecord> records = new ArrayList<>();
        String sql = "SELECT * FROM test_record ORDER BY started_at DESC LIMIT ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, limit);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                TestRecord record = new TestRecord();
                record.setId(rs.getInt("id"));
                record.setStudent_id(rs.getInt("student_id"));
                record.setTest_id(rs.getInt("test_id"));
                record.setScore(rs.getDouble("score"));
                if (rs.getTimestamp("started_at") != null) {
                    record.setStarted_at(rs.getTimestamp("started_at").toLocalDateTime());
                }
                if (rs.getTimestamp("finish_at") != null) {
                    record.setFinish_at(rs.getTimestamp("finish_at").toLocalDateTime());
                }
                records.add(record);
            }
        }
        return records;
    }

    public double getAverageTestScore() throws SQLException {
        String sql = "SELECT AVG(score) FROM test_record WHERE score IS NOT NULL";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getDouble(1);
            }
        }
        return 0.0;
    }

    public double getTestCompletionRate() throws SQLException {
        String sql = "SELECT "
                + "(COUNT(CASE WHEN finish_at IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) as completion_rate "
                + "FROM test_record";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getDouble("completion_rate");
            }
        }
        return 0.0;
    }

    public int getTestCountByMonth(LocalDate month) throws SQLException {
        String sql = "SELECT COUNT(*) FROM test_record WHERE YEAR(started_at) = ? AND MONTH(started_at) = ?";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, month.getYear());
            ps.setInt(2, month.getMonthValue());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    public int getCompletedTestCountByMonth(LocalDate month) throws SQLException {
        String sql = "SELECT COUNT(*) FROM test_record WHERE YEAR(started_at) = ? AND MONTH(started_at) = ? AND finish_at IS NOT NULL";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, month.getYear());
            ps.setInt(2, month.getMonthValue());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}

================
File: src/java/fillter/Authorization.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package fillter;

/**
 *
 * @author BuiNgocLinh
 */
public class Authorization  {
    
}

================
File: src/java/model/Account.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

import java.sql.Date;
import java.time.LocalDate;

/**
 *
 * @author BuiNgocLinh
 */
public class Account {

    private int id;
    private String email;
    private String password;
    private String status;
    private String role;
    private String full_name;
    // sua cac thuoc tinh nay sang Integer(wrapper)de tranh nullpointerExc
    private Integer sex;
    private LocalDate dob;
    private Integer image_id;

    public Account() {
    }

    public Account(int id, String email, String password, String status, String role, String full_name, Integer sex, LocalDate dob, Integer image_id) {
        this.id = id;
        this.email = email;
        this.password = password;
        this.status = status;
        this.role = role;
        this.full_name = full_name;
        this.sex = sex;
        this.dob = dob;
        this.image_id = image_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String getFull_name() {
        return full_name;
    }

    public void setFull_name(String full_name) {
        this.full_name = full_name;
    }

    public Integer getSex() {
        return sex;
    }

    public void setSex(Integer sex) {
        this.sex = sex;
    }

    public LocalDate getDob() {
        return dob;
    }

    public void setDob(LocalDate dob) {
        this.dob = dob;
    }

    public Integer getImage_id() {
        return image_id;
    }

    public void setImage_id(Integer image_id) {
        this.image_id = image_id;
    }

    public Date getFormattedDate() {
        return Date.valueOf(dob);
    }
}

================
File: src/java/model/Category.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class Category {

    private int id;
    private String name;
    private int num_question;
    private int duration;

    public Category() {
    }

    public Category(int id, String name, int num_question, int duration) {
        this.id = id;
        this.name = name;
        this.num_question = num_question;
        this.duration = duration;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getNum_question() {
        return num_question;
    }

    public void setNum_question(int num_question) {
        this.num_question = num_question;
    }

    public int getDuration() {
        return duration;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

}

================
File: src/java/model/Chapter.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class Chapter {
    private int id;
    private String name;
    private String description;
    private int subject_id;

    public Chapter() {
    }

    public Chapter(int id, String name, String description, int subject_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.subject_id = subject_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getSubject_id() {
        return subject_id;
    }

    public void setSubject_id(int subject_id) {
        this.subject_id = subject_id;
    }

    @Override
    public String toString() {
        return "Chapter{" + "id = " + id + ", name = " + name + ", description = " + description + ", subject_id = " + subject_id + '}';
    }
}

================
File: src/java/model/ChatQA.java
================
package model;

public class ChatQA {
    private int id;
    private String question;
    private String key;
    private String answer;

    public ChatQA() {}

    public ChatQA(int id, String question, String key, String answer) {
        this.id = id;
        this.question = question;
        this.key = key;
        this.answer = answer;
    }

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }

    public String getQuestion() {
        return question;
    }
    public void setQuestion(String question) {
        this.question = question;
    }

    public String getKey() {
        return key;
    }
    public void setKey(String key) {
        this.key = key;
    }

    public String getAnswer() {
        return answer;
    }
    public void setAnswer(String answer) {
        this.answer = answer;
    }
}

================
File: src/java/model/GoogleAccount.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class GoogleAccount {

    private String google_id, email, name, first_name, given_name, family_name, picture;
    private int account_id;
    private boolean verified_email;

    public GoogleAccount() {
    }

    public GoogleAccount(String google_id, String email, String name, String first_name, String given_name, String family_name, String picture, int account_id, boolean verified_email) {
        this.google_id = google_id;
        this.email = email;
        this.name = name;
        this.first_name = first_name;
        this.given_name = given_name;
        this.family_name = family_name;
        this.picture = picture;
        this.account_id = account_id;
        this.verified_email = verified_email;
    }

    public void setGoogle_id(String google_id) {
        this.google_id = google_id;
    }
    
    public void setAccount_id(int account_id) {
        this.account_id = account_id;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setFirst_name(String first_name) {
        this.first_name = first_name;
    }

    public void setGiven_name(String given_name) {
        this.given_name = given_name;
    }

    public void setFamily_name(String family_name) {
        this.family_name = family_name;
    }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    public void setVerified_email(boolean verified_email) {
        this.verified_email = verified_email;
    }

    public String getGoogle_id() {
        return google_id;
    }
    
    public int getAccount_id() {
        return account_id;
    }

    public String getEmail() {
        return email;
    }

    public String getName() {
        return name;
    }

    public String getFirst_name() {
        return first_name;
    }

    public String getGiven_name() {
        return given_name;
    }

    public String getFamily_name() {
        return family_name;
    }

    public String getPicture() {
        return picture;
    }

    public boolean isVerified_email() {
        return verified_email;
    }

    @Override
    public String toString() {
        return "GoogleAccount{" + "google_id=" + google_id + ", email=" + email + ", name=" + name 
                + ", first_name=" + first_name + ", given_name=" + given_name 
                + ", family_name=" + family_name + ", picture=" + picture 
                + ", account_id=" + account_id + ", verified_email=" + verified_email + '}';
    }
}

================
File: src/java/model/Grade.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class Grade {

    private int id;
    private String name;
    private String description;
    private int teacher_id;

    public Grade() {
    }

    public Grade(int id, String name, String description, int teacher_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.teacher_id = teacher_id;
    }
    public Grade( String name, String description, int teacher_id) {
        this.name = name;
        this.description = description;
        this.teacher_id = teacher_id;
    }

    public int getTeacher_id() {
        return teacher_id;
    }

    public void setTeacher_id(int teacher_id) {
        this.teacher_id = teacher_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

}

================
File: src/java/model/Image.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class Image {

    private int id;
    private String image_data;

    public Image() {
    }

    public Image(int id, String image_data) {
        this.id = id;
        this.image_data = image_data;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getImage_data() {
        return image_data;
    }

    public void setImage_data(String image_data) {
        this.image_data = image_data;
    }

}

================
File: src/java/model/Invoice.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

import java.time.LocalDate;

/**
 *
 * @author BuiNgocLinh
 */
public class Invoice {
    private int id;
    private String total_amount;
    private int parent_id;
    private LocalDate created_at;
    private String status;
    private LocalDate pay_at;

    public Invoice() {
    }

    public Invoice(int id, String total_amount, int parent_id, LocalDate created_at, String status, LocalDate pay_at) {
        this.id = id;
        this.total_amount = total_amount;
        this.parent_id = parent_id;
        this.created_at = created_at;
        this.status = status;
        this.pay_at = pay_at;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getTotal_amount() {
        return total_amount;
    }

    public void setTotal_amount(String total_amount) {
        this.total_amount = total_amount;
    }

    public int getParent_id() {
        return parent_id;
    }

    public void setParent_id(int parent_id) {
        this.parent_id = parent_id;
    }

    public LocalDate getCreated_at() {
        return created_at;
    }

    public void setCreated_at(LocalDate created_at) {
        this.created_at = created_at;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public LocalDate getPay_at() {
        return pay_at;
    }

    public void setPay_at(LocalDate pay_at) {
        this.pay_at = pay_at;
    }
    
    
}

================
File: src/java/model/InvoiceLine.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class InvoiceLine {

    private int invoice_id;
    private int package_id;

    public InvoiceLine() {
    }

    public InvoiceLine(int invoice_id, int package_id) {
        this.invoice_id = invoice_id;
        this.package_id = package_id;
    }

    public int getInvoice_id() {
        return invoice_id;
    }

    public void setInvoice_id(int invoice_id) {
        this.invoice_id = invoice_id;
    }

    public int getPackage_id() {
        return package_id;
    }

    public void setPackage_id(int package_id) {
        this.package_id = package_id;
    }

}

================
File: src/java/model/Lesson.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class Lesson {

    private int id;
    private String name;
    private String content;
    private int chapter_id;
    private String video_link;

    public Lesson() {
    }

    public Lesson(int id, String name, String content, int chapter_id, String video_link) {
        this.id = id;
        this.name = name;
        this.content = content;
        this.chapter_id = chapter_id;
        this.video_link = video_link;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public int getChapter_id() {
        return chapter_id;
    }

    public void setChapter_id(int chapter_id) {
        this.chapter_id = chapter_id;
    }

    public String getVideo_link() {
        return video_link;
    }

    public void setVideo_link(String video_link) {
        this.video_link = video_link;
    }

    @Override
    public String toString() {
        return "Lesson{" + "id=" + id + ", name=" + name + ", content=" + content + ", chapter_id=" + chapter_id + ", video_link=" + video_link + '}';
    }

}

================
File: src/java/model/PackageSubject.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class PackageSubject {
    private int package_id;
    private int subject_id;

    public PackageSubject() {
    }

    public PackageSubject(int package_id, int subject_id) {
        this.package_id = package_id;
        this.subject_id = subject_id;
    }

    public int getPackage_id() {
        return package_id;
    }

    public void setPackage_id(int package_id) {
        this.package_id = package_id;
    }

    public int getSubject_id() {
        return subject_id;
    }

    public void setSubject_id(int subject_id) {
        this.subject_id = subject_id;
    }

    @Override
    public String toString() {
        return "PackageSubject{" + "package_id=" + package_id + ", subject_id=" + subject_id + '}';
    }
    
    
}

================
File: src/java/model/Question.java
================
package model;

public class Question {

    private int id;
    private String question; // Trước đây là name
    private int image_id;
    private int lesson_id;
    private String question_type; // 'SINGLE' hoặc 'MULTIPLE'

    public Question() {
    }

    public Question(int id, String question, int image_id, int lesson_id, String question_type) {
        this.id = id;
        this.question = question;
        this.image_id = image_id;
        this.lesson_id = lesson_id;
        this.question_type = question_type;
    }

    public Question(String question, int image_id, int lesson_id, String question_type) {
        this.question = question;
        this.image_id = image_id;
        this.lesson_id = lesson_id;
        this.question_type = question_type;
    }

    public int getId() {
        return id;
    }

    public String getQuestion() {
        return question;
    }

    public int getImage_id() {
        return image_id;
    }

    public int getLesson_id() {
        return lesson_id;
    }

    public String getQuestion_type() {
        return question_type;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public void setImage_id(int image_id) {
        this.image_id = image_id;
    }

    public void setLesson_id(int lesson_id) {
        this.lesson_id = lesson_id;
    }

    public void setQuestion_type(String question_type) {
        this.question_type = question_type;
    }
}

================
File: src/java/model/QuestionOption.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class QuestionOption {
    private int id;
    private int question_id;
    private String content;
    private boolean is_correct;

    public QuestionOption() {
    }

    public QuestionOption(int id, int question_id, String content, boolean is_correct) {
        this.id = id;
        this.question_id = question_id;
        this.content = content;
        this.is_correct = is_correct;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(int question_id) {
        this.question_id = question_id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public boolean isIs_correct() {
        return is_correct;
    }

    public void setIs_correct(boolean is_correct) {
        this.is_correct = is_correct;
    }
    
    
}

================
File: src/java/model/QuestionRecord.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class QuestionRecord {

    private int id;
    private int test_record_id;
    private int question_id;
    private int option_id;

    public QuestionRecord() {
    }

    public QuestionRecord(int id, int test_record_id, int question_id, int option_id) {
        this.id = id;
        this.test_record_id = test_record_id;
        this.question_id = question_id;
        this.option_id = option_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getTest_record_id() {
        return test_record_id;
    }

    public void setTest_record_id(int test_record_id) {
        this.test_record_id = test_record_id;
    }

    public int getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(int question_id) {
        this.question_id = question_id;
    }

    public int getOption_id() {
        return option_id;
    }

    public void setOption_id(int option_id) {
        this.option_id = option_id;
    }

}

================
File: src/java/model/Student.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

import java.sql.Date;
import java.time.LocalDate;

/**
 *
 * @author BuiNgocLinh
 */
public class Student {

    private int id;
    private int grade_id;
    private int parent_id;
    private String username;
    private String password;
    private String full_name;
    private LocalDate dob;
    private boolean sex;
    private int image_id;

    public Student() {
    }

    public Student(int id, int grade_id, int parent_id, String username, String password, String full_name, LocalDate dob, boolean sex, int image_id) {
        this.id = id;
        this.grade_id = grade_id;
        this.parent_id = parent_id;
        this.username = username;
        this.password = password;
        this.full_name = full_name;
        this.dob = dob;
        this.sex = sex;
        this.image_id = image_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getGrade_id() {
        return grade_id;
    }

    public void setGrade_id(int grade_id) {
        this.grade_id = grade_id;
    }

    public int getParent_id() {
        return parent_id;
    }

    public void setParent_id(int parent_id) {
        this.parent_id = parent_id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFull_name() {
        return full_name;
    }

    public void setFull_name(String full_name) {
        this.full_name = full_name;
    }

    public LocalDate getDob() {
        return dob;
    }

    public void setDob(LocalDate dob) {
        this.dob = dob;
    }

    public boolean isSex() {
        return sex;
    }

    public void setSex(boolean sex) {
        this.sex = sex;
    }

    public int getImage_id() {
        return image_id;
    }

    public void setImage_id(int image_id) {
        this.image_id = image_id;
    }
    
    public Date getFormattedDate() {
        return Date.valueOf(dob);
    }
}

================
File: src/java/model/StudyPackage.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class StudyPackage {

    private int id;
    private String name;
    private String price;

    public StudyPackage() {
    }

    public StudyPackage(int id, String name, String price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPrice() {
        return price;
    }

    public void setPrice(String price) {
        this.price = price;
    }
    
    
}

================
File: src/java/model/Subject.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;


public class Subject {
    private int id;
    private String name;
    private String description;
    private int grade_id;
  
    

    public Subject() {
    }

    public Subject(int id, String name, String description, int grade_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.grade_id = grade_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getGrade_id() {
        return grade_id;
    }

    public void setGrade_id(int grade_id) {
        this.grade_id = grade_id;
    }

    public void setGradeName(String string) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    
}

================
File: src/java/model/Test.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class Test {
    private int id;
    private String name;
    private String description;
    private boolean is_practice;
    private int category_id;

    public Test() {
    }

    public Test(int id, String name, String description, boolean is_practice, int category_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.is_practice = is_practice;
        this.category_id = category_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public boolean isIs_practice() {
        return is_practice;
    }

    public void setIs_practice(boolean is_practice) {
        this.is_practice = is_practice;
    }

    public int getCategory_id() {
        return category_id;
    }

    public void setCategory_id(int category_id) {
        this.category_id = category_id;
    }
    
    
}

================
File: src/java/model/TestQuestion.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

/**
 *
 * @author BuiNgocLinh
 */
public class TestQuestion {
    private int test_id;
    private int question_id;

    public TestQuestion() {
    }

    public TestQuestion(int test_id, int question_id) {
        this.test_id = test_id;
        this.question_id = question_id;
    }

    public int getTest_id() {
        return test_id;
    }

    public void setTest_id(int test_id) {
        this.test_id = test_id;
    }

    public int getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(int question_id) {
        this.question_id = question_id;
    }
    
    
}

================
File: src/java/model/TestRecord.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package model;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;

/**
 *
 * @author BuiNgocLinh
 */
public class TestRecord {

    private int id;
    private int student_id;
    private int test_id;
    private LocalDateTime started_at;
    private LocalDateTime finish_at;
    private double score;

    public TestRecord() {
    }

    public TestRecord(int id, int student_id, int test_id, LocalDateTime started_at, LocalDateTime finish_at, double score) {
        this.id = id;
        this.student_id = student_id;
        this.test_id = test_id;
        this.started_at = started_at;
        this.finish_at = finish_at;
        this.score = score;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getStudent_id() {
        return student_id;
    }

    public void setStudent_id(int student_id) {
        this.student_id = student_id;
    }

    public int getTest_id() {
        return test_id;
    }

    public void setTest_id(int test_id) {
        this.test_id = test_id;
    }

    public LocalDateTime getStarted_at() {
        return started_at;
    }

    public void setStarted_at(LocalDateTime started_at) {
        this.started_at = started_at;
    }

    public LocalDateTime getFinish_at() {
        return finish_at;
    }

    public void setFinish_at(LocalDateTime finish_at) {
        this.finish_at = finish_at;
    }

    public double getScore() {
        return score;
    }

    public void setScore(double score) {
        this.score = score;
    }
    
    // Helper methods để convert LocalDateTime sang Date cho JSP
    public Date getStartedAtAsDate() {
        if (started_at != null) {
            return Date.from(started_at.atZone(ZoneId.systemDefault()).toInstant());
        }
        return null;
    }
    
    public Date getFinishAtAsDate() {
        if (finish_at != null) {
            return Date.from(finish_at.atZone(ZoneId.systemDefault()).toInstant());
        }
        return null;
    }
    
    // Trả về Timestamp từ started_at cho sử dụng trong controller
    public Timestamp getStart_time() {
        if (started_at != null) {
            return Timestamp.valueOf(started_at);
        }
        return null;
    }
    
    // Trả về Timestamp từ finish_at cho sử dụng trong controller
    public Timestamp getFinish_time() {
        if (finish_at != null) {
            return Timestamp.valueOf(finish_at);
        }
        return null;
    }
}

================
File: src/java/util/AuthUtil.java
================
package util;

import jakarta.servlet.http.HttpServletRequest;
import model.Account;
import model.Student;

public class AuthUtil {

    /**
     * Kiểm tra người dùng hiện tại có vai trò tương ứng không.
     * Admin, Teacher, Parent nằm trong bảng Account; Student là bảng riêng.
     *
     * @param request HttpServletRequest
     * @param role Role cần kiểm tra (RoleConstants.ADMIN, STUDENT, ...)
     * @return true nếu người dùng có vai trò tương ứng
     */
    public static boolean hasRole(HttpServletRequest request, String role) {
        // Nếu là student, kiểm tra session student
        if (RoleConstants.STUDENT.equalsIgnoreCase(role)) {
            return request.getSession().getAttribute("student") instanceof Student;
        }

        // Nếu là admin, teacher, parent: kiểm tra account
        Object accountObj = request.getSession().getAttribute("account");
        if (accountObj instanceof Account) {
            Account acc = (Account) accountObj;
            return acc.getRole() != null && acc.getRole().equalsIgnoreCase(role);
        }

        return false;
    }

    /**
     * Kiểm tra xem người dùng đã đăng nhập chưa (account hoặc student).
     */
    public static boolean isLoggedIn(HttpServletRequest request) {
        return request.getSession().getAttribute("account") != null
                || request.getSession().getAttribute("student") != null;
    }
}

================
File: src/java/util/RoleConstants.java
================
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package util;

/**
 *
 * @author ADMIN
 */
public class RoleConstants {

    public static final String ADMIN = "admin";
    public static final String STUDENT = "student";
    public static final String PARENT = "parent";
    public static final String TEACHER = "teacher";
}

================
File: web/accountForm.jsp
================
<%-- 
    Document   : accountForm
    Created on : May 23, 2025, 11:16:10 AM
    Author     : BuiNgocLinh
--%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<html>

    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title><c:choose>
                <c:when test="${not empty account}">Edit</c:when>
                <c:otherwise>Add</c:otherwise>
            </c:choose>
        </title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">
        <!-- CSS here -->
        <link rel="stylesheet" href="assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="assets/css/slicknav.css">
        <link rel="stylesheet" href="assets/css/flaticon.css">
        <link rel="stylesheet" href="assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="assets/css/gijgo.css">
        <link rel="stylesheet" href="assets/css/animate.min.css">
        <link rel="stylesheet" href="assets/css/animated-headline.css">
        <link rel="stylesheet" href="assets/css/magnific-popup.css">
        <link rel="stylesheet" href="assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="assets/css/themify-icons.css">
        <link rel="stylesheet" href="assets/css/slick.css">
        <link rel="stylesheet" href="assets/css/nice-select.css">
        <link rel="stylesheet" href="assets/css/style.css">
        <style>
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }

            body {
                padding-top: 90px; /* Tăng khoảng cách để không bị che */
            }

            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            }

            main h2 {
                text-align: center;
                font-weight: 600;
                color: #343a40;
            }

            form[method="get"] {
                display: flex;
                align-items: center;
                gap: 10px;
                flex-wrap: wrap;
                justify-content: center;
                margin-bottom: 20px;
            }

            form[method="get"] input[type="text"] {
                max-width: 300px;
            }

            table.table {
                background-color: #fff;
                border-radius: 6px;
                overflow: hidden;
            }

            table.table thead {
                background-color: #343a40;
                color: #fff;
            }

            table.table td,
            table.table th {
                vertical-align: middle !important;
                text-align: center;
            }

            .img-thumbnail {
                object-fit: cover;
                border-radius: 8px;
            }

            .btn {
                margin: 2px;
            }

            .btn-success, .btn-outline-secondary {
                margin-top: 10px;
                margin-right: 10px;
            }

            .text-danger {
                text-align: center;
                font-weight: bold;
            }
        </style>
    </head>
    <body>
        <!--         ? Preloader Start 
                <div id="preloader-active">
                    <div class="preloader d-flex align-items-center justify-content-center">
                        <div class="preloader-inner position-relative">
                            <div class="preloader-circle"></div>
                            <div class="preloader-img pere-text">
                                <img src="assets/img/logo/loder.png" alt="">
                            </div>
                        </div>
                    </div>
                </div>
                 Preloader Start 
                 Header Start 
                <div class="header-area header-transparent">
                    <div class="main-header ">
                        <div class="header-bottom header-sticky">
                            <div class="container-fluid">
                                <div class="row align-items-center">
                                     Logo 
                                    <div class="col-xl-2 col-lg-2">
                                        <div class="logo">
                                            <a href="index.html"><img src="assets/img/logo/logo.png" alt=""></a>
                                        </div>
                                    </div>
                                    <div class="col-xl-10 col-lg-10">
                                        <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                             Main-menu 
                                            <div class="main-menu d-none d-lg-block">
                                                <nav>
                                                    <ul id="navigation">                                                                                          
                                                        <li class="active" ><a href="index.html">Home</a></li>
                                                        <li><a href="courses.html">Courses</a></li>
                                                        <li><a href="about.html">About</a></li>
                                                        <li><a href="#">Blog</a>
                                                            <ul class="submenu">
                                                                <li><a href="blog.html">Blog</a></li>
                                                                <li><a href="blog_details.html">Blog Details</a></li>
                                                                <li><a href="elements.html">Element</a></li>
                                                            </ul>
                                                        </li>
                                                        <li><a href="contact.html">Contact</a></li>
                                                    </ul>
                                                </nav>
                                            </div>
                                        </div>
                                    </div> 
                                     Mobile Menu 
                                    <div class="col-12">
                                        <div class="mobile_menu d-block d-lg-none"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                 Header End -->
        <%@include file="header.jsp" %>
        <main>
            <div class="container mt-5 mb-5">
                <div class="row justify-content-center">
                    <div class="col-md-8 col-lg-6">
                        <h2 class="mb-4">${empty account ? "Add New Account" : "Edit Account"}</h2>

                        <form action="admin" method="post" enctype="multipart/form-data">
                            <c:if test="${not empty account}">
                                <input type="hidden" name="id" value="${account.id}" />
                                <input type="hidden" name="action" value="editAccount" />
                            </c:if>
                            <c:if test="${empty account}">
                                <input type="hidden" name="action" value="createAccount" />
                            </c:if>

                            <div class="mb-3">
                                <label class="form-label">Email:</label>
                                <input type="email" name="email" class="form-control" value="${account.email}" required />
                            </div>

                            <c:choose>
                                <c:when test="${not empty account}">
                                    <!-- Edit mode - show old and new password fields -->
                                    <div class="mb-3">
                                        <label class="form-label">Current Password:</label>
                                        <div class="input-group">
                                            <input type="password" name="oldPassword" id="oldPassword" class="form-control" />
                                            <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('oldPassword')">
                                                <i class="fas fa-eye" id="oldPasswordIcon"></i>
                                            </button>
                                        </div>
                                        <c:if test="${not empty passwordError}">
                                            <small class="text-danger">${passwordError}</small>
                                        </c:if>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">New Password:</label>
                                        <div class="input-group">
                                            <input type="password" name="password" id="newPassword" class="form-control" />
                                            <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('newPassword')">
                                                <i class="fas fa-eye" id="newPasswordIcon"></i>
                                            </button>
                                        </div>
                                        <small class="text-muted">Leave blank if you don't want to change password</small>
                                    </div>
                                </c:when>
                                <c:otherwise>
                                    <!-- Create mode - show only one password field -->
                                    <div class="mb-3">
                                        <label class="form-label">Password:</label>
                                        <div class="input-group">
                                            <input type="password" name="password" id="newPassword" class="form-control" value="${account.password}" required />
                                            <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('newPassword')">
                                                <i class="fas fa-eye" id="newPasswordIcon"></i>
                                            </button>
                                        </div>
                                    </div>
                                </c:otherwise>
                            </c:choose>
                            <script>
                                function togglePassword(fieldId) {
                                    var input = document.getElementById(fieldId);
                                    var icon = document.getElementById(fieldId + 'Icon');
                                    if (input.type === 'password') {
                                        input.type = 'text';
                                        icon.classList.remove('fa-eye');
                                        icon.classList.add('fa-eye-slash');
                                    } else {
                                        input.type = 'password';
                                        icon.classList.remove('fa-eye-slash');
                                        icon.classList.add('fa-eye');
                                    }
                                }
                            </script>

                            <div class="mb-3">
                                <label class="form-label">Full Name:</label>
                                <input type="text" name="full_name" class="form-control" value="${account.full_name}" required />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Role:</label>
                                <input type="text" name="role" class="form-control" value="${account.role}" required />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Status:</label>
                                <input type="text" name="status" class="form-control" value="${account.status}" required />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Sex:</label>
                                <select name="sex" class="form-select" required>
                                    <option value="">--Select Sex--</option>
                                    <option value="0" ${account.sex == 0 ? "selected" : ""}>Male</option>
                                    <option value="1" ${account.sex == 1 ? "selected" : ""}>Female</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Date of Birth:</label>
                                <input type="date" name="dob" class="form-control" value="${account.dob}" />
                            </div>

                            <c:if test="${image.id == account.image_id}">
                                <div class="mb-3">
                                    <label class="form-label">Current Avatar:</label><br/>
                                    <img src="${pageContext.request.contextPath}/${not empty image.image_data ? image.image_data : 'assets/img/avatar/macdinh.jpg'}"
                                         alt="Ảnh cá nhân" class="img-thumbnail" width="200" height="200"/>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">New Avatar:</label>
                                    <input type="file" name="imgURL" class="form-control"/>
                                </div>
                            </c:if>

                            <div class="d-flex justify-content-between">
                                <button type="submit" class="btn btn-success">${empty account ? "Create" : "Update"}</button>
                                <a href="admin?action=listAccount" class="btn btn-secondary">Back</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </main>


        <footer>
            <div class="footer-wrappper footer-bg">
                <!-- Footer Start-->
                <div class="footer-area footer-padding">
                    <div class="container">
                        <div class="row justify-content-between">
                            <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="single-footer-caption mb-30">
                                        <!-- logo -->
                                        <div class="footer-logo mb-25">
                                            <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                        </div>
                                        <div class="footer-tittle">
                                            <div class="footer-pera">
                                                <p>The automated process starts as soon as your clothes go into the machine.</p>
                                            </div>
                                        </div>
                                        <!-- social -->
                                        <div class="footer-social">
                                            <a href="#"><i class="fab fa-twitter"></i></a>
                                            <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                            <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Our solutions</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Support</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Company</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- footer-bottom area -->
                <div class="footer-bottom-area">
                    <div class="container">
                        <div class="footer-border">
                            <div class="row d-flex align-items-center">
                                <div class="col-xl-12 ">
                                    <div class="footer-copy-right text-center">
                                        <p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                                            Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer End-->
            </div>

        </footer> 
        <!-- Scroll Up -->
        <div id="back-top" >
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="./assets/js/popper.min.js"></script>
        <script src="./assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="./assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="./assets/js/owl.carousel.min.js"></script>
        <script src="./assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="./assets/js/wow.min.js"></script>
        <script src="./assets/js/animated.headline.js"></script>
        <script src="./assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="./assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->
        <script src="./assets/js/jquery.nice-select.min.js"></script>
        <script src="./assets/js/jquery.sticky.js"></script>
        <!-- Progress -->
        <script src="./assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="./assets/js/jquery.counterup.min.js"></script>
        <script src="./assets/js/waypoints.min.js"></script>
        <script src="./assets/js/jquery.countdown.min.js"></script>
        <script src="./assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="./assets/js/contact.js"></script>
        <script src="./assets/js/jquery.form.js"></script>
        <script src="./assets/js/jquery.validate.min.js"></script>
        <script src="./assets/js/mail-script.js"></script>
        <script src="./assets/js/jquery.ajaxchimp.min.js"></script>

        <!-- Jquery Plugins, main Jquery -->	
        <script src="./assets/js/plugins.js"></script>
        <script src="./assets/js/main.js"></script>
        <script src="./assets/js/main.js"></script>

    </body>
</html>

================
File: web/accountList.jsp
================
<%-- 
    Document   : accountList
    Created on : May 19, 2025, 8:10:57 PM
    Author     : BuiNgocLinh
--%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Account List</title>

        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">
        <!-- CSS here -->
        <link rel="stylesheet" href="assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="assets/css/slicknav.css">
        <link rel="stylesheet" href="assets/css/flaticon.css">
        <link rel="stylesheet" href="assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="assets/css/gijgo.css">
        <link rel="stylesheet" href="assets/css/animate.min.css">
        <link rel="stylesheet" href="assets/css/animated-headline.css">
        <link rel="stylesheet" href="assets/css/magnific-popup.css">
        <link rel="stylesheet" href="assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="assets/css/themify-icons.css">
        <link rel="stylesheet" href="assets/css/slick.css">
        <link rel="stylesheet" href="assets/css/nice-select.css">
        <link rel="stylesheet" href="assets/css/style.css">
        <style>
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }

            body {
                padding-top: 90px; /* Tăng khoảng cách để không bị che */
            }

            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            }

            main h2 {
                text-align: center;
                font-weight: 600;
                color: #343a40;
            }

            form[method="get"] {
                display: flex;
                align-items: center;
                gap: 10px;
                flex-wrap: wrap;
                justify-content: center;
                margin-bottom: 20px;
            }

            form[method="get"] input[type="text"] {
                max-width: 300px;
            }

            table.table {
                background-color: #fff;
                border-radius: 6px;
                overflow: hidden;
            }

            table.table thead {
                background-color: #343a40;
                color: #fff;
            }

            table.table td,
            table.table th {
                vertical-align: middle !important;
                text-align: center;
            }

            .img-thumbnail {
                object-fit: cover;
                border-radius: 8px;
            }

            .btn {
                margin: 2px;
            }

            .btn-success, .btn-outline-secondary {
                margin-top: 10px;
                margin-right: 10px;
            }

            .text-danger {
                text-align: center;
                font-weight: bold;
            }


            .pagination ul {
                list-style: none;
                display: flex;
                gap: 5px;
                padding-left: 0;
            }

            .pagination li {
                padding: 5px 10px;
                background: #f8f8f8;
            }

            .pagination li.active {
                font-weight: bold;
                background: #007bff;
                color: white;
            }

            .pagination a {
                text-decoration: none;
                color: inherit;
            }
        </style>

    </head>
    <body>
        <!--         ? Preloader Start 
                <div id="preloader-active">
                    <div class="preloader d-flex align-items-center justify-content-center">
                        <div class="preloader-inner position-relative">
                            <div class="preloader-circle"></div>
                            <div class="preloader-img pere-text">
                                <img src="assets/img/logo/loder.png" alt="">
                            </div>
                        </div>
                    </div>
                </div>
                 Preloader Start 
                 Header Start 
                <div class="header-area header-transparent">
                    <div class="main-header ">
                        <div class="header-bottom header-sticky">
                            <div class="container-fluid">
                                <div class="row align-items-center">
                                     Logo 
                                    <div class="col-xl-2 col-lg-2">
                                        <div class="logo">
                                            <a href="#"><img src="assets/img/logo/logo.png" alt=""></a>
                                        </div>
                                    </div>
                                    <div class="col-xl-10 col-lg-10">
                                        <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                             Main-menu 
                                            <div class="main-menu d-none d-lg-block">
                                                <nav>
                                                    <ul id="navigation">                                                                                          
                                                        <li class="active" ><a href="#">Home</a></li>
                                                        <li><a href="#">Courses</a></li>
                                                        <li><a href="#">About</a></li>
                                                        <li><a href="#">Blog</a>
                                                            <ul class="submenu">
                                                                <li><a href="#">Blog</a></li>
                                                                <li><a href="#l">Blog Details</a></li>
                                                                <li><a href="#">Element</a></li>
                                                            </ul>
                                                        </li>
                                                        <li><a href="#">Contact</a></li>
                                                    </ul>
                                                </nav>
                                            </div>
                                        </div>
                                    </div> 
                                     Mobile Menu 
                                    <div class="col-12">
                                        <div class="mobile_menu d-block d-lg-none"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                 Header End -->

        <%@include file="header.jsp" %>
        <main>
            <div class="container mt-5 mb-5">
                <div class="row">
                    <div class="col-12">
                        <h2 class="mb-4">Account List</h2>

                        <form method="get" action="admin" class="mb-3">
                            <input type="hidden" name="action" value="searchAccount" />
                            <label>Search by email:</label>
                            <input type="text" name="email" class="form-control d-inline w-auto" />
                            <button type="submit" class="btn btn-primary btn-sm">Search</button>
                        </form>

                        <c:if test="${not empty error}">
                            <p class="text-danger">${error}</p>
                        </c:if>

                        <table class="table table-bordered table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Email</th>
                                    <th>Full Name</th>
                                    <th>Status</th>
                                    <th>Role</th>
                                    <th>Sex</th>
                                    <th>DOB</th>
                                    <th>Image</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <c:forEach var="acc" items="${requestScope.accountList}">
                                    <tr>
                                        <td>${acc.id}</td>
                                        <td>${acc.email}</td>
                                        <td>${acc.full_name}</td>
                                        <td>${acc.status}</td>
                                        <td>${acc.role}</td>
                                        <td>${acc.sex == 1 ? 'Male' : 'Female'}</td>
                                        <td>
                                            <fmt:formatDate value="${acc.getFormattedDate()}" pattern="dd/MM/yyyy" />
                                        </td>
                                        <td>
                                            <c:forEach items="${imageList}" var="i">
                                                <c:if test="${i.id == acc.image_id}">
                                                    <img src="${pageContext.request.contextPath}/${not empty i.image_data ? i.image_data : 'assets/img/avatar/macdinh.jpg'}"
                                                         alt="Ảnh cá nhân" width="100" height="100" class="img-thumbnail"/>
                                                </c:if>
                                            </c:forEach>
                                        </td>
                                        <td>
<!--                                            <a href="admin?action=deleteAccount&id=${acc.id}" class="btn btn-danger btn-sm"
                                               onclick="return confirm('Are you sure you want to delete this account?');">
                                                Delete
                                            </a>-->
                                            <a href="admin?action=editAccount&id=${acc.id}" class="btn btn-warning btn-sm">
                                                Update
                                            </a>
                                        </td>
                                    </tr>
                                </c:forEach>
                            </tbody>
                        </table>
                        <div class="pagination">
                            <c:if test="${totalPages > 1}">
                                <nav>
                                    <ul class="pagination">
                                        <c:if test="${currentPage > 1}">
                                            <li class="page-item">
                                                <a class="page-link" href="admin?action=listAccount&page=${currentPage - 1}">Before</a>
                                            </li>
                                        </c:if>

                                        <li class="page-item ${currentPage == 1 ? 'active' : ''}">
                                            <a class="page-link" href="admin?action=listAccount&page=1">1</a>
                                        </li>

                                        <c:if test="${currentPage > 3}">
                                            <li class="page-item disabled"><span class="page-link">...</span></li>
                                            </c:if>

                                        <c:forEach begin="${currentPage - 1}" end="${currentPage + 1}" var="i">
                                            <c:if test="${i > 1 && i < totalPages}">
                                                <li class="page-item ${currentPage == i ? 'active' : ''}">
                                                    <a class="page-link" href="admin?action=listAccount&page=${i}">${i}</a>
                                                </li>
                                            </c:if>
                                        </c:forEach>

                                        <c:if test="${currentPage < totalPages - 2}">
                                            <li class="page-item disabled"><span class="page-link">...</span></li>
                                            </c:if>

                                        <c:if test="${totalPages > 1}">
                                            <li class="page-item ${currentPage == totalPages ? 'active' : ''}">
                                                <a class="page-link" href="admin?action=listAccount&page=${totalPages}">${totalPages}</a>
                                            </li>
                                        </c:if>

                                        <c:if test="${currentPage < totalPages}">
                                            <li class="page-item">
                                                <a class="page-link" href="admin?action=listAccount&page=${currentPage + 1}">After</a>
                                            </li>
                                        </c:if>
                                    </ul>
                                </nav>
                            </c:if>
                        </div>
                        <a href="admin?action=createAccount" class="btn btn-success btn-sm">Add New Account</a>
                        <% if (session.getAttribute("account") != null) { %>
                        <a href="logout" class="btn btn-outline-secondary btn-sm ml-2">Logout</a>
                        <% } %>
                    </div>
                </div>
            </div>
        </main>


        <footer>
            <div class="footer-wrappper footer-bg">
                <!-- Footer Start-->
                <div class="footer-area footer-padding">
                    <div class="container">
                        <div class="row justify-content-between">
                            <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="single-footer-caption mb-30">
                                        <!-- logo -->
                                        <div class="footer-logo mb-25">
                                            <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                        </div>
                                        <div class="footer-tittle">
                                            <div class="footer-pera">
                                                <p>The automated process starts as soon as your clothes go into the machine.</p>
                                            </div>
                                        </div>
                                        <!-- social -->
                                        <div class="footer-social">
                                            <a href="#"><i class="fab fa-twitter"></i></a>
                                            <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                            <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Our solutions</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Support</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Company</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- footer-bottom area -->
                <div class="footer-bottom-area">
                    <div class="container">
                        <div class="footer-border">
                            <div class="row d-flex align-items-center">
                                <div class="col-xl-12 ">
                                    <div class="footer-copy-right text-center">
                                        <p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                                            Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer End-->
            </div>

        </footer> 
        <!-- Scroll Up -->
        <div id="back-top" >
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="./assets/js/popper.min.js"></script>
        <script src="./assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="./assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="./assets/js/owl.carousel.min.js"></script>
        <script src="./assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="./assets/js/wow.min.js"></script>
        <script src="./assets/js/animated.headline.js"></script>
        <script src="./assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="./assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->
        <script src="./assets/js/jquery.nice-select.min.js"></script>
        <script src="./assets/js/jquery.sticky.js"></script>
        <!-- Progress -->
        <script src="./assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="./assets/js/jquery.counterup.min.js"></script>
        <script src="./assets/js/waypoints.min.js"></script>
        <script src="./assets/js/jquery.countdown.min.js"></script>
        <script src="./assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="./assets/js/contact.js"></script>
        <script src="./assets/js/jquery.form.js"></script>
        <script src="./assets/js/jquery.validate.min.js"></script>
        <script src="./assets/js/mail-script.js"></script>
        <script src="./assets/js/jquery.ajaxchimp.min.js"></script>

        <!-- Jquery Plugins, main Jquery -->	
        <script src="./assets/js/plugins.js"></script>
        <script src="./assets/js/main.js"></script>
        <script src="./assets/js/main.js"></script>

    </body>
</html>

================
File: web/admin/dashboard.jsp
================
<%-- 
    Document   : dashboard
    Created on : Jun 22, 2025, 12:22:10 AM
    Author     : ankha
--%>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Admin Dashboard</title>
    
    <!-- CSS -->
    <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/css/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/css/style.css">
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <style>
        body {
            background-color: #f8f9fa;
            padding-top: 100px;
        }
        
        .dashboard-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 10px;
        }
        
        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
            margin-bottom: 1.5rem;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            margin-bottom: 1rem;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
        }
        
        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }
        
        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .recent-activity {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            max-height: 400px;
            overflow-y: auto;
        }
        
        .activity-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid #eee;
        }
        
        .activity-item:last-child {
            border-bottom: none;
        }
        
        .bg-primary-gradient { background: linear-gradient(45deg, #007bff, #0056b3); }
        .bg-success-gradient { background: linear-gradient(45deg, #28a745, #1e7e34); }
        .bg-warning-gradient { background: linear-gradient(45deg, #ffc107, #d39e00); }
        .bg-info-gradient { background: linear-gradient(45deg, #17a2b8, #117a8b); }
        .bg-danger-gradient { background: linear-gradient(45deg, #dc3545, #bd2130); }
        .bg-purple-gradient { background: linear-gradient(45deg, #6f42c1, #59359a); }
        .bg-orange-gradient { background: linear-gradient(45deg, #fd7e14, #e55a00); }
        .bg-teal-gradient { background: linear-gradient(45deg, #20c997, #1aa179); }
    </style>
</head>
<body>
    <%@include file="../header.jsp" %>
    
    <div class="container-fluid">
        <!-- Dashboard Header -->
        <div class="dashboard-header text-center">
            <h1><i class="fas fa-tachometer-alt"></i> Admin Dashboard</h1>
            <p class="mb-0">Welcome back! Here's what's happening with your platform today.</p>
        </div>
        
        <!-- Statistics Cards -->
        <div class="row">
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-primary-gradient">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-number">${dashboardData.totalUsers}</div>
                    <div class="stat-label">Total Users</div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-success-gradient">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="stat-number">${dashboardData.totalStudents}</div>
                    <div class="stat-label">Students</div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-warning-gradient">
                        <i class="fas fa-clipboard"></i>
                    </div>
                    <div class="stat-number">${dashboardData.totalTests}</div>
                    <div class="stat-label">Tests</div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-info-gradient">
                        <i class="fas fa-question-circle"></i>
                    </div>
                    <div class="stat-number">${dashboardData.totalQuestions}</div>
                    <div class="stat-label">Questions</div>
                </div>
            </div>
        </div>
        
        <!-- Second Row of Stats -->
        <div class="row">
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-purple-gradient">
                        <i class="fas fa-book"></i>
                    </div>
                    <div class="stat-number">${dashboardData.totalLessons}</div>
                    <div class="stat-label">Lessons</div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-orange-gradient">
                        <i class="fas fa-bookmark"></i>
                    </div>
                    <div class="stat-number">${dashboardData.totalSubjects}</div>
                    <div class="stat-label">Subjects</div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-teal-gradient">
                        <i class="fas fa-trophy"></i>
                    </div>
                    <div class="stat-number">${dashboardData.totalGrades}</div>
                    <div class="stat-label">Grades</div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6">
                <div class="stat-card">
                    <div class="stat-icon bg-danger-gradient">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <div class="stat-number">
                        <fmt:formatNumber value="${dashboardData.totalRevenue}" type="currency" currencySymbol="$"/>
                    </div>
                    <div class="stat-label">Total Revenue</div>
                </div>
            </div>
        </div>
        
        <!-- Charts Row -->
        <div class="row">
            <!-- Test Activity Chart -->
            <div class="col-xl-8">
                <div class="chart-container">
                    <h5><i class="fas fa-chart-line"></i> Test Activity (Last 12 Months)</h5>
                    <canvas id="testActivityChart" height="100"></canvas>
                </div>
            </div>
            
            <!-- User Distribution Chart -->
            <div class="col-xl-4">
                <div class="chart-container">
                    <h5><i class="fas fa-chart-pie"></i> User Distribution</h5>
                    <canvas id="userDistributionChart"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Performance Metrics -->
        <div class="row">
            <div class="col-xl-6">
                <div class="chart-container">
                    <h5><i class="fas fa-chart-bar"></i> User Registrations (Last 12 Months)</h5>
                    <canvas id="userRegistrationChart" height="120"></canvas>
                </div>
            </div>
            
            <div class="col-xl-6">
                <div class="chart-container">
                    <h5><i class="fas fa-chart-area"></i> Revenue Trend</h5>
                    <canvas id="revenueChart" height="120"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Recent Activities -->
        <div class="row">
            <div class="col-xl-6">
                <div class="recent-activity">
                    <h5><i class="fas fa-clock"></i> Recent Test Activities</h5>
                    <c:forEach var="test" items="${dashboardData.recentTests}" varStatus="status">
                        <div class="activity-item">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <strong>Student ID: ${test.student_id}</strong> completed Test ID: ${test.test_id}
                                    <br>
                                    <small class="text-muted">
                                        Score: <fmt:formatNumber value="${test.score}" pattern="##.##"/>%
                                    </small>
                                </div>
                                <small class="text-muted">
                                    <fmt:formatDate value="${test.finishAtAsDate}" pattern="MMM dd, HH:mm"/>
                                </small>
                            </div>
                        </div>
                    </c:forEach>
                </div>
            </div>
            
            <div class="col-xl-6">
                <div class="recent-activity">
                    <h5><i class="fas fa-user-plus"></i> Recent Registrations</h5>
                    <c:forEach var="user" items="${dashboardData.recentRegistrations}" varStatus="status">
                        <div class="activity-item">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <strong>${user.full_name}</strong>
                                    <br>
                                    <small class="text-muted">${user.email} - ${user.role}</small>
                                </div>
                                <span class="badge badge-primary">${user.role}</span>
                            </div>
                        </div>
                    </c:forEach>
                </div>
            </div>
        </div>
        
        <!-- Performance Summary -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="chart-container">
                    <h5><i class="fas fa-trophy"></i> Performance Summary</h5>
                    <div class="row text-center">
                        <div class="col-md-4">
                            <div class="p-3">
                                <h3 class="text-primary">
                                    <fmt:formatNumber value="${dashboardData.averageTestScore}" pattern="##.##"/>%
                                </h3>
                                <p class="text-muted">Average Test Score</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="p-3">
                                <h3 class="text-success">
                                    <fmt:formatNumber value="${dashboardData.testCompletionRate}" pattern="##.##"/>%
                                </h3>
                                <p class="text-muted">Test Completion Rate</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="p-3">
                                <h3 class="text-info">${dashboardData.totalTests}</h3>
                                <p class="text-muted">Total Tests Created</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%@include file="../footer.jsp" %>

    <!-- JavaScript for Charts -->
    <script src="/assets/js/vendor/jquery-1.12.4.min.js"></script>
    <script src="/assets/js/bootstrap.min.js"></script>
    
    <script>
        // Test Activity Chart
        const testActivityCtx = document.getElementById('testActivityChart').getContext('2d');
        const testActivityChart = new Chart(testActivityCtx, {
            type: 'line',
            data: {
                labels: [
                    <c:forEach var="data" items="${dashboardData.monthlyTestData}" varStatus="status">
                        '${data.month}'<c:if test="${!status.last}">,</c:if>
                    </c:forEach>
                ],
                datasets: [{
                    label: 'Tests Started',
                    data: [
                        <c:forEach var="data" items="${dashboardData.monthlyTestData}" varStatus="status">
                            ${data.tests}<c:if test="${!status.last}">,</c:if>
                        </c:forEach>
                    ],
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.1
                }, {
                    label: 'Tests Completed',
                    data: [
                        <c:forEach var="data" items="${dashboardData.monthlyTestData}" varStatus="status">
                            ${data.completions}<c:if test="${!status.last}">,</c:if>
                        </c:forEach>
                    ],
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Test Activity Trends'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // User Distribution Pie Chart
        const userDistCtx = document.getElementById('userDistributionChart').getContext('2d');
        const userDistChart = new Chart(userDistCtx, {
            type: 'doughnut',
            data: {
                labels: [
                    <c:forEach var="entry" items="${dashboardData.usersByRole}" varStatus="status">
                        '${entry.key}'<c:if test="${!status.last}">,</c:if>
                    </c:forEach>
                ],
                datasets: [{
                    data: [
                        <c:forEach var="entry" items="${dashboardData.usersByRole}" varStatus="status">
                            ${entry.value}<c:if test="${!status.last}">,</c:if>
                        </c:forEach>
                    ],
                    backgroundColor: [
                        '#FF6384',
                        '#36A2EB',
                        '#FFCE56',
                        '#4BC0C0',
                        '#9966FF',
                        '#FF9F40'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // User Registration Chart
        const userRegCtx = document.getElementById('userRegistrationChart').getContext('2d');
        const userRegChart = new Chart(userRegCtx, {
            type: 'bar',
            data: {
                labels: [
                    <c:forEach var="data" items="${dashboardData.monthlyUserData}" varStatus="status">
                        '${data.month}'<c:if test="${!status.last}">,</c:if>
                    </c:forEach>
                ],
                datasets: [{
                    label: 'New Registrations',
                    data: [
                        <c:forEach var="data" items="${dashboardData.monthlyUserData}" varStatus="status">
                            ${data.registrations}<c:if test="${!status.last}">,</c:if>
                        </c:forEach>
                    ],
                    backgroundColor: 'rgba(54, 162, 235, 0.8)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Revenue Chart
        const revenueCtx = document.getElementById('revenueChart').getContext('2d');
        const revenueChart = new Chart(revenueCtx, {
            type: 'area',
            data: {
                labels: [
                    <c:forEach var="data" items="${dashboardData.monthlyRevenue}" varStatus="status">
                        '${data.month}/${data.year}'<c:if test="${!status.last}">,</c:if>
                    </c:forEach>
                ],
                datasets: [{
                    label: 'Revenue ($)',
                    data: [
                        <c:forEach var="data" items="${dashboardData.monthlyRevenue}" varStatus="status">
                            ${data.revenue}<c:if test="${!status.last}">,</c:if>
                        </c:forEach>
                    ],
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.3)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Monthly Revenue'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });

        // Auto-refresh dashboard every 5 minutes
        setInterval(function() {
            location.reload();
        }, 300000);
    </script>
</body>
</html>

================
File: web/admin/manageTests.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
    <head>
        <title>Quản lý bài Test - Admin</title>
        <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/css/style.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
        <style>
            body {
                background: #f9f9f9;
                padding-top: 80px;
            }
            .container {
                /*background: #fff;*/
                /*border-radius: 10px;*/
                /*box-shadow: 0 2px 8px rgba(0,0,0,0.1);*/
                padding: 30px;
                margin-top: 30px;
            }
            h2 {
                color: #333;
                border-bottom: 2px solid #007BFF;
                padding-bottom: 8px;
                margin-bottom: 20px;
            }
            .add-link {
                margin-bottom: 15px;
                display: inline-block;
                background: #007BFF;
                color: #fff;
                padding: 8px 16px;
                border-radius: 4px;
                text-decoration: none;
            }
            .add-link:hover {
                background: #0056b3;
            }
            table {
                width: 100%;
                margin-top: 20px;
            }
            th, td {
                text-align: left;
                padding: 10px;
            }
            th {
                background: #007BFF;
                color: #fff;
            }
            tr:nth-child(even) {
                background: #f2f2f2;
            }
            .action-link {
                margin-right: 8px;
            }
            .alert {
                margin-bottom: 20px;
            }
        </style>
    </head>
    <body>
        <jsp:include page="../header.jsp" />
        <div class="container">
            <h2>Quản lý bài Test - Admin</h2>

            <!-- Success message -->
            <c:if test="${not empty message}">
                <div class="alert alert-success" role="alert">
                    ${message}
                </div>
            </c:if>

            <!-- Error message -->
            <c:if test="${not empty error}">
                <div class="alert alert-danger" role="alert">
                    ${error}
                </div>
            </c:if>

            <a class="add-link" href="${pageContext.request.contextPath}/test?action=create">Thêm mới Test</a>
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Tên</th>
                        <th>Mô tả</th>
                        <th>Loại</th>
                        <th>Danh mục</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach var="test" items="${testList}">
                        <tr>
                            <td>${test.id}</td>
                            <td>${test.name}</td>
                            <td>${test.description}</td>
                            <td><c:choose><c:when test="${test.is_practice}">Practice</c:when><c:otherwise>Official</c:otherwise></c:choose></td>
                            <td>${categoryMap[test.category_id]}</td>
                            <td>
                                <a class="action-link btn btn-sm btn-warning" href="${pageContext.request.contextPath}/test?action=edit&id=${test.id}">Sửa</a>
                                <a class="action-link btn btn-sm btn-danger" href="${pageContext.request.contextPath}/test?action=delete&id=${test.id}" onclick="return confirm('Bạn chắc chắn muốn xoá?');">Xoá</a>
                            </td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>
        </div>
            <jsp:include page="../footer.jsp" />
            <!-- JS -->
        <script src="/assets/js/bootstrap.bundle.min.js"></script>
    </body>
</html>

================
File: web/Category/addCategory.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
    <head>
        <title>Add Category</title>

        <!-- CSS Libraries -->
        <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="/assets/css/slicknav.css">
        <link rel="stylesheet" href="/assets/css/flaticon.css">
        <link rel="stylesheet" href="/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="/assets/css/gijgo.css">
        <link rel="stylesheet" href="/assets/css/animate.min.css">
        <link rel="stylesheet" href="/assets/css/animated-headline.css">
        <link rel="stylesheet" href="/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="/assets/css/themify-icons.css">
        <link rel="stylesheet" href="/assets/css/slick.css">
        <link rel="stylesheet" href="/assets/css/nice-select.css">
        <link rel="stylesheet" href="/assets/css/style.css">

        <style>
            html, body {
                margin: 0;
                padding: 0;
                height: 100%;
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
            }

            .page-wrapper {
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                padding-top: 80px; /* tránh header che */
            }

            main {
                flex: 1;
                padding: 20px;
            }

            footer {
                background-color: #f1f1f1;
                padding: 10px 20px;
                text-align: center;
                font-size: 14px;
            }

            .form-container {
                background: #fff;
                padding: 30px;
                border-radius: 8px;
                max-width: 600px;
                margin: 20px auto;
                box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            }

            .form-title {
                color: #333;
                text-align: center;
                margin-bottom: 25px;
                font-weight: 600;
            }

            .alert {
                padding: 10px;
                margin: 10px 0;
                border-radius: 4px;
            }

            .alert-danger {
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
        </style>
    </head>
    <body>
        <div class="page-wrapper">
            <jsp:include page="/header.jsp" />
            <main>
                <div class="form-container">
                    <h2 class="form-title">Add New Category</h2>

                    <c:if test="${not empty error}">
                        <div class="alert alert-danger">${error}</div>
                    </c:if>

                    <form method="post" action="category" id="categoryForm" class="needs-validation" novalidate>
                        <input type="hidden" name="action" value="insert" />

                        <div class="form-group">
                            <label for="name">Category Name:</label>
                            <input type="text" class="form-control" name="name" id="name" required 
                                   placeholder="Enter category name" maxlength="300"/>
                            <div class="invalid-feedback">
                                Please enter a valid category name.
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="num_question">Number of Questions:</label>
                            <input type="number" class="form-control" name="num_question" id="num_question" 
                                   min="1" max="500" required placeholder="Number of questions"/>
                            <div class="invalid-feedback">
                                Please enter a number between 1 and 500.
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="duration">Duration (minutes):</label>
                            <input type="number" class="form-control" name="duration" id="duration" 
                                   min="1" max="300" required placeholder="Test duration in minutes"/>
                            <div class="invalid-feedback">
                                Please enter a duration between 1 and 300 minutes.
                            </div>
                        </div>

                        <div class="form-group mt-4 text-center">
                            <button type="submit" class="btn btn-primary">Add Category</button>
                            <a href="category" class="btn btn-secondary ml-2">Cancel</a>
                        </div>
                    </form>
                </div>
            </main>
            <jsp:include page="/footer.jsp" />
        </div>

        <!-- JS Libraries -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.nice-select.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.sticky.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/plugins.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/main.js"></script>

        <script>
        // Bootstrap form validation script
            (function () {
                'use strict';
                window.addEventListener('load', function () {
                    // Fetch all forms we want to apply validation to
                    var forms = document.getElementsByClassName('needs-validation');
                    // Loop over them and prevent submission
                    var validation = Array.prototype.filter.call(forms, function (form) {
                        form.addEventListener('submit', function (event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
        </script>
    </body>
</html>

================
File: web/Category/categoryList.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
    <head>
        <title>Category List</title>

        <!-- CSS Libraries -->
        <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="/assets/css/slicknav.css">
        <link rel="stylesheet" href="/assets/css/flaticon.css">
        <link rel="stylesheet" href="/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="/assets/css/gijgo.css">
        <link rel="stylesheet" href="/assets/css/animate.min.css">
        <link rel="stylesheet" href="/assets/css/animated-headline.css">
        <link rel="stylesheet" href="/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="/assets/css/themify-icons.css">
        <link rel="stylesheet" href="/assets/css/slick.css">
        <link rel="stylesheet" href="/assets/css/nice-select.css">
        <link rel="stylesheet" href="/assets/css/style.css">

        <style>
            html, body {
                margin: 0;
                padding-top:  30px;
                height: 100%;
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
            }

            .page-wrapper {
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                padding-top: 80px; /* tránh bị header che */
            }

            main {
                flex: 1;
                padding: 20px;
            }

            footer {
                background-color: #f1f1f1;
                padding: 10px 20px;
                text-align: center;
                font-size: 14px;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                background-color: white;
                margin-top: 20px;
            }

            th, td {
                border: 1px solid #ccc;
                padding: 8px;
                text-align: left;
            }

            h2 {
                margin-top: 0;
            }

            .alert {
                padding: 10px;
                margin: 10px 0;
                border-radius: 4px;
            }

            .alert-success {
                background-color: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }

            .alert-danger {
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
        </style>
    </head>
    <body>
        <div class="page-wrapper">
            <jsp:include page="/header.jsp" />
            <main>
                <h2>Category List</h2>

                <form method="get" action="category" class="mb-4">
                    <div class="input-group">
                        <input type="text" class="form-control" name="name" placeholder="Search by name" value="${param.name}" />
                        <div class="input-group-append">
                            <button type="submit" class="btn btn-primary">Search</button>
                        </div>
                    </div>
                </form>

                <c:if test="${not empty error}">
                    <div class="alert alert-danger">${error}</div>
                </c:if>

                <c:if test="${not empty message}">
                    <div class="alert alert-success">${message}</div>
                </c:if>

                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead class="thead-dark">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Number of Questions</th>
                                <th>Duration (minutes)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <c:forEach var="cate" items="${categoryList}">
                                <tr>
                                    <td>${cate.id}</td>
                                    <td>${cate.name}</td>
                                    <td>${cate.num_question}</td>
                                    <td>${cate.duration}</td>
                                    <td>
                                        <a href="category?action=updateForm&id=${cate.id}" class="btn btn-sm btn-primary">Update</a>
                                        <a href="category?action=delete&id=${cate.id}"
                                           onclick="return confirm('Are you sure to delete category ID ${cate.id}?');"
                                           class="btn btn-sm btn-danger">Delete</a>
                                    </td>
                                </tr>
                            </c:forEach>
                        </tbody>
                    </table>
                </div>

                <div class="mt-3">
                    <a href="category?action=addForm" class="btn btn-success">Add new Category</a>
                </div>
            </main>
            <jsp:include page="/footer.jsp" />
        </div>

        <!-- JS Libraries -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.nice-select.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.sticky.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/plugins.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/main.js"></script>
    </body>
</html>

================
File: web/Category/updateCategory.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
    <head>
        <title>Update Category</title>

        <!-- CSS Libraries -->
        <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="/assets/css/slicknav.css">
        <link rel="stylesheet" href="/assets/css/flaticon.css">
        <link rel="stylesheet" href="/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="/assets/css/gijgo.css">
        <link rel="stylesheet" href="/assets/css/animate.min.css">
        <link rel="stylesheet" href="/assets/css/animated-headline.css">
        <link rel="stylesheet" href="/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="/assets/css/themify-icons.css">
        <link rel="stylesheet" href="/assets/css/slick.css">
        <link rel="stylesheet" href="/assets/css/nice-select.css">
        <link rel="stylesheet" href="/assets/css/style.css">

        <style>
            html, body {
                margin: 0;
                padding: 0;
                height: 100%;
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
            }

            .page-wrapper {
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                padding-top: 80px;
            }

            main {
                flex: 1;
                padding: 20px;
            }

            .form-container {
                background: #fff;
                padding: 30px;
                border-radius: 8px;
                max-width: 600px;
                margin: 20px auto;
                box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            }

            .form-title {
                color: #333;
                text-align: center;
                margin-bottom: 25px;
                font-weight: 600;
            }

            footer {
                background-color: #f1f1f1;
                padding: 10px 20px;
                text-align: center;
                font-size: 14px;
            }

            .alert {
                padding: 10px;
                margin: 10px 0;
                border-radius: 4px;
            }

            .alert-danger {
                background-color: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
        </style>
    </head>
    <body>
        <div class="page-wrapper">
            <jsp:include page="/header.jsp" />
            <main>
                <div class="form-container">
                    <h2 class="form-title">Update Category</h2>

                    <c:if test="${not empty error}">
                        <div class="alert alert-danger">${error}</div>
                    </c:if>

                    <c:if test="${empty category}">
                        <div class="alert alert-danger">Category not found!</div>
                        <div class="text-center mt-3">
                            <a href="category" class="btn btn-primary">Back to Category List</a>
                        </div>
                    </c:if>

                    <c:if test="${not empty category}">
                        <form method="post" action="category" id="categoryForm" class="needs-validation" novalidate>
                            <input type="hidden" name="action" value="update" />

                            <div class="form-group">
                                <label for="id">ID:</label>
                                <input type="number" class="form-control" id="id" name="id" value="${category.id}" readonly />
                            </div>

                            <div class="form-group">
                                <label for="name">Category Name:</label>
                                <input type="text" class="form-control" name="name" id="name" value="${category.name}" 
                                       required placeholder="Enter category name" maxlength="300"/>
                                <div class="invalid-feedback">
                                    Please enter a valid category name.
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="num_question">Number of Questions:</label>
                                <input type="number" class="form-control" name="num_question" id="num_question" 
                                       value="${category.num_question}" min="1" max="500" required 
                                       placeholder="Number of questions"/>
                                <div class="invalid-feedback">
                                    Please enter a number between 1 and 500.
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="duration">Duration (minutes):</label>
                                <input type="number" class="form-control" name="duration" id="duration" 
                                       value="${category.duration}" min="1" max="300" required 
                                       placeholder="Test duration in minutes"/>
                                <div class="invalid-feedback">
                                    Please enter a duration between 1 and 300 minutes.
                                </div>
                            </div>

                            <div class="form-group mt-4 text-center">
                                <button type="submit" class="btn btn-primary">Update Category</button>
                                <a href="category" class="btn btn-secondary ml-2">Cancel</a>
                            </div>
                        </form>
                    </c:if>
                </div>
            </main>
            <jsp:include page="/footer.jsp" />
        </div>

        <!-- JS Libraries -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.nice-select.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.sticky.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/plugins.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/main.js"></script>

        <script>
        // Bootstrap form validation script
            (function () {
                'use strict';
                window.addEventListener('load', function () {
                    // Fetch all forms we want to apply validation to
                    var forms = document.getElementsByClassName('needs-validation');
                    // Loop over them and prevent submission
                    var validation = Array.prototype.filter.call(forms, function (form) {
                        form.addEventListener('submit', function (event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
        </script>
    </body>
</html>

================
File: web/chapter/chapterForm.jsp
================
<%-- 
    Document   : chapterForm
    Created on : June 01, 2025, 01:14:00 AM
    Author     : Na
--%>
<%@ page contentType="text/html; charset=UTF-8" language="java" %>
<%@ page errorPage="error.jsp" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible' : 'Sửa Chapter'}</title>
              <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">

        <!-- CSS here -->
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/slicknav.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/flaticon.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/gijgo.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/animate.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/animated-headline.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/themify-icons.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/slick.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/nice-select.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/style.css">
        <style>
            .text-danger {
                color: red;
                font-size: 0.875em;
            }
            .text-success {
                color: green;
                font-size: 0.875em;
            }
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }
            body {
                padding-top: 130px;
            }
            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                margin: 20px auto;
                max-width: 1200px;
            }
            main h2 {
                text-align: center;
                font-weight: 700;
                color: #343a40;
                margin-bottom: 30px;
            }
            /* Form thêm/sửa */
            form[method="post"] {
                background: #ffffff;
                padding: 30px;
                margin: 20px auto;
                border-radius: 10px;
                max-width: 1200px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                font-size: 16px;
                display: flex;
                align-items: flex-end;
                gap: 15px;
                flex-wrap: wrap;
            }
            form[method="post"] .form-group {
                display: flex;
                flex-direction: column;
                margin-bottom: 0;
            }
            form[method="post"] input[type="text"],
            form[method="post"] input[type="number"],
            form[method="post"] textarea,
            form[method="post"] select {
                width: 200px;
                padding: 8px 12px;
                font-size: 14px;
                border-radius: 6px;
                border: 1px solid #ced4da;
                box-sizing: border-box;
                background-color: #fdfdfd;
                transition: border-color 0.3s ease;
            }
            form[method="post"] textarea {
                resize: vertical;
                min-height: 80px;
                width: 300px;
            }
            form[method="post"] input[type="text"]:focus,
            form[method="post"] input[type="number"]:focus,
            form[method="post"] textarea:focus,
            form[method="post"] select:focus {
                border-color: #007bff;
                outline: none;
            }
            form[method="post"] label {
                font-weight: 600;
                display: block;
                margin-bottom: 5px;
                color: #333;
            }
            form[method="post"] input[type="submit"],
            form[method="post"] a {
                padding: 8px 15px;
                font-size: 14px;
                border-radius: 6px;
                border: none;
                text-decoration: none;
                color: #fff;
                background-color: #28a745;
                transition: background-color 0.3s ease;
            }
            form[method="post"] a {
                background-color: #6c757d;
            }
            form[method="post"] input[type="submit"]:hover,
            form[method="post"] a:hover {
                background-color: #218838;
            }
            form[method="post"] a:hover {
                background-color: #5a6268;
            }
            /* Thông báo */
            .text-danger, .text-success {
                font-size: 0.9em;
                font-weight: bold;
                margin: 10px 0;
                text-align: center;
            }
        </style>
    </head>
    <body>
        <!-- Preloader Start -->
        <div id="preloader-active">
            <div class="preloader d-flex align-items-center justify-content-center">
                <div class="preloader-inner position-relative">
                    <div class="preloader-circle"></div>
                    <div class="preloader-img pere-text">
                        <img src="${pageContext.request.contextPath}/assets/img/logo/loder.png" alt="">
                    </div>
                </div>
            </div>
        </div>
        <!-- Preloader End -->

        <%@include file="../header.jsp" %>

        <main>
            <h2>${chapterToEdit == null ? 'Add new Chapter' : 'Edit Chapter'}</h2>

            <!-- Thông báo lỗi và thành công -->
            <c:if test="${not empty errorMessage}">
                <div class="text-danger"><c:out value="${errorMessage}"/></div>
            </c:if>
            <c:if test="${not empty message}">
                <div class="text-success"><c:out value="${message}"/></div>
            </c:if>

            <!-- Form thêm/sửa chapter -->
            <form action="chapter" method="post">
                <input type="hidden" name="service" value="${chapterToEdit == null ? 'add' : 'edit'}" />
                <c:if test="${not empty chapterToEdit}">
                    <input type="hidden" name="id" value="${chapterToEdit.id}" />
                </c:if>
                <div class="form-group">
                    <label for="id">ID</label>
                    <input type="number" name="id" id="id" value="${chapterToEdit != null ? chapterToEdit.id : ''}" 
                           ${chapterToEdit != null ? 'readonly' : ''} required placeholder="enter ID" min="1" />
                </div>
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" name="name" id="name" value="${chapterToEdit != null ? chapterToEdit.name : ''}" 
                           required placeholder="enter Name chapter" maxlength="100" />
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea name="description" id="description" placeholder="enter description" maxlength="500">${chapterToEdit != null ? chapterToEdit.description : ''}</textarea>
                </div>
                <div class="form-group">
                    <label for="subject_id">Subject</label>
                    <select name="subject_id" id="subject_id" required>
                        <option value="">Choose Subject</option>
                        <c:forEach var="subject" items="${listSubject}">
                            <option value="${subject.id}" ${chapterToEdit != null && chapterToEdit.subject_id == subject.id ? 'selected' : ''}>
                                <c:out value="${subject.name}"/>
                            </option>
                        </c:forEach>
                    </select>
                </div>
                <div>
                    <input type="submit" value="${chapterToEdit == null ? 'Creat' : 'Save'}" />
                    <a href="chapter">Back</a>
                </div>
            </form>
        </main>

        <%@include file="../footer.jsp" %>
        <div id="back-top">
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.nice-select.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.sticky.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/plugins.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/main.js"></script>
    </body>
</html>

================
File: web/chapter/listChapter.jsp
================
<%-- 
    Document   : listChapter
    Created on : May 21, 2025, 02:06:43 AM
    Author     : Na
--%>
<%@ page contentType="text/html; charset=UTF-8" language="java" %>
<%@ page errorPage="error.jsp" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Quản lý Chapter</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">

        <!-- CSS here -->
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/slicknav.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/flaticon.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/gijgo.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/animate.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/animated-headline.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/themify-icons.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/slick.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/nice-select.css">
        <link rel="stylesheet" href="${pageContext.request.contextPath}/assets/css/style.css">
        <style>
            .text-danger {
                color: red;
                font-size: 0.875em;
            }
            .text-success {
                color: green;
                font-size: 0.875em;
            }
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }
            body {
                padding-top: 130px;
            }
            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                margin: 20px auto;
                max-width: 1200px;
            }
            main h2 {
                text-align: center;
                font-weight: 700;
                color: #343a40;
                margin-bottom: 30px;
            }
            /* Form tìm kiếm */
            form[method="get"] {
                display: flex;
                align-items: center;
                gap: 15px;
                flex-wrap: wrap;
                justify-content: center;
                margin-bottom: 30px;
                background: #ffffff;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            form[method="get"] .form-group {
                display: flex;
                align-items: center;
                gap: 8px;
                margin-bottom: 0;
            }
            form[method="get"] label {
                font-weight: 600;
                color: #333;
                white-space: nowrap;
            }
            form[method="get"] input[type="text"],
            form[method="get"] select {
                width: 200px;
                padding: 8px 12px;
                font-size: 14px;
                border-radius: 6px;
                border: 1px solid #ced4da;
                box-sizing: border-box;
                background-color: #fdfdfd;
                transition: border-color 0.3s ease;
            }
            form[method="get"] input[type="text"]:focus,
            form[method="get"] select:focus {
                border-color: #007bff;
                outline: none;
            }
            form[method="get"] input[type="submit"],
            form[method="get"] a {
                padding: 8px 15px;
                font-size: 14px;
                border-radius: 6px;
                border: none;
                text-decoration: none;
                color: #fff;
                background-color: #28a745;
                transition: background-color 0.3s ease;
            }
            form[method="get"] a {
                background-color: #6c757d;
            }
            form[method="get"] input[type="submit"]:hover,
            form[method="get"] a:hover {
                background-color: #218838;
            }
            form[method="get"] a:hover {
                background-color: #5a6268;
            }
            /* Nút thêm mới */
            .add-btn {
                display: inline-block;
                margin-bottom: 20px;
                padding: 8px 15px;
                font-size: 14px;
                border-radius: 6px;
                text-decoration: none;
                color: #fff;
                background-color: #28a745;
                transition: background-color 0.3s ease;
            }
            .add-btn:hover {
                background-color: #218838;
            }
            /* Bảng */
            table.table {
                background-color: #fff;
                border-radius: 6px;
                overflow: hidden;
            }
            table.table thead {
                background-color: #343a40;
                color: #fff;
            }
            table.table td,
            table.table th {
                vertical-align: middle !important;
                text-align: center;
            }
            table.table .btn {
                margin: 2px;
                font-size: 14px;
                padding: 5px 10px;
            }
            /* Thông báo */
            .text-danger, .text-success {
                font-size: 0.9em;
                font-weight: bold;
                margin: 10px 0;
                text-align: center;
            }
        </style>
    </head>
    <body>
        <!-- Preloader Start -->
        <div id="preloader-active">
            <div class="preloader d-flex align-items-center justify-content-center">
                <div class="preloader-inner position-relative">
                    <div class="preloader-circle"></div>
                    <div class="preloader-img pere-text">
                        <img src="${pageContext.request.contextPath}/assets/img/logo/loder.png" alt="">
                    </div>
                </div>
            </div>
        </div>
        <!-- Preloader End -->

        <%@include file="../header.jsp" %>

        <main>
            <h2>Manage Chapter</h2>

            <!-- Thông báo lỗi và thành công -->
            <c:if test="${not empty errorMessage}">
                <div class="text-danger"><c:out value="${errorMessage}"/></div>
            </c:if>
            <c:if test="${not empty message}">
                <div class="text-success"><c:out value="${message}"/></div>
            </c:if>

            <!-- Form tìm kiếm -->
            <form method="get" action="chapter">
                <input type="hidden" name="service" value="search" />
                <div class="form-group">
                    <label for="id">ID:</label>
                    <input type="text" name="id" id="id" placeholder="Enter ID" value="${param.id != null ? param.id : ''}" />
                </div>
                <div class="form-group">
                    <label for="name">Name:</label>
                    <input type="text" name="name" id="name" placeholder="Enter Name" value="${param.name != null ? param.name : ''}" />
                </div>
                <div class="form-group">
                    <label for="subject_id">Subject:</label>
                    <select name="subject_id" id="subject_id">
                        <option value="">Choose Subject</option>
                        <c:forEach var="subject" items="${listSubject}">
                            <option value="${subject.id}" ${param.subject_id == subject.id ? 'selected' : ''}>
                                <c:out value="${subject.name}"/>
                            </option>
                        </c:forEach>
                    </select>
                </div>
                <div class="form-group">
                    <input type="submit" value="Find" />
                    <a href="chapter">Clear</a>
                </div>
            </form>

            <!-- Nút thêm chapter mới -->
            <div style="text-align: center;">
                <a href="chapter?service=add" class="add-btn">Add new Chapter</a>
            </div>

            <!-- Bảng danh sách chapter -->
            <h2>Chapter</h2>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Subject</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <c:choose>
                        <c:when test="${not empty listChapter}">
                            <c:forEach var="ch" items="${listChapter}">
                                <tr>
                                    <td><c:out value="${ch.id}"/></td>
                                    <td><c:out value="${ch.name}"/></td>
                                    <td><c:out value="${ch.description}"/></td>
                                    <td><c:out value="${subjectMap[ch.subject_id] != null ? subjectMap[ch.subject_id] : 'Không xác định'}"/></td>
                                    <td>
                                        <a href="chapter?service=edit&editId=${ch.id}" class="btn btn-primary btn-sm">Edit</a>
                                        <a href="chapter?service=delete&id=${ch.id}" class="btn btn-danger btn-sm" 
                                           onclick="return confirm('Bạn chắc chắn muốn xóa ID ${ch.id}?');">Delete</a>
                                    </td>
                                </tr>
                            </c:forEach>
                        </c:when>
                        <c:otherwise>
                            <tr><td colspan="5">No data available</td></tr>
                        </c:otherwise>
                    </c:choose>
                </tbody>
            </table>
        </main>

         <%@include file="../footer.jsp" %>
        <div id="back-top">
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.nice-select.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.sticky.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/plugins.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/main.js"></script>
    </body>
</html>

================
File: web/footer.jsp
================
<%-- 
    Document   : footer
    Created on : May 29, 2025, 9:37:59 AM
    Author     : BuiNgocLinh
--%>

<footer>
    
    <div class="footer-wrappper footer-bg">
        <!-- Footer Start-->
        <div class="footer-area footer-padding">
            <div class="container">
                <div class="row justify-content-between">
                    <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                        <div class="single-footer-caption mb-50">
                            <div class="single-footer-caption mb-30">
                                <!-- logo -->
                                <div class="footer-logo mb-25">
                                    <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                </div>
                                <div class="footer-tittle">
                                    <div class="footer-pera">
                                        <p>Learning starts the moment you decide to grow.</p>
                                    </div>
                                </div>
                                <!-- social -->
                                <div class="footer-social">
                                    <a href="#"><i class="fab fa-twitter"></i></a>
                                    <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                    <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Education Services -->
                    <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                        <div class="single-footer-caption mb-50">
                            <div class="footer-tittle">
                                <h4>Courses</h4>
                                <ul>
                                    <li><a href="#">Math</a></li>
                                    <li><a href="#">Science</a></li>
                                    <li><a href="#">Languages</a></li>
                                    <li><a href="#">History</a></li>
                                    <li><a href="#">More...</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Exams & Study -->
                    <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                        <div class="single-footer-caption mb-50">
                            <div class="footer-tittle">
                                <h4>Study Materials</h4>
                                <ul>
                                    <li><a href="#">Quizzes</a></li>
                                    <li><a href="#">Past Papers</a></li>
                                    <li><a href="#">Tutorial Videos</a></li>
                                    <li><a href="#">Assignments</a></li>
                                    <li><a href="#">Packages</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Support -->
                    <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                        <div class="single-footer-caption mb-50">
                            <div class="footer-tittle">
                                <h4>Support</h4>
                                <ul>
                                    <li><a href="#">FAQs</a></li>
                                    <li><a href="#">Help Center</a></li>
                                    <li><a href="#">Contact Us</a></li>
                                    <li><a href="#">Feedback</a></li>
                                    <li><a href="#">Terms & Policies</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <!-- footer-bottom area -->
        <div class="footer-bottom-area">
            <div class="container">
                <div class="footer-border">
                    <div class="row d-flex align-items-center">
                        <div class="col-xl-12 ">
                            <div class="footer-copy-right text-center">
                                <p>
                                    &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | Made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End-->
    </div>
</footer> 

<!-- Nút cu?n lên ??u trang -->
<!-- Giao di?n chatbot + nút Go to Top x?p d?c -->
<!-- Chatbot + Nút Go to Top -->
<div id="floating-tools">
  <div id="chatbot-box">
    <div id="chatbot-header">
      <img src="img/chatbot.png" onerror="this.style.display='none'" alt="Bot"> Chat h? tr?
    </div>
    <div id="chatbot-messages"></div>
    <textarea id="chatbot-input" placeholder="Nh?p câu h?i..."></textarea>
  </div>

  <div id="back-top">
    <a title="Go to Top" href="#"><i class="fas fa-level-up-alt"></i></a>
  </div>
</div>

<style>
  #floating-tools {
    position: fixed;
    bottom: 24px;
    right: 24px;
    display: flex;
    flex-direction: column;
    gap: 16px;
    z-index: 9999;
    align-items: flex-end;
  }

  #chatbot-box {
    width: 320px;
    height: 360px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  #chatbot-header {
    display: flex;
    align-items: center;
    padding: 10px;
    background: #007bff;
    color: white;
    font-weight: bold;
  }

  #chatbot-header img {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 10px;
  }

  #chatbot-messages {
    padding: 10px;
    overflow-y: auto;
    flex: 1;
    background: #f9f9f9;
    font-size: 14px;
    max-height: 240px;
  }

  #chatbot-input {
    width: 100%;
    height: 60px;
    border: none;
    padding: 8px;
    box-sizing: border-box;
    border-top: 1px solid #ccc;
    resize: none;
  }

  .chat-msg {
    margin-bottom: 8px;
    line-height: 1.5;
  }

  .chat-user {
    font-weight: bold;
    color: #007bff;
  }

  .chat-bot {
    font-weight: bold;
    color: #28a745;
  }

  #back-top a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 45px;
    height: 45px;
    background-color: #6c63ff;
    color: white;
    border-radius: 50%;
    box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    text-decoration: none;
    font-size: 20px;
    position: fixed;
    bottom: 24px;
    right: 24px;
    z-index: 9998;
  }

  #back-top a:hover {
    background: #5a1bb0;
  }
</style>


<div id="floating-tools">
  <div id="chatbot-box">
    <div id="chatbot-header">
      <!-- Ki?m tra ?nh chatbot.png có th?t không, n?u không thì thay b?ng emoji -->
      <img src="img/chatbot.png" onerror="this.style.display='none'" alt="Bot"> Chat h? tr?
    </div>
    <div id="chatbot-messages"></div>
    <textarea id="chatbot-input" placeholder="Nh?p câu h?i..."></textarea>
  </div>

  <div id="back-top">
    <a title="Go to Top" href="#"><i class="fas fa-level-up-alt"></i></a>
  </div>
</div>

<script>
  const input = document.getElementById("chatbot-input");
  const messages = document.getElementById("chatbot-messages");

  input.addEventListener("keydown", function (e) {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      const userText = input.value.trim();
      if (!userText) return;

      // Hi?n th? tin nh?n ng??i dùng
      const userMsg = document.createElement("div");
      userMsg.classList.add("chat-msg");
      userMsg.innerHTML = `<span class="chat-user">B?n:</span> ${userText}`;
      messages.appendChild(userMsg);

      input.value = "";

      // G?i ??n server
      fetch("chatbot-response?query=" + encodeURIComponent(userText))
        .then((res) => res.text())
        .then((data) => {
          const botMsg = document.createElement("div");
          botMsg.classList.add("chat-msg");
          botMsg.innerHTML = `<span class="chat-bot">Bot:</span> ${data}`;
          messages.appendChild(botMsg);
          messages.scrollTop = messages.scrollHeight;
        })
        .catch(() => {
          const errorMsg = document.createElement("div");
          errorMsg.classList.add("chat-msg");
          errorMsg.innerHTML = `<span class="chat-bot">Bot:</span> ? L?i k?t n?i ??n máy ch?.`;
          messages.appendChild(errorMsg);
        });
    }
  });
</script>






<!-- JS scripts remain unchanged -->
<script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
<script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
<script src="./assets/js/popper.min.js"></script>
<script src="./assets/js/bootstrap.min.js"></script>
<script src="./assets/js/jquery.slicknav.min.js"></script>
<script src="./assets/js/owl.carousel.min.js"></script>
<script src="./assets/js/slick.min.js"></script>
<script src="./assets/js/wow.min.js"></script>
<script src="./assets/js/animated.headline.js"></script>
<script src="./assets/js/jquery.magnific-popup.js"></script>
<script src="./assets/js/gijgo.min.js"></script>
<script src="./assets/js/jquery.nice-select.min.js"></script>
<script src="./assets/js/jquery.sticky.js"></script>
<script src="./assets/js/jquery.barfiller.js"></script>
<script src="./assets/js/jquery.counterup.min.js"></script>
<script src="./assets/js/waypoints.min.js"></script>
<script src="./assets/js/jquery.countdown.min.js"></script>
<script src="./assets/js/hover-direction-snake.min.js"></script>
<script src="./assets/js/contact.js"></script>
<script src="./assets/js/jquery.form.js"></script>
<script src="./assets/js/jquery.validate.min.js"></script>
<script src="./assets/js/mail-script.js"></script>
<script src="./assets/js/jquery.ajaxchimp.min.js"></script>
<script src="./assets/js/plugins.js"></script>
<script src="./assets/js/main.js"></script>

================
File: web/header.jsp
================
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<!--Header Start--> 
<div class="header-area header-transparent">
    <div class="main-header">
        <div class="header-bottom header-sticky">
            <div class="container-fluid">
                <div class="row align-items-center">
                    <!-- Logo -->
                    <div class="col-xl-2 col-lg-2">
                        <div class="logo">
                            <a href="/"><img src="/assets/img/logo/logo.png" alt="Logo"></a>
                        </div>
                    </div>

                    <!-- Navbar -->
                    <div class="col-xl-10 col-lg-10">
                        <div class="menu-wrapper d-flex align-items-center justify-content-end">
                            <div class="main-menu d-none d-lg-block">
                                <nav>
                                    <ul id="navigation">
                                        <li><a href="/">Home</a></li>
                                        <li><a href="#">Courses</a>
                                            <ul class="submenu">
                                                <li><a href="/subjects">Subjects</a></li>
                                                <li><a href="/LessonURL">Lessons</a></li>
                                                <li><a href="/chapter">Chapters</a></li>
                                                <li><a href="/study_package">Study Packages</a></li>

                                            </ul>
                                        </li>

                                        <c:if test="${sessionScope.account.role == 'admin'}">
                                            <li><a href="#">Admin</a>
                                                <ul class="submenu">
                                                    <li><a href="/admin">Dashboard</a></li>
                                                    <li><a href="/admin?action=listAccount">Manage Accounts</a></li>
                                                    <li><a href="/Question">Manage Questions</a></li>
                                                    <li><a href="/test">Manage Tests</a></li>
                                                    <li><a href="/student">Manage Students</a></li>
                                                    <li><a href="/invoice">Invoices</a></li>
                                                    <li><a href="/category">Test Categories</a></li>
                                                    <li><a href="/admin?action=analytics">Analytics</a></li>
                                                </ul>
                                            </li>
                                        </c:if>

                                        <c:if test="${sessionScope.account.role == 'teacher'}">
                                            <li><a href="#">Teacher</a>
                                                <ul class="submenu">
                                                    <li><a href="/student">Manage Student</a></li>
                                                    <li><a href="/LessonURL">My Lessons</a></li>
                                                    <li><a href="/Question">Question Bank</a></li>
                                                    <li><a href="/test">Manage Tests</a></li>
                                                    <li><a href="/chapter">Chapters</a></li>
                                                    <li><a href="/category">Test Categories</a></li>
                                                </ul>
                                            </li>
                                        </c:if>

                                        <c:if test="${sessionScope.role == 'student'}">
                                            <li><a href="#">Learning</a>
                                                <ul class="submenu">
                                                    <li><a href="/subjects">My Subjects</a></li>
                                                    <li><a href="/LessonURL">My Lessons</a></li>
                                                    <li><a href="/chapter">Chapters</a></li>
                                                </ul>
                                            </li>
                                            <li><a href="#">Tests & Practice</a>
                                                <ul class="submenu">
                                                    <li><a href="/student/taketest">All Tests & Practice</a></li>
                                                    <li><a href="/student/taketest?action=history">My Test History</a></li>
                                                    <li><a href="/Grade">My Grades</a></li>
                                                </ul>
                                            </li>
                                        </c:if>

                                        <c:if test="${sessionScope.account.role == 'parent'}">
                                            <li><a href="#">Parent</a>
                                                <ul class="submenu">
                                                    <li><a href="/invoice">Invoices</a></li>
                                                    <li><a href="/Grade">Grades</a></li>
                                                    <li><a href="/parent?action=myChildren">My Children</a></li>

                                                </ul>
                                            </li>
                                        </c:if>

                                        <li><a href="#">Blog</a>
                                            <ul class="submenu">
                                                <li><a href="blog.html">All Blogs</a></li>
                                                <li><a href="blog_details.html">Blog Details</a></li>
                                            </ul>
                                        </li>

                                        <li><a href="/contact">Contact</a></li>

                                        <!-- Right-side Buttons -->





                                        <c:choose>
                                            <c:when test="${sessionScope.role == 'student'}">
                                                <li class="button-header">
                                                    <a href="/student?action=viewProfile&id=${sessionScope.student.id}" class="btn btn3">My Profile</a>
                                                </li>
                                            </c:when>
                                            <c:otherwise>
                                                <li class="button-header">
                                                    <a href="/admin?action=viewProfile&id=${sessionScope.account.id}" class="btn btn3">My Profile</a>
                                                </li>
                                            </c:otherwise>
                                        </c:choose>









                                        <c:if test="${not empty sessionScope.student or not empty sessionScope.account}">
                                            <li class="button-header">
                                                <a href="/logout" class="btn btn3">Logout</a>
                                            </li>
                                        </c:if>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>

                    <!-- Mobile Menu -->
                    <div class="col-12">
                        <div class="mobile_menu d-block d-lg-none"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--Header End-->

================
File: web/index.html
================
<!doctype html>
<html class="no-js" lang="zxx">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Courses | Education</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">
        <!-- CSS here -->
        <link rel="stylesheet" href="assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="assets/css/slicknav.css">
        <link rel="stylesheet" href="assets/css/flaticon.css">
        <link rel="stylesheet" href="assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="assets/css/gijgo.css">
        <link rel="stylesheet" href="assets/css/animate.min.css">
        <link rel="stylesheet" href="assets/css/animated-headline.css">
        <link rel="stylesheet" href="assets/css/magnific-popup.css">
        <link rel="stylesheet" href="assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="assets/css/themify-icons.css">
        <link rel="stylesheet" href="assets/css/slick.css">
        <link rel="stylesheet" href="assets/css/nice-select.css">
        <link rel="stylesheet" href="assets/css/style.css">
    </head>

    <body>

        <!-- ? Preloader Start -->
        <div id="preloader-active">
            <div class="preloader d-flex align-items-center justify-content-center">
                <div class="preloader-inner position-relative">
                    <div class="preloader-circle"></div>
                    <div class="preloader-img pere-text">
                        <img src="assets/img/logo/loder.png" alt="">
                    </div>
                </div>
            </div>
        </div>
        <!-- Preloader Start -->
        <!-- Header Start -->
        <div class="header-area header-transparent">
            <div class="main-header ">
                <div class="header-bottom  header-sticky">
                    <div class="container-fluid">
                        <div class="row align-items-center">
                            <!-- Logo -->
                            <div class="col-xl-2 col-lg-2">
                                <div class="logo">
                                    <a href="index.html"><img src="assets/img/logo/logo.png" alt=""></a>
                                </div>
                            </div>
                            <div class="col-xl-10 col-lg-10">
                                <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                    <!-- Main-menu -->
                                    <div class="main-menu d-none d-lg-block">
                                        <nav>
                                            <ul id="navigation">                                                                                          
                                                <ul id="navigation">
                                                    <li><a href="/">Home</a></li>
                                                    <li><a href="#">Courses</a>
                                                        <ul class="submenu">
                                                            <li><a href="/subjects">Subjects</a></li>
                                                            <li><a href="/LessonURL">Lessons</a></li>
                                                            <li><a href="/chapter">Chapters</a></li>
                                                            <li><a href="/study_package">Study Packages</a></li>

                                                        </ul>
                                                    </li>
                                                    <li><a href="#">Blog</a>
                                                        <ul class="submenu">
                                                            <li><a href="blog.html">All Blogs</a></li>
                                                            <li><a href="blog_details.html">Blog Details</a></li>
                                                        </ul>
                                                    </li>

                                                    <li><a href="/contact">Contact</a></li>
                                                    <!--Button--> 
                                                    <li class="button-header"><a href="/login" class="btn btn3">Log in</a></li>
                                                    <li class="button-header"><a href="/register.jsp" class="btn btn3">Register</a></li>

                                                </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div> 
                            <!-- Mobile Menu -->
                            <div class="col-12">
                                <div class="mobile_menu d-block d-lg-none"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header End -->
        <main>
            <!--? slider Area Start-->
            <section class="slider-area slider-area2">
                <div class="slider-active">
                    <!-- Single Slider -->
                    <div class="single-slider slider-height2">
                        <div class="container">
                            <div class="row">
                                <div class="col-xl-8 col-lg-11 col-md-12">
                                    <div class="hero__caption hero__caption2">
                                        <h1 data-animation="bounceIn" data-delay="0.2s">Our courses</h1>
                                        <!-- breadcrumb Start-->
                                        <nav aria-label="breadcrumb">
                                            <ol class="breadcrumb">
                                                <li class="breadcrumb-item"><a href="index.html">Home</a></li>
                                                <li class="breadcrumb-item"><a href="#">Services</a></li> 
                                            </ol>
                                        </nav>
                                        <!-- breadcrumb End -->
                                    </div>
                                </div>
                            </div>
                        </div>          
                    </div>
                </div>
            </section>
            <!-- Courses area start -->
            <div class="courses-area section-padding40 fix">
                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-xl-7 col-lg-8">
                            <div class="section-tittle text-center mb-55">
                                <h2>Our featured courses</h2>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="properties properties2 mb-30">
                                <div class="properties__card">
                                    <div class="properties__img overlay1">
                                        <a href="#"><img src="assets/img/gallery/featured1.png" alt=""></a>
                                    </div>
                                    <div class="properties__caption">
                                        <p>User Experience</p>
                                        <h3><a href="#">Fundamental of UX for Application design</a></h3>
                                        <p>The automated process all your website tasks. Discover tools and techniques to engage effectively with vulnerable children and young people.
                                        </p>
                                        <div class="properties__footer d-flex justify-content-between align-items-center">
                                            <div class="restaurant-name">
                                                <div class="rating">
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star-half"></i>
                                                </div>
                                                <p><span>(4.5)</span> based on 120</p>
                                            </div>
                                            <div class="price">
                                                <span>$135</span>
                                            </div>
                                        </div>
                                        <a href="#" class="border-btn border-btn2">Find out more</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="properties properties2 mb-30">
                                <div class="properties__card">
                                    <div class="properties__img overlay1">
                                        <a href="#"><img src="assets/img/gallery/featured2.png" alt=""></a>
                                    </div>
                                    <div class="properties__caption">
                                        <p>User Experience</p>
                                        <h3><a href="#">Fundamental of UX for Application design</a></h3>
                                        <p>The automated process all your website tasks. Discover tools and techniques to engage effectively with vulnerable children and young people.

                                        </p>
                                        <div class="properties__footer d-flex justify-content-between align-items-center">
                                            <div class="restaurant-name">
                                                <div class="rating">
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star-half"></i>
                                                </div>
                                                <p><span>(4.5)</span> based on 120</p>
                                            </div>
                                            <div class="price">
                                                <span>$135</span>
                                            </div>
                                        </div>
                                        <a href="#" class="border-btn border-btn2">Find out more</a>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="properties properties2 mb-30">
                                <div class="properties__card">
                                    <div class="properties__img overlay1">
                                        <a href="#"><img src="assets/img/gallery/featured3.png" alt=""></a>
                                    </div>
                                    <div class="properties__caption">
                                        <p>User Experience</p>
                                        <h3><a href="#">Fundamental of UX for Application design</a></h3>
                                        <p>The automated process all your website tasks. Discover tools and techniques to engage effectively with vulnerable children and young people.

                                        </p>
                                        <div class="properties__footer d-flex justify-content-between align-items-center">
                                            <div class="restaurant-name">
                                                <div class="rating">
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star-half"></i>
                                                </div>
                                                <p><span>(4.5)</span> based on 120</p>
                                            </div>
                                            <div class="price">
                                                <span>$135</span>
                                            </div>
                                        </div>
                                        <a href="#" class="border-btn border-btn2">Find out more</a>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="properties properties2 mb-30">
                                <div class="properties__card">
                                    <div class="properties__img overlay1">
                                        <a href="#"><img src="assets/img/gallery/featured4.png" alt=""></a>
                                    </div>
                                    <div class="properties__caption">
                                        <p>User Experience</p>
                                        <h3><a href="#">Fundamental of UX for Application design</a></h3>
                                        <p>The automated process all your website tasks. Discover tools and techniques to engage effectively with vulnerable children and young people.

                                        </p>
                                        <div class="properties__footer d-flex justify-content-between align-items-center">
                                            <div class="restaurant-name">
                                                <div class="rating">
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star-half"></i>
                                                </div>
                                                <p><span>(4.5)</span> based on 120</p>
                                            </div>
                                            <div class="price">
                                                <span>$135</span>
                                            </div>
                                        </div>
                                        <a href="#" class="border-btn border-btn2">Find out more</a>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="properties properties2 mb-30">
                                <div class="properties__card">
                                    <div class="properties__img overlay1">
                                        <a href="#"><img src="assets/img/gallery/featured5.png" alt=""></a>
                                    </div>
                                    <div class="properties__caption">
                                        <p>User Experience</p>
                                        <h3><a href="#">Fundamental of UX for Application design</a></h3>
                                        <p>The automated process all your website tasks. Discover tools and techniques to engage effectively with vulnerable children and young people.

                                        </p>
                                        <div class="properties__footer d-flex justify-content-between align-items-center">
                                            <div class="restaurant-name">
                                                <div class="rating">
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star-half"></i>
                                                </div>
                                                <p><span>(4.5)</span> based on 120</p>
                                            </div>
                                            <div class="price">
                                                <span>$135</span>
                                            </div>
                                        </div>
                                        <a href="#" class="border-btn border-btn2">Find out more</a>
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="properties properties2 mb-30">
                                <div class="properties__card">
                                    <div class="properties__img overlay1">
                                        <a href="#"><img src="assets/img/gallery/featured6.png" alt=""></a>
                                    </div>
                                    <div class="properties__caption">
                                        <p>User Experience</p>
                                        <h3><a href="#">Fundamental of UX for Application design</a></h3>
                                        <p>The automated process all your website tasks. Discover tools and techniques to engage effectively with vulnerable children and young people.
                                        </p>
                                        <div class="properties__footer d-flex justify-content-between align-items-center">
                                            <div class="restaurant-name">
                                                <div class="rating">
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star"></i>
                                                    <i class="fas fa-star-half"></i>
                                                </div>
                                                <p><span>(4.5)</span> based on 120</p>
                                            </div>
                                            <div class="price">
                                                <span>$135</span>
                                            </div>
                                        </div>
                                        <a href="#" class="border-btn border-btn2">Find out more</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-xl-7 col-lg-8">
                            <div class="section-tittle text-center mt-40">
                                <a href="#" class="border-btn">Load More</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Courses area End -->
            <!--? top subjects Area Start -->
            <div class="topic-area">
                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col-xl-7 col-lg-8">
                            <div class="section-tittle text-center mb-55">
                                <h2>Explore top subjects</h2>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic1.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic2.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic3.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic4.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic5.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic6.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic7.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-4 col-sm-6">
                            <div class="single-topic text-center mb-30">
                                <div class="topic-img">
                                    <img src="assets/img/gallery/topic8.png" alt="">
                                    <div class="topic-content-box">
                                        <div class="topic-content">
                                            <h3><a href="#">Programing</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row justify-content-center">
                        <div class="col-xl-12">
                            <div class="section-tittle text-center mt-20">
                                <a href="courses.html" class="border-btn">View More Subjects</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- top subjects End -->  
            <!-- ? services-area -->
            <div class="services-area services-area2 section-padding40">
                <div class="container">
                    <div class="row justify-content-sm-center">
                        <div class="col-lg-4 col-md-6 col-sm-8">
                            <div class="single-services mb-30">
                                <div class="features-icon">
                                    <img src="assets/img/icon/icon1.svg" alt="">
                                </div>
                                <div class="features-caption">
                                    <h3>60+ UX courses</h3>
                                    <p>The automated process all your website tasks.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-6 col-sm-8">
                            <div class="single-services mb-30">
                                <div class="features-icon">
                                    <img src="assets/img/icon/icon2.svg" alt="">
                                </div>
                                <div class="features-caption">
                                    <h3>Expert instructors</h3>
                                    <p>The automated process all your website tasks.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-6 col-sm-8">
                            <div class="single-services mb-30">
                                <div class="features-icon">
                                    <img src="assets/img/icon/icon3.svg" alt="">
                                </div>
                                <div class="features-caption">
                                    <h3>Life time access</h3>
                                    <p>The automated process all your website tasks.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        <footer>
            <div class="footer-wrappper footer-bg">
                <!-- Footer Start-->
                <div class="footer-area footer-padding">
                    <div class="container">
                        <div class="row justify-content-between">
                            <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="single-footer-caption mb-30">
                                        <!-- logo -->
                                        <div class="footer-logo mb-25">
                                            <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                        </div>
                                        <div class="footer-tittle">
                                            <div class="footer-pera">
                                                <p>The automated process starts as soon as your clothes go into the machine.</p>
                                            </div>
                                        </div>
                                        <!-- social -->
                                        <div class="footer-social">
                                            <a href="#"><i class="fab fa-twitter"></i></a>
                                            <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                            <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Our solutions</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Support</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Company</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- footer-bottom area -->
                <div class="footer-bottom-area">
                    <div class="container">
                        <div class="footer-border">
                            <div class="row d-flex align-items-center">
                                <div class="col-xl-12 ">
                                    <div class="footer-copy-right text-center">
                                        <p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                                            Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer End-->
            </div>

        </footer> 
        <!-- Scroll Up -->
       <!-- Scroll Up -->
<div id="back-top" style="position: fixed; right: 20px; bottom: 100px; z-index: 9998;">
    <a title="Go to Top" href="#" style="display: flex; align-items: center; justify-content: center;
        width: 45px; height: 45px; background-color: #6c63ff; color: white;
        border-radius: 50%; box-shadow: 0 4px 10px rgba(0,0,0,0.2); text-decoration: none;">
        <i class="fas fa-level-up-alt" style="font-size: 20px;"></i>
    </a>
</div>



        <!-- JS here -->
        <script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="./assets/js/popper.min.js"></script>
        <script src="./assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="./assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="./assets/js/owl.carousel.min.js"></script>
        <script src="./assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="./assets/js/wow.min.js"></script>
        <script src="./assets/js/animated.headline.js"></script>
        <script src="./assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="./assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->
        <script src="./assets/js/jquery.nice-select.min.js"></script>
        <script src="./assets/js/jquery.sticky.js"></script>
        <!-- Progress -->
        <script src="./assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="./assets/js/jquery.counterup.min.js"></script>
        <script src="./assets/js/waypoints.min.js"></script>
        <script src="./assets/js/jquery.countdown.min.js"></script>
        <script src="./assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="./assets/js/contact.js"></script>
        <script src="./assets/js/jquery.form.js"></script>
        <script src="./assets/js/jquery.validate.min.js"></script>
        <script src="./assets/js/mail-script.js"></script>
        <script src="./assets/js/jquery.ajaxchimp.min.js"></script>

        <!-- Jquery Plugins, main Jquery -->	
        <script src="./assets/js/plugins.js"></script>
        <script src="./assets/js/main.js"></script>

    </body>
</html>

================
File: web/insertAccount.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Create Account</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">
        <!-- CSS here -->
        <link rel="stylesheet" href="assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="assets/css/slicknav.css">
        <link rel="stylesheet" href="assets/css/flaticon.css">
        <link rel="stylesheet" href="assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="assets/css/gijgo.css">
        <link rel="stylesheet" href="assets/css/animate.min.css">
        <link rel="stylesheet" href="assets/css/animated-headline.css">
        <link rel="stylesheet" href="assets/css/magnific-popup.css">
        <link rel="stylesheet" href="assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="assets/css/themify-icons.css">
        <link rel="stylesheet" href="assets/css/slick.css">
        <link rel="stylesheet" href="assets/css/nice-select.css">
        <link rel="stylesheet" href="assets/css/style.css">
        <style>
            .text-danger {
                color: red;
                font-size: 0.875em;
            }
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }

            body {
                padding-top: 90px; /* Tăng khoảng cách để không bị che */
            }

            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            }

            main h2 {
                text-align: center;
                font-weight: 600;
                color: #343a40;
            }

            form[method="get"] {
                display: flex;
                align-items: center;
                gap: 10px;
                flex-wrap: wrap;
                justify-content: center;
                margin-bottom: 20px;
            }

            form[method="get"] input[type="text"] {
                max-width: 300px;
            }

            table.table {
                background-color: #fff;
                border-radius: 6px;
                overflow: hidden;
            }

            table.table thead {
                background-color: #343a40;
                color: #fff;
            }

            table.table td,
            table.table th {
                vertical-align: middle !important;
                text-align: center;
            }

            .img-thumbnail {
                object-fit: cover;
                border-radius: 8px;
            }

            .btn {
                margin: 2px;
            }

            .btn-success, .btn-outline-secondary {
                margin-top: 10px;
                margin-right: 10px;
            }

            .text-danger {
                text-align: center;
                font-weight: bold;
            }
            /* Đặt chiều rộng cố định và nhất quán cho input, select */
            form input[type="email"],
            form input[type="password"],
            form input[type="text"],
            form input[type="date"],
            form select {
                width: 100%;       /* chiếm hết chiều ngang container cha */
                max-width: 400px;  /* hoặc giá trị bạn muốn */
                height: 40px;      /* chiều cao cố định */
                padding: 6px 12px; /* khoảng cách trong ô */
                box-sizing: border-box; /* tính padding và border vào chiều rộng */
                border-radius: 6px;
                border: 1px solid #ced4da;
                font-size: 16px;
            }


            /* Đối với radio thì cho khoảng cách và size đồng bộ */
            form input[type="radio"] {
                width: 20px;
                height: 20px;
                margin-right: 6px;
                vertical-align: middle;
            }

            /* Đảm bảo label nằm sát với radio */
            form label[for^="sex"] {
                margin-right: 15px;
                font-weight: 500;
                vertical-align: middle;
            }

            /* Giữ khoảng cách giữa các nhóm radio */
            .mb-3 .form-check {
                margin-bottom: 8px;
            }

        </style>

    </head>
    <body>
        <!--         ? Preloader Start 
                <div id="preloader-active">
                    <div class="preloader d-flex align-items-center justify-content-center">
                        <div class="preloader-inner position-relative">
                            <div class="preloader-circle"></div>
                            <div class="preloader-img pere-text">
                                <img src="assets/img/logo/loder.png" alt="">
                            </div>
                        </div>
                    </div>
                </div>
                 Preloader Start 
                 Header Start 
                <div class="header-area header-transparent">
                    <div class="main-header ">
                        <div class="header-bottom header-sticky">
                            <div class="container-fluid">
                                <div class="row align-items-center">
                                     Logo 
                                    <div class="col-xl-2 col-lg-2">
                                        <div class="logo">
                                            <a href="index.html"><img src="assets/img/logo/logo.png" alt=""></a>
                                        </div>
                                    </div>
                                    <div class="col-xl-10 col-lg-10">
                                        <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                             Main-menu 
                                            <div class="main-menu d-none d-lg-block">
                                                <nav>
                                                    <ul id="navigation">                                                                                          
                                                        <li class="active" ><a href="index.html">Home</a></li>
                                                        <li><a href="courses.html">Courses</a></li>
                                                        <li><a href="about.html">About</a></li>
                                                        <li><a href="#">Blog</a>
                                                            <ul class="submenu">
                                                                <li><a href="blog.html">Blog</a></li>
                                                                <li><a href="blog_details.html">Blog Details</a></li>
                                                                <li><a href="elements.html">Element</a></li>
                                                            </ul>
                                                        </li>
                                                        <li><a href="contact.html">Contact</a></li>
                                                    </ul>
                                                </nav>
                                            </div>
                                        </div>
                                    </div> 
                                     Mobile Menu 
                                    <div class="col-12">
                                        <div class="mobile_menu d-block d-lg-none"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                 Header End -->

        <%@include file="header.jsp" %>
    <body>
        <div class="container mt-5">
            <h2 class="mb-4">Create Account</h2>

            <form id="accountForm" action="admin" method="post" enctype="multipart/form-data">
                <input type="hidden" name="action" value="createAccount"/>
                <!-- Email -->
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="text" class="form-control" id="email" name="email">
                    <span class="text-danger" id="emailError"></span>
                </div>

                <!-- Password -->
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" name="password">
                    <span class="text-danger" id="passwordError"></span>
                </div>

                <!-- Full Name -->
                <div class="mb-3">
                    <label for="full_name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="full_name" name="full_name">
                    <span class="text-danger" id="fullNameError"></span>
                </div>

                <!-- Ngày sinh -->
                <div class="mb-3">
                    <label for="dob" class="form-label">Date of birth</label>
                    <input type="date" class="form-control" id="dob" name="dob">
                    <span class="text-danger" id="dobError"></span>
                </div>

                <!-- Giới tính -->
                <div class="mb-3">
                    <label class="form-label">Sex</label><br>
                    <input type="radio" name="sex" value="1" id="sexMale"> Male
                    <input type="radio" name="sex" value="0" id="sexFemale"> Female
                    <br>
                    <span class="text-danger" id="sexError"></span>
                </div>

                <!-- Role -->
                <div class="mb-3">
                    <label for="role" class="form-label">Role</label>
                    <select class="form-select" id="role" name="role">
                        <option value="">----</option>
                        <option value="student">Student</option>
                        <option value="parent">Parent</option>
                        <option value="teacher">Teacher</option>
                    </select>
                    <span class="text-danger" id="roleError"></span>
                </div>

                <!-- Status -->
                <div class="mb-3">
                    <label for="status" class="form-label">Status</label>
                    <select class="form-select" id="status" name="status">
                        <option value="">----</option>
                        <option value="active" >Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                    <span class="text-danger" id="statusError"></span>
                </div>

                <!-- Ảnh đại diện -->
                <div class="mb-3">
                    <label for="imgURL" class="form-label">Avatar</label>
                    <input type="file" class="form-control" id="imgURL" name="imgURL" accept="image/*">
                    <span class="text-danger" id="imgError"></span>
                </div>

                <!-- Submit -->
                <button type="submit" class="btn btn-primary">Add</button>
            </form>


            <c:if test="${not empty error}">
                <div class="alert alert-danger mt-3">${error}</div>
            </c:if>
        </div>
        <footer>
            <div class="footer-wrappper footer-bg">
                <!-- Footer Start-->
                <div class="footer-area footer-padding">
                    <div class="container">
                        <div class="row justify-content-between">
                            <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="single-footer-caption mb-30">
                                        <!-- logo -->
                                        <div class="footer-logo mb-25">
                                            <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                        </div>
                                        <div class="footer-tittle">
                                            <div class="footer-pera">
                                                <p>The automated process starts as soon as your clothes go into the machine.</p>
                                            </div>
                                        </div>
                                        <!-- social -->
                                        <div class="footer-social">
                                            <a href="#"><i class="fab fa-twitter"></i></a>
                                            <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                            <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Our solutions</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Support</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Company</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- footer-bottom area -->
                <div class="footer-bottom-area">
                    <div class="container">
                        <div class="footer-border">
                            <div class="row d-flex align-items-center">
                                <div class="col-xl-12 ">
                                    <div class="footer-copy-right text-center">
                                        <p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                                            Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer End-->
            </div>

        </footer> 
        <!-- Scroll Up -->
        <div id="back-top" >
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script>
            document.getElementById("accountForm").addEventListener("submit", function (e) {
                let isValid = true;

                // Lấy giá trị các trường
                const email = document.getElementById("email").value.trim();
                const password = document.getElementById("password").value.trim();
                const fullName = document.getElementById("full_name").value.trim();
                const dob = document.getElementById("dob").value;
                const sexMale = document.getElementById("sexMale").checked;
                const sexFemale = document.getElementById("sexFemale").checked;
                const role = document.getElementById("role").value;
                const status = document.getElementById("status").value;
                const imgFile = document.getElementById("imgURL").files[0];

                const errorFields = [
                    "emailError", "passwordError", "fullNameError", "dobError",
                    "sexError", "roleError", "statusError", "imgError"
                ];
                errorFields.forEach(id => document.getElementById(id).innerText = "");

                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    document.getElementById("emailError").innerText = "Invalid email.";
                    isValid = false;
                }

                if (password.length < 6) {
                    document.getElementById("passwordError").innerText = "Password must be at least 6 characters.";
                    isValid = false;
                }

                if (fullName === "") {
                    document.getElementById("fullNameError").innerText = "Please enter your full name.";
                    isValid = false;
                }

                if (dob === "") {
                    document.getElementById("dobError").innerText = "Please select date of birth.";
                    isValid = false;
                }

                if (!sexMale && !sexFemale) {
                    document.getElementById("sexError").innerText = "Please select gender.";
                    isValid = false;
                }

                if (role === "") {
                    document.getElementById("roleError").innerText = "Please select role.";
                    isValid = false;
                }

                if (status === "") {
                    document.getElementById("statusError").innerText = "Please select status.";
                    isValid = false;
                }

                if (!imgFile) {
                    document.getElementById("imgError").innerText = "Please select an avatar.";
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                }
            });
        </script>

    </script>

    <script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
    <script src="./assets/js/popper.min.js"></script>
    <script src="./assets/js/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="./assets/js/jquery.slicknav.min.js"></script>

    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="./assets/js/owl.carousel.min.js"></script>
    <script src="./assets/js/slick.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="./assets/js/wow.min.js"></script>
    <script src="./assets/js/animated.headline.js"></script>
    <script src="./assets/js/jquery.magnific-popup.js"></script>

    <!-- Date Picker -->
    <script src="./assets/js/gijgo.min.js"></script>
    <!-- Nice-select, sticky -->
    <script src="./assets/js/jquery.nice-select.min.js"></script>
    <script src="./assets/js/jquery.sticky.js"></script>
    <!-- Progress -->
    <script src="./assets/js/jquery.barfiller.js"></script>

    <!-- counter , waypoint,Hover Direction -->
    <script src="./assets/js/jquery.counterup.min.js"></script>
    <script src="./assets/js/waypoints.min.js"></script>
    <script src="./assets/js/jquery.countdown.min.js"></script>
    <script src="./assets/js/hover-direction-snake.min.js"></script>

    <!-- contact js -->
    <script src="./assets/js/contact.js"></script>
    <script src="./assets/js/jquery.form.js"></script>
    <script src="./assets/js/jquery.validate.min.js"></script>
    <script src="./assets/js/mail-script.js"></script>
    <script src="./assets/js/jquery.ajaxchimp.min.js"></script>

    <!-- Jquery Plugins, main Jquery -->	
    <script src="./assets/js/plugins.js"></script>
    <script src="./assets/js/main.js"></script>
    <script src="./assets/js/main.js"></script>
</body>
</html>

================
File: web/login.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Login Page</title>
        <link rel="stylesheet" href="https://unpkg.com/bootstrap@5.3.3/dist/css/bootstrap.min.css">
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">
        <!-- CSS here -->
        <link rel="stylesheet" href="assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="assets/css/slicknav.css">
        <link rel="stylesheet" href="assets/css/flaticon.css">
        <link rel="stylesheet" href="assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="assets/css/gijgo.css">
        <link rel="stylesheet" href="assets/css/animate.min.css">
        <link rel="stylesheet" href="assets/css/animated-headline.css">
        <link rel="stylesheet" href="assets/css/magnific-popup.css">
        <link rel="stylesheet" href="assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="assets/css/themify-icons.css">
        <link rel="stylesheet" href="assets/css/slick.css">
        <link rel="stylesheet" href="assets/css/nice-select.css">
        <link rel="stylesheet" href="assets/css/style.css">
        <style>
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }

            body {
                padding-top: 90px; /* Tăng khoảng cách để không bị che */
            }

            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            }

            main h2 {
                text-align: center;
                font-weight: 600;
                color: #343a40;
            }

            form[method="get"] {
                display: flex;
                align-items: center;
                gap: 10px;
                flex-wrap: wrap;
                justify-content: center;
                margin-bottom: 20px;
            }

            form[method="get"] input[type="text"] {
                max-width: 300px;
            }

            table.table {
                background-color: #fff;
                border-radius: 6px;
                overflow: hidden;
            }

            table.table thead {
                background-color: #343a40;
                color: #fff;
            }

            table.table td,
            table.table th {
                vertical-align: middle !important;
                text-align: center;
            }

            .img-thumbnail {
                object-fit: cover;
                border-radius: 8px;
            }

            .btn {
                margin: 2px;
            }

            .btn-success, .btn-outline-secondary {
                margin-top: 10px;
                margin-right: 10px;
            }

            .text-danger {
                text-align: center;
                font-weight: bold;
            }




            body {
                font-family: Arial, sans-serif;
                background-color: #f5f5f5;
            }
            .login-container {
                max-width: 400px;
                margin: 50px auto;
                padding: 25px;
                background-color: white;
                box-shadow: 0 0 10px #ccc;
                border-radius: 5px;
            }
            .login-container h2 {
                text-align: center;
                margin-bottom: 25px;
            }
            .form-group {
                margin-bottom: 15px;
            }
            label {
                display: block;
                font-weight: bold;
            }
            input[type=text], input[type=password], select {
                width: 100%;
                padding: 8px;
                box-sizing: border-box;
            }
            .error {
                color: red;
                margin-bottom: 15px;
                text-align: center;
            }
            .remember-me {
                display: flex;
                align-items: center;
            }
            .remember-me input {
                margin-right: 5px;
            }
            button {
                width: 100%;
                padding: 10px;
                background-color: #3f51b5;
                border: none;
                color: white;
                font-weight: bold;
                cursor: pointer;
                border-radius: 3px;
            }
            button:hover {
                background-color: #303f9f;
            }

            /* Google Sign-In Button Styles */
            .google-btn {
                width: 100%;
                padding: 10px;
                background-color: #fff;
                border: 1px solid #ccc;
                color: #757575;
                font-weight: bold;
                cursor: pointer;
                border-radius: 3px;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-top: 15px;
                text-decoration: none;
            }

            .google-btn:hover {
                background-color: #f5f5f5;
            }

            .google-btn img {
                margin-right: 10px;
                width: 18px;
                height: 18px;
            }

            .or-divider {
                text-align: center;
                margin: 15px 0;
                position: relative;
            }

            .or-divider:before,
            .or-divider:after {
                content: "";
                display: block;
                width: 45%;
                height: 1px;
                background: #ddd;
                position: absolute;
                top: 50%;
            }

            .or-divider:before {
                left: 0;
            }

            .or-divider:after {
                right: 0;
            }
        </style>
    </head>
    <body>
        <!--         ? Preloader Start 
                <div id="preloader-active">
                    <div class="preloader d-flex align-items-center justify-content-center">
                        <div class="preloader-inner position-relative">
                            <div class="preloader-circle"></div>
                            <div class="preloader-img pere-text">
                                <img src="assets/img/logo/loder.png" alt="">
                            </div>
                        </div>
                    </div>
                </div>
                 Preloader Start 
                 Header Start 
                <div class="header-area header-transparent">
                    <div class="main-header ">
                        <div class="header-bottom header-sticky">
                            <div class="container-fluid">
                                <div class="row align-items-center">
                                     Logo 
                                    <div class="col-xl-2 col-lg-2">
                                        <div class="logo">
                                            <a href="index.html"><img src="assets/img/logo/logo.png" alt=""></a>
                                        </div>
                                    </div>
                                    <div class="col-xl-10 col-lg-10">
                                        <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                             Main-menu 
                                            <div class="main-menu d-none d-lg-block">
                                                <nav>
                                                    <ul id="navigation">                                                                                          
                                                        <li class="active" ><a href="index.html">Home</a></li>
                                                        <li><a href="courses.html">Courses</a></li>
                                                        <li><a href="about.html">About</a></li>
                                                        <li><a href="#">Blog</a>
                                                            <ul class="submenu">
                                                                <li><a href="blog.html">Blog</a></li>
                                                                <li><a href="blog_details.html">Blog Details</a></li>
                                                                <li><a href="elements.html">Element</a></li>
                                                            </ul>
                                                        </li>
                                                        <li><a href="contact.html">Contact</a></li>
                                                    </ul>
                                                </nav>
                                            </div>
                                        </div>
                                    </div> 
                                     Mobile Menu 
                                    <div class="col-12">
                                        <div class="mobile_menu d-block d-lg-none"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                 Header End -->

        <%@include file="header.jsp" %>
        <div class="login-container">
            <h2>Login</h2>

            <c:if test="${not empty error}">
                <div class="error">${error}</div>
            </c:if>

            <form action="${pageContext.request.contextPath}/login" method="post">
                <div class="form-group">
                    <label for="userType">User Type</label>
                    <select name="userType" id="userType" required onchange="toggleInputFields()">
                        <option value="teacher" ${userType == 'teacher' ? 'selected' : ''}>Teacher</option>
                        <option value="admin" ${userType == 'admin' ? 'selected' : ''}>Admin</option>
                        <option value="parent" ${userType == 'parent' ? 'selected' : ''}>Parent</option>
                        <option value="student" ${userType == 'student' ? 'selected' : ''}>Student</option>
                    </select>
                </div>
                </br>
                </br>

                <div class="form-group" id="emailGroup">
                    <label for="email">Email</label>
                    <input type="text" name="email" id="email"
                           value="${cookie.email.value != null ? cookie.email.value : requestScope.email}"
                           placeholder="Enter your email"/>
                </div>

                <div class="form-group" id="usernameGroup" style="display:none;">
                    <label for="username">Username</label>
                    <input type="text" name="username" id="username"
                           value="${cookie.username.value != null ? cookie.username.value : requestScope.username}"
                           placeholder="Enter your username"/>
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" name="password" id="password"
                           value="${cookie.password.value != null ? cookie.password.value : requestScope.password}" placeholder="Enter your password"/>
                </div>

                <div class="form-group remember-me">
                    <input type="checkbox" id="remember_me" name="remember_me"
                           ${cookie.remember.value!=null?'checked':''}/>
                    <label for="remember_me">Remember me</label>
                </div>
                <!--<a href="${pageContext.request.contextPath}/forgot-password" class="forget-password" style="background: black">Forget Password?</a>-->
                <button  class="btn btn-lg btn-danger" type="submit">Login</button>
<!--                <a href="https://accounts.google.com/o/oauth2/auth?scope=email%20profile%20openid&redirect_uri=http://localhost:9999/logingoogle&response_type=code&client_id=118450184719-ar44tevflkttlnqbb8hina7u55l0ecdv.apps.googleusercontent.com&approval_prompt=force" class="btn btn-lg btn-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="90" height="20" fill="currentColor">
                    <path d="M15.545 6.558a9.42 9.42 0 0 1 .139 1.626c0 2.434-.87 4.492-2.384 5.885h.002C11.978 15.292 10.158 16 8 16A8 8 0 1 1 8 0a7.689 7.689 0 0 1 5.352 2.082l-2.284 2.284A4.347 4.347 0 0 0 8 3.166c-2.087 0-3.86 1.408-4.492 3.304a4.792 4.792 0 0 0 0 3.063h.003c.635 1.893 2.405 3.301 4.492 3.301 1.078 0 2.004-.276 2.722-.764h-.003a3.702 3.702 0 0 0 1.599-2.431H8v-3.08h7.545z" />
                    </svg>
                    <span class="">Sign in with Google</span>
                </a>-->


                <!--<a href="/register.jsp"  class="btn btn-lg btn-danger">Register</a>-->

            </form>

            <div class="or-divider">
                <span>OR</span>
            </div>

            <a href="https://accounts.google.com/o/oauth2/auth?scope=email%20profile%20openid&redirect_uri=http://localhost:9999/logingoogle&response_type=code&client_id=118450184719-ar44tevflkttlnqbb8hina7u55l0ecdv.apps.googleusercontent.com&approval_prompt=force" class="google-btn">
                <img src="https://developers.google.com/identity/images/g-logo.png" alt="Google logo">
                <path d="M15.545 6.558a9.42 9.42 0 0 1 .139 1.626c0 2.434-.87 4.492-2.384 5.885h.002C11.978 15.292 10.158 16 8 16A8 8 0 1 1 8 0a7.689 7.689 0 0 1 5.352 2.082l-2.284 2.284A4.347 4.347 0 0 0 8 3.166c-2.087 0-3.86 1.408-4.492 3.304a4.792 4.792 0 0 0 0 3.063h.003c.635 1.893 2.405 3.301 4.492 3.301 1.078 0 2.004-.276 2.722-.764h-.003a3.702 3.702 0 0 0 1.599-2.431H8v-3.08h7.545z" />

                Sign in with Google
            </a>

            <div style="margin-top: 15px; text-align: center;">
                <a style="color: black" href="${pageContext.request.contextPath}/forgot-password.jsp">Forgot Password?</a>
                <span style="margin: 0 5px;">|</span>
                <a style="color: black"  href="${pageContext.request.contextPath}/register.jsp">Register</a>
            </div>
        </div>

        <script>
            function toggleInputFields() {
                const userType = document.getElementById('userType').value;
                if (userType === 'student') {
                    document.getElementById('emailGroup').style.display = 'none';
                    document.getElementById('usernameGroup').style.display = 'block';
                } else {
                    document.getElementById('emailGroup').style.display = 'block';
                    document.getElementById('usernameGroup').style.display = 'none';
                }
            }

            // Khởi động ban đầu để ẩn hiện đúng
            toggleInputFields();
        </script>
        <footer>
            <div class="footer-wrappper footer-bg">
                <!-- Footer Start-->
                <div class="footer-area footer-padding">
                    <div class="container">
                        <div class="row justify-content-between">
                            <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="single-footer-caption mb-30">
                                        <!-- logo -->
                                        <div class="footer-logo mb-25">
                                            <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                        </div>
                                        <div class="footer-tittle">
                                            <div class="footer-pera">
                                                <p>The automated process starts as soon as your clothes go into the machine.</p>
                                            </div>
                                        </div>
                                        <!-- social -->
                                        <div class="footer-social">
                                            <a href="#"><i class="fab fa-twitter"></i></a>
                                            <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                            <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Our solutions</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Support</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Company</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- footer-bottom area -->
                <div class="footer-bottom-area">
                    <div class="container">
                        <div class="footer-border">
                            <div class="row d-flex align-items-center">
                                <div class="col-xl-12 ">
                                    <div class="footer-copy-right text-center">
                                        <p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                                            Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer End-->
            </div>

        </footer> 
        <!-- Scroll Up -->
        <div id="back-top" >
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="./assets/js/popper.min.js"></script>
        <script src="./assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="./assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="./assets/js/owl.carousel.min.js"></script>
        <script src="./assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="./assets/js/wow.min.js"></script>
        <script src="./assets/js/animated.headline.js"></script>
        <script src="./assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="./assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->
        <script src="./assets/js/jquery.nice-select.min.js"></script>
        <script src="./assets/js/jquery.sticky.js"></script>
        <!-- Progress -->
        <script src="./assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="./assets/js/jquery.counterup.min.js"></script>
        <script src="./assets/js/waypoints.min.js"></script>
        <script src="./assets/js/jquery.countdown.min.js"></script>
        <script src="./assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="./assets/js/contact.js"></script>
        <script src="./assets/js/jquery.form.js"></script>
        <script src="./assets/js/jquery.validate.min.js"></script>
        <script src="./assets/js/mail-script.js"></script>
        <script src="./assets/js/jquery.ajaxchimp.min.js"></script>

        <!-- Jquery Plugins, main Jquery -->	
        <script src="./assets/js/plugins.js"></script>
        <script src="./assets/js/main.js"></script>
        <script src="./assets/js/main.js"></script>

    </body>
</html>

================
File: web/profileAccount.jsp
================
<%-- 
    Document   : profileAccount
    Created on : May 23, 2025, 3:06:45 PM
    Author     : BuiNgocLinh
--%>

<%@ page contentType="text/html;charset=UTF-8" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>My profile</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">
        <!-- CSS here -->
        <link rel="stylesheet" href="assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="assets/css/slicknav.css">
        <link rel="stylesheet" href="assets/css/flaticon.css">
        <link rel="stylesheet" href="assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="assets/css/gijgo.css">
        <link rel="stylesheet" href="assets/css/animate.min.css">
        <link rel="stylesheet" href="assets/css/animated-headline.css">
        <link rel="stylesheet" href="assets/css/magnific-popup.css">
        <link rel="stylesheet" href="assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="assets/css/themify-icons.css">
        <link rel="stylesheet" href="assets/css/slick.css">
        <link rel="stylesheet" href="assets/css/nice-select.css">
        <link rel="stylesheet" href="assets/css/style.css">
        <style>
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }

            body {
                padding-top: 90px; /* Tăng khoảng cách để không bị che */
            }

            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            }

            main h2 {
                text-align: center;
                font-weight: 600;
                color: #343a40;
            }

            form[method="get"] {
                display: flex;
                align-items: center;
                gap: 10px;
                flex-wrap: wrap;
                justify-content: center;
                margin-bottom: 20px;
            }

            form[method="get"] input[type="text"] {
                max-width: 300px;
            }

            table.table {
                background-color: #fff;
                border-radius: 6px;
                overflow: hidden;
            }

            table.table thead {
                background-color: #343a40;
                color: #fff;
            }

            table.table td,
            table.table th {
                vertical-align: middle !important;
                text-align: center;
            }

            .img-thumbnail {
                object-fit: cover;
                border-radius: 8px;
            }

            .btn {
                margin: 2px;
            }

            .btn-success, .btn-outline-secondary {
                margin-top: 10px;
                margin-right: 10px;
            }

            .text-danger {
                text-align: center;
                font-weight: bold;
            }
        </style>
    </head>
    <body>
        <!--         ? Preloader Start 
                <div id="preloader-active">
                    <div class="preloader d-flex align-items-center justify-content-center">
                        <div class="preloader-inner position-relative">
                            <div class="preloader-circle"></div>
                            <div class="preloader-img pere-text">
                                <img src="assets/img/logo/loder.png" alt="">
                            </div>
                        </div>
                    </div>
                </div>
                 Preloader Start 
                 Header Start 
                <div class="header-area header-transparent">
                    <div class="main-header ">
                        <div class="header-bottom header-sticky">
                            <div class="container-fluid">
                                <div class="row align-items-center">
                                     Logo 
                                    <div class="col-xl-2 col-lg-2">
                                        <div class="logo">
                                            <a href="index.html"><img src="assets/img/logo/logo.png" alt=""></a>
                                        </div>
                                    </div>
                                    <div class="col-xl-10 col-lg-10">
                                        <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                             Main-menu 
                                            <div class="main-menu d-none d-lg-block">
                                                <nav>
                                                    <ul id="navigation">                                                                                          
                                                        <li class="active" ><a href="index.html">Home</a></li>
                                                        <li><a href="courses.html">Courses</a></li>
                                                        <li><a href="about.html">About</a></li>
                                                        <li><a href="#">Blog</a>
                                                            <ul class="submenu">
                                                                <li><a href="blog.html">Blog</a></li>
                                                                <li><a href="blog_details.html">Blog Details</a></li>
                                                                <li><a href="elements.html">Element</a></li>
                                                            </ul>
                                                        </li>
                                                        <li><a href="contact.html">Contact</a></li>
                                                    </ul>
                                                </nav>
                                            </div>
                                        </div>
                                    </div> 
                                     Mobile Menu 
                                    <div class="col-12">
                                        <div class="mobile_menu d-block d-lg-none"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                 Header End -->

        <%@include file="header.jsp" %>
        <main>
            <div class="container mt-5 mb-5">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <h2 class="mb-4">My Profile</h2>

                        <table class="table table-bordered">
                            <tbody>
                                <tr>
                                    <th scope="row">Name:</th>
                                    <td>${view.full_name}</td>
                                </tr>
                                <tr>
                                    <th scope="row">Email:</th>
                                    <td>${view.email}</td>
                                </tr>
                                <tr>
                                    <th scope="row">Sex:</th>
                                    <td>
                                        <c:choose>
                                            <c:when test="${view.sex == 1}">Male</c:when>
                                            <c:when test="${view.sex == 0}">Female</c:when>
                                            <c:otherwise>Unknown</c:otherwise>
                                        </c:choose>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">Date Of Birth:</th>
                                    <td><fmt:formatDate value="${view.getFormattedDate()}" pattern="dd/MM/yyyy" /></td>
                                </tr>
                                <tr>
                                    <th scope="row">Role:</th>
                                    <td>${view.role}</td>
                                </tr>
                                <tr>
                                    <th scope="row">Status:</th>
                                    <td>${view.status}</td>
                                </tr>
                                <tr>
                                    <th scope="row">Avatar:</th>
                                    <td>
                                        <c:forEach items="${imageList}" var="i">
                                            <c:if test="${i.id == view.image_id}">
                                                <img src="${pageContext.request.contextPath}/${not empty i.image_data ? i.image_data : 'assets/img/avatar/macdinh.jpg'}"
                                                     alt="Avatar" class="img-fluid img-thumbnail" style="max-width: 200px; height: auto;" />
                                            </c:if>
                                        </c:forEach>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
            <!--                                            <a href="admin?action=deleteAccount&id=${acc.id}" class="btn btn-danger btn-sm"
                                                           onclick="return confirm('Are you sure you want to delete this account?');">
                                                            Delete
                                                        </a>-->
                                        <a href="admin?action=editAccount&id=${view.id}" class="btn btn-warning btn-sm">
                                            Update
                                        </a>
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                    </div>
                </div>
            </div>
        </main>
        <footer>
            <div class="footer-wrappper footer-bg">
                <!-- Footer Start-->
                <div class="footer-area footer-padding">
                    <div class="container">
                        <div class="row justify-content-between">
                            <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="single-footer-caption mb-30">
                                        <!-- logo -->
                                        <div class="footer-logo mb-25">
                                            <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                        </div>
                                        <div class="footer-tittle">
                                            <div class="footer-pera">
                                                <p>The automated process starts as soon as your clothes go into the machine.</p>
                                            </div>
                                        </div>
                                        <!-- social -->
                                        <div class="footer-social">
                                            <a href="#"><i class="fab fa-twitter"></i></a>
                                            <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                            <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Our solutions</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Support</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Company</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- footer-bottom area -->
                <div class="footer-bottom-area">
                    <div class="container">
                        <div class="footer-border">
                            <div class="row d-flex align-items-center">
                                <div class="col-xl-12 ">
                                    <div class="footer-copy-right text-center">
                                        <p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                                            Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer End-->
            </div>

        </footer> 
        <!-- Scroll Up -->
        <div id="back-top" >
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="./assets/js/popper.min.js"></script>
        <script src="./assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="./assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="./assets/js/owl.carousel.min.js"></script>
        <script src="./assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="./assets/js/wow.min.js"></script>
        <script src="./assets/js/animated.headline.js"></script>
        <script src="./assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="./assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->
        <script src="./assets/js/jquery.nice-select.min.js"></script>
        <script src="./assets/js/jquery.sticky.js"></script>
        <!-- Progress -->
        <script src="./assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="./assets/js/jquery.counterup.min.js"></script>
        <script src="./assets/js/waypoints.min.js"></script>
        <script src="./assets/js/jquery.countdown.min.js"></script>
        <script src="./assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="./assets/js/contact.js"></script>
        <script src="./assets/js/jquery.form.js"></script>
        <script src="./assets/js/jquery.validate.min.js"></script>
        <script src="./assets/js/mail-script.js"></script>
        <script src="./assets/js/jquery.ajaxchimp.min.js"></script>

        <!-- Jquery Plugins, main Jquery -->	
        <script src="./assets/js/plugins.js"></script>
        <script src="./assets/js/main.js"></script>
        <script src="./assets/js/main.js"></script>

    </body>
</html>

================
File: web/register.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Đăng ký tài khoản</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="manifest" href="site.webmanifest">
        <link rel="shortcut icon" type="image/x-icon" href="assets/img/favicon.ico">
        <!-- CSS here -->
        <link rel="stylesheet" href="assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="assets/css/slicknav.css">
        <link rel="stylesheet" href="assets/css/flaticon.css">
        <link rel="stylesheet" href="assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="assets/css/gijgo.css">
        <link rel="stylesheet" href="assets/css/animate.min.css">
        <link rel="stylesheet" href="assets/css/animated-headline.css">
        <link rel="stylesheet" href="assets/css/magnific-popup.css">
        <link rel="stylesheet" href="assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="assets/css/themify-icons.css">
        <link rel="stylesheet" href="assets/css/slick.css">
        <link rel="stylesheet" href="assets/css/nice-select.css">
        <link rel="stylesheet" href="assets/css/style.css">
        <style>
            .text-danger {
                color: red;
                font-size: 0.875em;
            }
            .header-area {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background-color: white;
                border-bottom: 1px solid #ddd;
            }

            body {
                padding-top: 90px; /* Tăng khoảng cách để không bị che */
            }

            main {
                background-color: #f8f9fa;
                padding: 30px 15px;
                border-radius: 8px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            }

            main h2 {
                text-align: center;
                font-weight: 600;
                color: #343a40;
            }

            form[method="get"] {
                display: flex;
                align-items: center;
                gap: 10px;
                flex-wrap: wrap;
                justify-content: center;
                margin-bottom: 20px;
            }

            form[method="get"] input[type="text"] {
                max-width: 300px;
            }

            table.table {
                background-color: #fff;
                border-radius: 6px;
                overflow: hidden;
            }

            table.table thead {
                background-color: #343a40;
                color: #fff;
            }

            table.table td,
            table.table th {
                vertical-align: middle !important;
                text-align: center;
            }

            .img-thumbnail {
                object-fit: cover;
                border-radius: 8px;
            }

            .btn {
                margin: 2px;
            }

            .btn-success, .btn-outline-secondary {
                margin-top: 10px;
                margin-right: 10px;
            }

            .text-danger {
                text-align: center;
                font-weight: bold;
            }
            /* Đặt chiều rộng cố định và nhất quán cho input, select */
            form input[type="email"],
            form input[type="password"],
            form input[type="text"],
            form input[type="date"],
            form select {
                width: 100%;       /* chiếm hết chiều ngang container cha */
                max-width: 400px;  /* hoặc giá trị bạn muốn */
                height: 40px;      /* chiều cao cố định */
                padding: 6px 12px; /* khoảng cách trong ô */
                box-sizing: border-box; /* tính padding và border vào chiều rộng */
                border-radius: 6px;
                border: 1px solid #ced4da;
                font-size: 16px;
            }


            /* Đối với radio thì cho khoảng cách và size đồng bộ */
            form input[type="radio"] {
                width: 20px;
                height: 20px;
                margin-right: 6px;
                vertical-align: middle;
            }

            /* Đảm bảo label nằm sát với radio */
            form label[for^="sex"] {
                margin-right: 15px;
                font-weight: 500;
                vertical-align: middle;
            }

            /* Giữ khoảng cách giữa các nhóm radio */
            .mb-3 .form-check {
                margin-bottom: 8px;
            }

        </style>

    </head>
    <body>
        <!-- ? Preloader Start -->
        <!--        <div id="preloader-active">
                    <div class="preloader d-flex align-items-center justify-content-center">
                        <div class="preloader-inner position-relative">
                            <div class="preloader-circle"></div>
                            <div class="preloader-img pere-text">
                                <img src="assets/img/logo/loder.png" alt="">
                            </div>
                        </div>
                    </div>
                </div>
                 Preloader Start 
                 Header Start 
                <div class="header-area header-transparent">
                    <div class="main-header ">
                        <div class="header-bottom header-sticky">
                            <div class="container-fluid">
                                <div class="row align-items-center">
                                     Logo 
                                    <div class="col-xl-2 col-lg-2">
                                        <div class="logo">
                                            <a href="index.html"><img src="assets/img/logo/logo.png" alt=""></a>
                                        </div>
                                    </div>
                                    <div class="col-xl-10 col-lg-10">
                                        <div class="menu-wrapper d-flex align-items-center justify-content-end">
                                             Main-menu 
                                            <div class="main-menu d-none d-lg-block">
                                                <nav>
                                                    <ul id="navigation">                                                                                          
                                                        <li class="active" ><a href="index.html">Home</a></li>
                                                        <li><a href="courses.html">Courses</a></li>
                                                        <li><a href="about.html">About</a></li>
                                                        <li><a href="#">Blog</a>
                                                            <ul class="submenu">
                                                                <li><a href="blog.html">Blog</a></li>
                                                                <li><a href="blog_details.html">Blog Details</a></li>
                                                                <li><a href="elements.html">Element</a></li>
                                                            </ul>
                                                        </li>
                                                        <li><a href="contact.html">Contact</a></li>
                                                    </ul>
                                                </nav>
                                            </div>
                                        </div>
                                    </div> 
                                     Mobile Menu 
                                    <div class="col-12">
                                        <div class="mobile_menu d-block d-lg-none"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                 Header End -->
        <%@include file="header.jsp" %>
    <body>
        <div class="container mt-5">
            <h2 class="mb-4">Register</h2>

            <form id="accountForm" action="admin" method="post" enctype="multipart/form-data">
                <input type="hidden" name="action" value="createAccount"/>
                <!-- Email -->
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="text" class="form-control" id="email" name="email">
                    <span class="text-danger" id="emailError"></span>
                </div>

                <!-- Password -->
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" class="form-control" id="password" name="password">
                    <span class="text-danger" id="passwordError"></span>
                </div>

                <!-- Full Name -->
                <div class="mb-3">
                    <label for="full_name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="full_name" name="full_name">
                    <span class="text-danger" id="fullNameError"></span>
                </div>

                <!-- Ngày sinh -->
                <div class="mb-3">
                    <label for="dob" class="form-label">Date of birth</label>
                    <input type="date" class="form-control" id="dob" name="dob">
                    <span class="text-danger" id="dobError"></span>
                </div>

                <!-- Giới tính -->
                <div class="mb-3">
                    <label class="form-label">Sex</label><br>
                    <input type="radio" name="sex" value="1" id="sexMale"> Male
                    <input type="radio" name="sex" value="0" id="sexFemale"> Female
                    <br>
                    <span class="text-danger" id="sexError"></span>
                </div>

                <!-- Role -->
                <div class="mb-3">
                    <label for="role" class="form-label">Role</label>
                    <select class="form-select" id="role" name="role">
                        <option value="">----</option>
                        <option value="parent">Parent</option>
                        <option value="teacher">Teacher</option>
                    </select>
                    <span class="text-danger" id="roleError"></span>
                </div>

                <!-- Status -->
                <div class="mb-3">
                    <label for="status" class="form-label">Status</label>
                    <select class="form-select" id="status" name="status">
                        <option value="">----</option>
                        <option value="active" >Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                    <span class="text-danger" id="statusError"></span>
                </div>

                <!-- Ảnh đại diện -->
                <div class="mb-3">
                    <label for="imgURL" class="form-label">Avatar</label>
                    <input type="file" class="form-control" id="imgURL" name="imgURL" accept="image/*">
                    <span class="text-danger" id="imgError"></span>
                </div>

                <!-- Submit -->
                <button type="submit" class="btn btn-primary">Add</button>
            </form>


            <c:if test="${not empty error}">
                <div class="alert alert-danger mt-3">${error}</div>
            </c:if>
        </div>
        <footer>
            <div class="footer-wrappper footer-bg">
                <!-- Footer Start-->
                <div class="footer-area footer-padding">
                    <div class="container">
                        <div class="row justify-content-between">
                            <div class="col-xl-4 col-lg-5 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="single-footer-caption mb-30">
                                        <!-- logo -->
                                        <div class="footer-logo mb-25">
                                            <a href="index.html"><img src="assets/img/logo/logo2_footer.png" alt=""></a>
                                        </div>
                                        <div class="footer-tittle">
                                            <div class="footer-pera">
                                                <p>The automated process starts as soon as your clothes go into the machine.</p>
                                            </div>
                                        </div>
                                        <!-- social -->
                                        <div class="footer-social">
                                            <a href="#"><i class="fab fa-twitter"></i></a>
                                            <a href="https://bit.ly/sai4ull"><i class="fab fa-facebook-f"></i></a>
                                            <a href="#"><i class="fab fa-pinterest-p"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-5">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Our solutions</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-4 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Support</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                <div class="single-footer-caption mb-50">
                                    <div class="footer-tittle">
                                        <h4>Company</h4>
                                        <ul>
                                            <li><a href="#">Design & creatives</a></li>
                                            <li><a href="#">Telecommunication</a></li>
                                            <li><a href="#">Restaurant</a></li>
                                            <li><a href="#">Programing</a></li>
                                            <li><a href="#">Architecture</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- footer-bottom area -->
                <div class="footer-bottom-area">
                    <div class="container">
                        <div class="footer-border">
                            <div class="row d-flex align-items-center">
                                <div class="col-xl-12 ">
                                    <div class="footer-copy-right text-center">
                                        <p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                                            Copyright &copy;<script>document.write(new Date().getFullYear());</script> All rights reserved | This template is made with <i class="fa fa-heart" aria-hidden="true"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a>
                                            <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer End-->
            </div>

        </footer> 
        <!-- Scroll Up -->
        <div id="back-top" >
            <a title="Go to Top" href="#"> <i class="fas fa-level-up-alt"></i></a>
        </div>

        <!-- JS here -->
        <script>
            document.getElementById("accountForm").addEventListener("submit", function (e) {
                let isValid = true;

                // Lấy giá trị các trường
                const email = document.getElementById("email").value.trim();
                const password = document.getElementById("password").value.trim();
                const fullName = document.getElementById("full_name").value.trim();
                const dob = document.getElementById("dob").value;
                const sexMale = document.getElementById("sexMale").checked;
                const sexFemale = document.getElementById("sexFemale").checked;
                const role = document.getElementById("role").value;
                const status = document.getElementById("status").value;
                const imgFile = document.getElementById("imgURL").files[0];

                const errorFields = [
                    "emailError", "passwordError", "fullNameError", "dobError",
                    "sexError", "roleError", "statusError", "imgError"
                ];
                errorFields.forEach(id => document.getElementById(id).innerText = "");

                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    document.getElementById("emailError").innerText = "Invalid email.";
                    isValid = false;
                }

                if (password.length < 6) {
                    document.getElementById("passwordError").innerText = "Password must be at least 6 characters.";
                    isValid = false;
                }

                if (fullName === "") {
                    document.getElementById("fullNameError").innerText = "Please enter your full name.";
                    isValid = false;
                }

                if (dob === "") {
                    document.getElementById("dobError").innerText = "Please select date of birth.";
                    isValid = false;
                }

                if (!sexMale && !sexFemale) {
                    document.getElementById("sexError").innerText = "Please select gender.";
                    isValid = false;
                }

                if (role === "") {
                    document.getElementById("roleError").innerText = "Please select role.";
                    isValid = false;
                }

                if (status === "") {
                    document.getElementById("statusError").innerText = "Please select status.";
                    isValid = false;
                }

                if (!imgFile) {
                    document.getElementById("imgError").innerText = "Please select an avatar.";
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                }
            });
        </script>

    </script>

    <script src="./assets/js/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="./assets/js/vendor/jquery-1.12.4.min.js"></script>
    <script src="./assets/js/popper.min.js"></script>
    <script src="./assets/js/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="./assets/js/jquery.slicknav.min.js"></script>

    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="./assets/js/owl.carousel.min.js"></script>
    <script src="./assets/js/slick.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="./assets/js/wow.min.js"></script>
    <script src="./assets/js/animated.headline.js"></script>
    <script src="./assets/js/jquery.magnific-popup.js"></script>

    <!-- Date Picker -->
    <script src="./assets/js/gijgo.min.js"></script>
    <!-- Nice-select, sticky -->
    <script src="./assets/js/jquery.nice-select.min.js"></script>
    <script src="./assets/js/jquery.sticky.js"></script>
    <!-- Progress -->
    <script src="./assets/js/jquery.barfiller.js"></script>

    <!-- counter , waypoint,Hover Direction -->
    <script src="./assets/js/jquery.counterup.min.js"></script>
    <script src="./assets/js/waypoints.min.js"></script>
    <script src="./assets/js/jquery.countdown.min.js"></script>
    <script src="./assets/js/hover-direction-snake.min.js"></script>

    <!-- contact js -->
    <script src="./assets/js/contact.js"></script>
    <script src="./assets/js/jquery.form.js"></script>
    <script src="./assets/js/jquery.validate.min.js"></script>
    <script src="./assets/js/mail-script.js"></script>
    <script src="./assets/js/jquery.ajaxchimp.min.js"></script>

    <!-- Jquery Plugins, main Jquery -->	
    <script src="./assets/js/plugins.js"></script>
    <script src="./assets/js/main.js"></script>
    <script src="./assets/js/main.js"></script>
</body>
</html>

================
File: web/teacher/manageTests.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Quản lý bài Test</title>
    <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/css/style.css">
    <style>
        body { background: #f9f9f9; padding-top: 80px; }
        .container { padding: 30px; margin-top: 30px; }
        h2 { color: #333; border-bottom: 2px solid #007BFF; padding-bottom: 8px; margin-bottom: 20px; }
        .add-link { margin-bottom: 15px; display: inline-block; background: #007BFF; color: #fff; padding: 8px 16px; border-radius: 4px; text-decoration: none; }
        .add-link:hover { background: #0056b3; }
        table { width: 100%; margin-top: 20px; }
        th, td { text-align: left; padding: 10px; }
        th { background: #007BFF; color: #fff; }
        tr:nth-child(even) { background: #f2f2f2; }
        .action-link { margin-right: 8px; }
        .alert { margin-bottom: 20px; }
    </style>
</head>
<body>
<jsp:include page="../header.jsp" />
<div class="container">
    <h2>Quản lý bài Test</h2>
    
    <!-- Success message -->
    <c:if test="${not empty message}">
        <div class="alert alert-success" role="alert">
            ${message}
        </div>
    </c:if>
    
    <!-- Error message -->
    <c:if test="${not empty error}">
        <div class="alert alert-danger" role="alert">
            ${error}
        </div>
    </c:if>
    
    <a class="add-link" href="${pageContext.request.contextPath}/test?action=create">Thêm mới Test</a>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Tên</th>
                <th>Mô tả</th>
                <th>Loại</th>
                <th>Danh mục</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            <c:forEach var="test" items="${testList}">
                <tr>
                    <td>${test.id}</td>
                    <td>${test.name}</td>
                    <td>${test.description}</td>
                    <td><c:choose><c:when test="${test.is_practice}">Practice</c:when><c:otherwise>Official</c:otherwise></c:choose></td>
                    <td>${categoryMap[test.category_id]}</td>
                    <td>
                        <a class="action-link btn btn-sm btn-warning" href="${pageContext.request.contextPath}/test?action=edit&id=${test.id}">Sửa</a>
                        <a class="action-link btn btn-sm btn-danger" href="${pageContext.request.contextPath}/test?action=delete&id=${test.id}" onclick="return confirm('Bạn chắc chắn muốn xoá?');">Xoá</a>
                    </td>
                </tr>
            </c:forEach>
        </tbody>
    </table>
</div>
<jsp:include page="../footer.jsp" />
</body>
</html>

================
File: web/Test/addTest.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Thêm mới Test</title>

        <!-- CSS -->
        <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="/assets/css/slicknav.css">
        <link rel="stylesheet" href="/assets/css/flaticon.css">
        <link rel="stylesheet" href="/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="/assets/css/gijgo.css">
        <link rel="stylesheet" href="/assets/css/animate.min.css">
        <link rel="stylesheet" href="/assets/css/animated-headline.css">
        <link rel="stylesheet" href="/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="/assets/css/themify-icons.css">
        <link rel="stylesheet" href="/assets/css/slick.css">
        <link rel="stylesheet" href="/assets/css/nice-select.css">
        <link rel="stylesheet" href="/assets/css/style.css">

        <style>
            html, body {
                margin: 0;
                padding-top:  50px;
                height: 100%;
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
            }

            body {
                padding-top: 80px; /* tránh header che nội dung */
                display: flex;
                flex-direction: column;
                min-height: 100vh;
            }

            .page-wrapper {
                flex: 1;
                display: flex;
                flex-direction: column;
            }

            .content {
                max-width: 600px;
                width: 100%;
                margin: 0 auto;
                padding: 20px;
            }

            h3 {
                color: #333;
                border-bottom: 2px solid #007BFF;
                padding-bottom: 8px;
                margin-bottom: 20px;
            }

            form {
                background-color: #fff;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            }

            input[type="text"],
            select {
                width: 100%;
                padding: 10px;
                margin-bottom: 15px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            input[type="checkbox"] {
                margin-right: 5px;
            }

            input[type="submit"] {
                background-color: #007BFF;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
            }

            input[type="submit"]:hover {
                background-color: #0056b3;
            }

            a {
                display: inline-block;
                margin-top: 15px;
                color: #007BFF;
                text-decoration: none;
            }

        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
<div class="page-wrapper">
    <jsp:include page="/header.jsp" />

            <div class="content">
                <h3>Thêm mới Test</h3>
                <form action="${pageContext.request.contextPath}/test" method="post">
                    <input type="hidden" name="action" value="add" />

                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" value="${test != null ? test.name : ''}" required />

                    <label for="description">Description:</label>
                    <input type="text" id="description" name="description" value="${test != null ? test.description : ''}" required />

                    <label><input type="checkbox" name="practice" value="true" /> Practice</label>

                    <label for="category">Category:</label>
                    <select id="category" name="categoryId" required>
                        <option value="" disabled selected>-- Chọn danh mục --</option>
                        <c:forEach var="entry" items="${categoryMap}">
                            <option value="${entry.key}">${entry.value}</option>
                        </c:forEach>
                    </select>

            <!-- Danh sách câu hỏi từ question bank -->
            <h4>Chọn câu hỏi cho bài test:</h4>
            <div style="max-height:300px;overflow-y:auto;border:1px solid #ccc;padding:10px;margin-bottom:15px;background:#fafafa">
                <table class="table table-bordered table-sm">
                    <thead>
                        <tr>
                            <th></th>
                            <th>ID</th>
                            <th>Nội dung câu hỏi</th>
                            <th>Lesson ID</th>
                        </tr>
                    </thead>
                    <tbody>
                        <c:forEach var="q" items="${questionList}">
                            <tr>
                                <td><input type="checkbox" name="questionIds" value="${q.id}" /></td>
                                <td>${q.id}</td>
                                <td>${q.question}</td>
                                <td>${q.lesson_id}</td>
                            </tr>
                        </c:forEach>
                    </tbody>
                </table>
            </div>

            <input type="submit" value="Thêm mới" />
        </form>

    
</div>

            <jsp:include page="/footer.jsp" />
        </div>

        <!-- JS -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->

        <!-- Progress -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
        <script>
            $(document).ready(function () {
                $('select').niceSelect();
            });
        </script>
    </body>
</html>

================
File: web/Test/manageQuestions.jsp
================


================
File: web/Test/testList.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<html>
    <head>
        <title>Danh sách Tests</title>
        <style>
            html, body {
                height: 100%;
                margin: 0;
                padding-top:  50px;
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
            }

            body {
                display: flex;
                flex-direction: column;
                min-height: 100vh;
                padding-top: 80px;
            }

            main {
                flex: 1;
                padding: 20px;
            }

            h2 {
                color: #333;
                border-bottom: 2px solid #007BFF;
                padding-bottom: 5px;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                background-color: white;
                margin-top: 20px;
            }

            table th, table td {
                border: 1px solid #ddd;
                padding: 10px;
                text-align: left;
            }

            table th {
                background-color: #007BFF;
                color: white;
            }

            table tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            a {
                text-decoration: none;
                color: #007BFF;
            }

            a:hover {
                text-decoration: underline;
            }

            p {
                margin: 10px 0;
                color: red;
            }

            .add-link {
                display: inline-block;
                margin-top: 15px;
                background-color: #007BFF;
                color: white;
                padding: 8px 12px;
                border-radius: 4px;
            }

            .add-link:hover {
                background-color: #0056b3;
            }
        </style>

        <!-- Styles -->
        <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="/assets/css/slicknav.css">
        <link rel="stylesheet" href="/assets/css/flaticon.css">
        <link rel="stylesheet" href="/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="/assets/css/gijgo.css">
        <link rel="stylesheet" href="/assets/css/animate.min.css">
        <link rel="stylesheet" href="/assets/css/animated-headline.css">
        <link rel="stylesheet" href="/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="/assets/css/themify-icons.css">
        <link rel="stylesheet" href="/assets/css/slick.css">
        <link rel="stylesheet" href="/assets/css/nice-select.css">
        <link rel="stylesheet" href="/assets/css/style.css">
    </head>

    <body>
        <jsp:include page="../header.jsp" />

        <main>
            <h2>Danh sách Tests</h2>

            <c:if test="${not empty error}">
                <p>${error}</p>
            </c:if>

            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Practice</th>
                        <th>Category Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach var="test" items="${testList}">
                        <tr>
                            <td>${test.id}</td>
                            <td>${test.name}</td>
                            <td>${test.description}</td>
                            <td>
                                <c:choose>
                                    <c:when test="${test.is_practice}">Yes</c:when>
                                    <c:otherwise>No</c:otherwise>
                                </c:choose>
                            </td>
                            <td>${categoryMap[test.category_id]}</td>
                            <td>
                                <a href="${pageContext.request.contextPath}/test?action=edit&id=${test.id}">Sửa</a> |
                                <a href="${pageContext.request.contextPath}/test?action=delete&id=${test.id}" onclick="return confirm('Bạn chắc chắn muốn xoá?');">Xoá</a>
                            </td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>

            <a class="add-link" href="${pageContext.request.contextPath}/test?action=create">Thêm mới Test</a>
        </main>

        <jsp:include page="/footer.jsp" />

        <!-- JS -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.nice-select.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.sticky.js"></script>
        <!-- Progress -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
    </body>
</html>

================
File: web/Test/updateTest.jsp
================
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<html>
    <head>
        <title>Sửa Test</title>
        <!-- CSS Libraries -->
        <link rel="stylesheet" href="/assets/css/bootstrap.min.css">
        <link rel="stylesheet" href="/assets/css/owl.carousel.min.css">
        <link rel="stylesheet" href="/assets/css/slicknav.css">
        <link rel="stylesheet" href="/assets/css/flaticon.css">
        <link rel="stylesheet" href="/assets/css/progressbar_barfiller.css">
        <link rel="stylesheet" href="/assets/css/gijgo.css">
        <link rel="stylesheet" href="/assets/css/animate.min.css">
        <link rel="stylesheet" href="/assets/css/animated-headline.css">
        <link rel="stylesheet" href="/assets/css/magnific-popup.css">
        <link rel="stylesheet" href="/assets/css/fontawesome-all.min.css">
        <link rel="stylesheet" href="/assets/css/themify-icons.css">
        <link rel="stylesheet" href="/assets/css/slick.css">
        <link rel="stylesheet" href="/assets/css/nice-select.css">
        <link rel="stylesheet" href="/assets/css/style.css">

        <style>
            html, body {
                margin: 0;
                padding: 0;
                height: 100%;
                font-family: Arial, sans-serif;
                background-color: #f9f9f9;
            }

            .page-wrapper {
                display: flex;
                flex-direction: column;
                min-height: 100vh;
            }

            header, footer {
                flex-shrink: 0;
            }

            main {
                flex: 1;
                padding: 100px 20px 20px 20px; /* top-padding tránh bị header che */
                display: flex;
                justify-content: center;
            }

            .form-container {
                background-color: #fff;
                padding: 25px;
                border-radius: 8px;
                box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);
                max-width: 500px;
                width: 100%;
            }

            h3 {
                color: #333;
                margin-bottom: 20px;
                border-bottom: 2px solid #007BFF;
                padding-bottom: 5px;
            }

            input[type="text"], select {
                width: 100%;
                padding: 10px;
                margin: 6px 0 15px 0;
                border: 1px solid #ccc;
                border-radius: 4px;
            }

            input[type="checkbox"] {
                margin-right: 8px;
            }

            input[type="submit"] {
                background-color: #007BFF;
                color: white;
                border: none;
                padding: 10px 16px;
                border-radius: 4px;
                cursor: pointer;
            }

            input[type="submit"]:hover {
                background-color: #0056b3;
            }

            a {
                display: inline-block;
                margin-top: 10px;
                text-decoration: none;
                color: #007BFF;
            }

            a:hover {
                text-decoration: underline;
            }

            footer {
                background: #f1f1f1;
                padding: 10px;
                text-align: center;
                margin-top: auto;
            }

            /* Fix for Nice Select dropdown */
            .nice-select {
                width: 100%;
                margin: 6px 0 15px 0;
                line-height: 40px;
                height: 42px;
            }

            .nice-select .list {
                width: 100%;
                max-height: 300px;
                overflow-y: auto;
            }

            .nice-select .option {
                line-height: 35px;
                min-height: 35px;
            }

            /* Ensure dropdown is visible */
            .nice-select .list {
                opacity: 1;
                pointer-events: auto;
                transform: scale(1) translateY(0);
                z-index: 9999;
            }

            .nice-select.open .list {
                opacity: 1;
                pointer-events: auto;
                transform: scale(1) translateY(0);
                z-index: 9999;
            }
        </style>
    </head>
    <body>
        <div class="page-wrapper">
            <jsp:include page="/header.jsp" />

            <main>
                <div class="form-container">
                    <h3>Sửa Test</h3>

                    <form action="${pageContext.request.contextPath}/test" method="post">
                        <input type="hidden" name="action" value="update"/>
                        <input type="hidden" name="id" value="${test.id}"/>

                        Name:
                        <input type="text" name="name" value="${test.name}" required/>

                        Description:
                        <input type="text" name="description" value="${test.description}" required/>

                        <label>
                            <input type="checkbox" name="practice" value="true"
                                   <c:if test="${test.is_practice}">checked</c:if> />
                                   Practice
                            </label>

                            <label for="category">Category:</label>
                            <select id="category" name="categoryId" required style="display: block; width: 100%; height: 40px; padding: 8px; border: 1px solid #ccc; border-radius: 4px; background-color: white;">
                                <option value="" disabled>-- Chọn danh mục --</option>
                            <c:forEach var="entry" items="${categoryMap}">
                                <option value="${entry.key}" ${test.category_id == entry.key ? 'selected' : ''}>${entry.value}</option>
                            </c:forEach>
                        </select>

                        <!-- Danh sách câu hỏi từ question bank -->
                        <h4>Chọn câu hỏi cho bài test:</h4>
                        <div style="max-height:400px;overflow-y:auto;border:1px solid #ccc;padding:10px;margin-bottom:15px;background:#fafafa">
                            <c:if test="${empty questionList}">
                                <p class="text-danger">Không có câu hỏi nào trong ngân hàng câu hỏi.</p>
                            </c:if>
                            <c:if test="${not empty questionList}">
                                <table class="table table-bordered table-sm">
                                    <thead>
                                        <tr>
                                            <th style="width:40px"></th>
                                            <th style="width:50px">ID</th>
                                            <th>Nội dung câu hỏi</th>
                                            <th style="width:80px">Lesson</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <c:forEach var="q" items="${questionList}">
                                            <tr>
                                                <td>
                                                    <input type="checkbox" name="questionIds" value="${q.id}" 
                                                           <c:if test="${selectedQuestionIds.contains(q.id)}">checked</c:if> />
                                                    </td>
                                                    <td>${q.id}</td>
                                                <td>${q.question}</td>
                                                <td>${q.lesson_id}</td>
                                            </tr>
                                        </c:forEach>
                                    </tbody>
                                </table>
                            </c:if>
                        </div>

                        <input type="submit" value="Cập nhật"/>
                    </form>

                    <a href="${pageContext.request.contextPath}/test">← Quay lại danh sách</a>
                </div>
            </main>

            <jsp:include page="/footer.jsp" />
        </div>

        <!-- JS Libraries -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/modernizr-3.5.0.min.js"></script>
        <!-- Jquery, Popper, Bootstrap -->
        <script src="${pageContext.request.contextPath}/assets/js/vendor/jquery-1.12.4.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/popper.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/bootstrap.min.js"></script>
        <!-- Jquery Mobile Menu -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.slicknav.min.js"></script>

        <!-- Jquery Slick , Owl-Carousel Plugins -->
        <script src="${pageContext.request.contextPath}/assets/js/owl.carousel.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/slick.min.js"></script>
        <!-- One Page, Animated-HeadLin -->
        <script src="${pageContext.request.contextPath}/assets/js/wow.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/animated.headline.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.magnific-popup.js"></script>

        <!-- Date Picker -->
        <script src="${pageContext.request.contextPath}/assets/js/gijgo.min.js"></script>
        <!-- Nice-select, sticky -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.nice-select.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.sticky.js"></script>
        <!-- Progress -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.barfiller.js"></script>

        <!-- counter , waypoint,Hover Direction -->
        <script src="${pageContext.request.contextPath}/assets/js/jquery.counterup.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/waypoints.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.countdown.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/hover-direction-snake.min.js"></script>

        <!-- contact js -->
        <script src="${pageContext.request.contextPath}/assets/js/contact.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.form.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.validate.min.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/mail-script.js"></script>
        <script src="${pageContext.request.contextPath}/assets/js/jquery.ajaxchimp.min.js"></script>
        <script>
            $(document).ready(function () {
                // Disable Nice Select for the category dropdown to use native select
                if ($.fn.niceSelect) {
                    // First destroy any existing nice-select
                    $('#category').niceSelect('destroy');
                }

                // Add a click handler to ensure the dropdown opens
                $('#category').on('click', function (e) {
                    e.stopPropagation();
                    $(this).focus();
                });

                // Make sure the selected option is correct
                var selectedValue = '${test.category_id}';
                if (selectedValue) {
                    $('#category').val(selectedValue);
                }

                // Log for debugging
                console.log("Selected category ID: " + selectedValue);
                console.log("Available categories in map");
            <c:forEach var="entry" items="${categoryMap}">
                console.log("ID: ${entry.key}, Name: ${entry.value}");
            </c:forEach>
            });
        </script>
    </body>
</html>

================
File: web/WEB-INF/web.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="6.0" xmlns="https://jakarta.ee/xml/ns/jakartaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd">
    <servlet>
        <servlet-name>TinhServlet</servlet-name>
        <servlet-class>controller.TinhServlet</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>LoginServlet</servlet-name>
        <servlet-class>controller.LoginServlet</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>ItemController</servlet-name>
        <servlet-class>controller.ItemController</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>AdminController</servlet-name>
        <servlet-class>controller.admin.AdminController</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>TinhServlet</servlet-name>
        <url-pattern>/tinh</url-pattern>
    </servlet-mapping>
    <context-param>
        <param-name>user</param-name>
        <param-value>linhbhn</param-value>
    </context-param>
    <context-param>
        <param-name>pass</param-name>
        <param-value>123</param-value>
    </context-param>
    <servlet-mapping>
        <servlet-name>ItemController</servlet-name>
        <url-pattern>/list</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>AdminController</servlet-name>
        <url-pattern>/admin</url-pattern>
    </servlet-mapping>
</web-app>
